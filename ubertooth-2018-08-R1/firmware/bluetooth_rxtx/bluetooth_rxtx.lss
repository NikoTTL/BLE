
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007078  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0000b078  0000b078  0000b078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .persistent   00000020  10000000  10000000  00020000  2**0
                  ALLOC
  3 .data         000009e5  10000020  0000b080  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00003116  10000a08  0000ba65  00010a08  2**3
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00010a05  2**0
                  CONTENTS, READONLY
  6 .comment      00000070  00000000  00000000  00010a2e  2**0
                  CONTENTS, READONLY
  7 .debug_info   00010033  00000000  00000000  00010a9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003eeb  00000000  00000000  00020ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000875f  00000000  00000000  000249bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000a90  00000000  00000000  0002d120  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d10  00000000  00000000  0002dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000042f3  00000000  00000000  0002e8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000371e  00000000  00000000  00032bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001ba0  00000000  00000000  000362d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 69 90 00 00 bd 90 00 00 bd 90 00 00     .?..i...........
    4010:	bd 90 00 00 bd 90 00 00 bd 90 00 00 00 00 00 00     ................
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 bd 90 00 00     ................
    4030:	bd 90 00 00 00 00 00 00 bd 90 00 00 bd 90 00 00     ................
    4040:	bd 90 00 00 b1 4f 00 00 65 7a 00 00 bd 90 00 00     .....O..ez......
    4050:	bd 90 00 00 bd 90 00 00 bd 90 00 00 bd 90 00 00     ................
    4060:	bd 90 00 00 bd 90 00 00 bd 90 00 00 bd 90 00 00     ................
    4070:	bd 90 00 00 bd 90 00 00 bd 90 00 00 bd 90 00 00     ................
    4080:	bd 90 00 00 bd 90 00 00 bd 90 00 00 bd 90 00 00     ................
    4090:	bd 90 00 00 ed 50 00 00 bd 90 00 00 bd 90 00 00     .....P..........
    40a0:	65 90 00 00 bd 90 00 00 fd 51 00 00 bd 90 00 00     e........Q......
    40b0:	bd 90 00 00 bd 90 00 00 bd 90 00 00 bd 90 00 00     ................
    40c0:	bd 90 00 00 bd 90 00 00 bd 90 00 00                 ............

000040cc <deregister_tm_clones>:
    40cc:	4b04      	ldr	r3, [pc, #16]	; (40e0 <deregister_tm_clones+0x14>)
    40ce:	4805      	ldr	r0, [pc, #20]	; (40e4 <deregister_tm_clones+0x18>)
    40d0:	1a1b      	subs	r3, r3, r0
    40d2:	2b06      	cmp	r3, #6
    40d4:	d902      	bls.n	40dc <deregister_tm_clones+0x10>
    40d6:	4b04      	ldr	r3, [pc, #16]	; (40e8 <deregister_tm_clones+0x1c>)
    40d8:	b103      	cbz	r3, 40dc <deregister_tm_clones+0x10>
    40da:	4718      	bx	r3
    40dc:	4770      	bx	lr
    40de:	bf00      	nop
    40e0:	10000a0b 	.word	0x10000a0b
    40e4:	10000a08 	.word	0x10000a08
    40e8:	00000000 	.word	0x00000000

000040ec <register_tm_clones>:
    40ec:	4905      	ldr	r1, [pc, #20]	; (4104 <register_tm_clones+0x18>)
    40ee:	4806      	ldr	r0, [pc, #24]	; (4108 <register_tm_clones+0x1c>)
    40f0:	1a09      	subs	r1, r1, r0
    40f2:	1089      	asrs	r1, r1, #2
    40f4:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    40f8:	1049      	asrs	r1, r1, #1
    40fa:	d002      	beq.n	4102 <register_tm_clones+0x16>
    40fc:	4b03      	ldr	r3, [pc, #12]	; (410c <register_tm_clones+0x20>)
    40fe:	b103      	cbz	r3, 4102 <register_tm_clones+0x16>
    4100:	4718      	bx	r3
    4102:	4770      	bx	lr
    4104:	10000a08 	.word	0x10000a08
    4108:	10000a08 	.word	0x10000a08
    410c:	00000000 	.word	0x00000000

00004110 <__do_global_dtors_aux>:
    4110:	b510      	push	{r4, lr}
    4112:	4c06      	ldr	r4, [pc, #24]	; (412c <__do_global_dtors_aux+0x1c>)
    4114:	7823      	ldrb	r3, [r4, #0]
    4116:	b943      	cbnz	r3, 412a <__do_global_dtors_aux+0x1a>
    4118:	f7ff ffd8 	bl	40cc <deregister_tm_clones>
    411c:	4b04      	ldr	r3, [pc, #16]	; (4130 <__do_global_dtors_aux+0x20>)
    411e:	b113      	cbz	r3, 4126 <__do_global_dtors_aux+0x16>
    4120:	4804      	ldr	r0, [pc, #16]	; (4134 <__do_global_dtors_aux+0x24>)
    4122:	f3af 8000 	nop.w
    4126:	2301      	movs	r3, #1
    4128:	7023      	strb	r3, [r4, #0]
    412a:	bd10      	pop	{r4, pc}
    412c:	10000a08 	.word	0x10000a08
    4130:	00000000 	.word	0x00000000
    4134:	0000b050 	.word	0x0000b050

00004138 <frame_dummy>:
    4138:	b508      	push	{r3, lr}
    413a:	4b08      	ldr	r3, [pc, #32]	; (415c <frame_dummy+0x24>)
    413c:	b11b      	cbz	r3, 4146 <frame_dummy+0xe>
    413e:	4808      	ldr	r0, [pc, #32]	; (4160 <frame_dummy+0x28>)
    4140:	4908      	ldr	r1, [pc, #32]	; (4164 <frame_dummy+0x2c>)
    4142:	f3af 8000 	nop.w
    4146:	4808      	ldr	r0, [pc, #32]	; (4168 <frame_dummy+0x30>)
    4148:	6803      	ldr	r3, [r0, #0]
    414a:	b913      	cbnz	r3, 4152 <frame_dummy+0x1a>
    414c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4150:	e7cc      	b.n	40ec <register_tm_clones>
    4152:	4b06      	ldr	r3, [pc, #24]	; (416c <frame_dummy+0x34>)
    4154:	2b00      	cmp	r3, #0
    4156:	d0f9      	beq.n	414c <frame_dummy+0x14>
    4158:	4798      	blx	r3
    415a:	e7f7      	b.n	414c <frame_dummy+0x14>
    415c:	00000000 	.word	0x00000000
    4160:	0000b050 	.word	0x0000b050
    4164:	10000a0c 	.word	0x10000a0c
    4168:	10000a08 	.word	0x10000a08
    416c:	00000000 	.word	0x00000000

00004170 <atexit>:
    4170:	4601      	mov	r1, r0
    4172:	2000      	movs	r0, #0
    4174:	4602      	mov	r2, r0
    4176:	4603      	mov	r3, r0
    4178:	f000 b88c 	b.w	4294 <__register_exitproc>

0000417c <__libc_fini_array>:
    417c:	b538      	push	{r3, r4, r5, lr}
    417e:	4b08      	ldr	r3, [pc, #32]	; (41a0 <__libc_fini_array+0x24>)
    4180:	4d08      	ldr	r5, [pc, #32]	; (41a4 <__libc_fini_array+0x28>)
    4182:	1aed      	subs	r5, r5, r3
    4184:	10ac      	asrs	r4, r5, #2
    4186:	bf18      	it	ne
    4188:	18ed      	addne	r5, r5, r3
    418a:	d005      	beq.n	4198 <__libc_fini_array+0x1c>
    418c:	3c01      	subs	r4, #1
    418e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    4192:	4798      	blx	r3
    4194:	2c00      	cmp	r4, #0
    4196:	d1f9      	bne.n	418c <__libc_fini_array+0x10>
    4198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    419c:	f006 bf62 	b.w	b064 <_fini>
    41a0:	0000b070 	.word	0x0000b070
    41a4:	0000b074 	.word	0x0000b074

000041a8 <__libc_init_array>:
    41a8:	b570      	push	{r4, r5, r6, lr}
    41aa:	4e0f      	ldr	r6, [pc, #60]	; (41e8 <__libc_init_array+0x40>)
    41ac:	4d0f      	ldr	r5, [pc, #60]	; (41ec <__libc_init_array+0x44>)
    41ae:	1b76      	subs	r6, r6, r5
    41b0:	10b6      	asrs	r6, r6, #2
    41b2:	bf18      	it	ne
    41b4:	2400      	movne	r4, #0
    41b6:	d005      	beq.n	41c4 <__libc_init_array+0x1c>
    41b8:	3401      	adds	r4, #1
    41ba:	f855 3b04 	ldr.w	r3, [r5], #4
    41be:	4798      	blx	r3
    41c0:	42a6      	cmp	r6, r4
    41c2:	d1f9      	bne.n	41b8 <__libc_init_array+0x10>
    41c4:	4e0a      	ldr	r6, [pc, #40]	; (41f0 <__libc_init_array+0x48>)
    41c6:	4d0b      	ldr	r5, [pc, #44]	; (41f4 <__libc_init_array+0x4c>)
    41c8:	f006 ff42 	bl	b050 <_init>
    41cc:	1b76      	subs	r6, r6, r5
    41ce:	10b6      	asrs	r6, r6, #2
    41d0:	bf18      	it	ne
    41d2:	2400      	movne	r4, #0
    41d4:	d006      	beq.n	41e4 <__libc_init_array+0x3c>
    41d6:	3401      	adds	r4, #1
    41d8:	f855 3b04 	ldr.w	r3, [r5], #4
    41dc:	4798      	blx	r3
    41de:	42a6      	cmp	r6, r4
    41e0:	d1f9      	bne.n	41d6 <__libc_init_array+0x2e>
    41e2:	bd70      	pop	{r4, r5, r6, pc}
    41e4:	bd70      	pop	{r4, r5, r6, pc}
    41e6:	bf00      	nop
    41e8:	0000b05c 	.word	0x0000b05c
    41ec:	0000b05c 	.word	0x0000b05c
    41f0:	0000b064 	.word	0x0000b064
    41f4:	0000b05c 	.word	0x0000b05c

000041f8 <memset>:
    41f8:	b470      	push	{r4, r5, r6}
    41fa:	0784      	lsls	r4, r0, #30
    41fc:	d046      	beq.n	428c <memset+0x94>
    41fe:	1e54      	subs	r4, r2, #1
    4200:	2a00      	cmp	r2, #0
    4202:	d041      	beq.n	4288 <memset+0x90>
    4204:	b2cd      	uxtb	r5, r1
    4206:	4603      	mov	r3, r0
    4208:	e002      	b.n	4210 <memset+0x18>
    420a:	1e62      	subs	r2, r4, #1
    420c:	b3e4      	cbz	r4, 4288 <memset+0x90>
    420e:	4614      	mov	r4, r2
    4210:	f803 5b01 	strb.w	r5, [r3], #1
    4214:	079a      	lsls	r2, r3, #30
    4216:	d1f8      	bne.n	420a <memset+0x12>
    4218:	2c03      	cmp	r4, #3
    421a:	d92e      	bls.n	427a <memset+0x82>
    421c:	b2cd      	uxtb	r5, r1
    421e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    4222:	2c0f      	cmp	r4, #15
    4224:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4228:	d919      	bls.n	425e <memset+0x66>
    422a:	4626      	mov	r6, r4
    422c:	f103 0210 	add.w	r2, r3, #16
    4230:	3e10      	subs	r6, #16
    4232:	2e0f      	cmp	r6, #15
    4234:	f842 5c10 	str.w	r5, [r2, #-16]
    4238:	f842 5c0c 	str.w	r5, [r2, #-12]
    423c:	f842 5c08 	str.w	r5, [r2, #-8]
    4240:	f842 5c04 	str.w	r5, [r2, #-4]
    4244:	f102 0210 	add.w	r2, r2, #16
    4248:	d8f2      	bhi.n	4230 <memset+0x38>
    424a:	f1a4 0210 	sub.w	r2, r4, #16
    424e:	f022 020f 	bic.w	r2, r2, #15
    4252:	f004 040f 	and.w	r4, r4, #15
    4256:	3210      	adds	r2, #16
    4258:	2c03      	cmp	r4, #3
    425a:	4413      	add	r3, r2
    425c:	d90d      	bls.n	427a <memset+0x82>
    425e:	461e      	mov	r6, r3
    4260:	4622      	mov	r2, r4
    4262:	3a04      	subs	r2, #4
    4264:	2a03      	cmp	r2, #3
    4266:	f846 5b04 	str.w	r5, [r6], #4
    426a:	d8fa      	bhi.n	4262 <memset+0x6a>
    426c:	1f22      	subs	r2, r4, #4
    426e:	f022 0203 	bic.w	r2, r2, #3
    4272:	3204      	adds	r2, #4
    4274:	4413      	add	r3, r2
    4276:	f004 0403 	and.w	r4, r4, #3
    427a:	b12c      	cbz	r4, 4288 <memset+0x90>
    427c:	b2c9      	uxtb	r1, r1
    427e:	441c      	add	r4, r3
    4280:	f803 1b01 	strb.w	r1, [r3], #1
    4284:	42a3      	cmp	r3, r4
    4286:	d1fb      	bne.n	4280 <memset+0x88>
    4288:	bc70      	pop	{r4, r5, r6}
    428a:	4770      	bx	lr
    428c:	4614      	mov	r4, r2
    428e:	4603      	mov	r3, r0
    4290:	e7c2      	b.n	4218 <memset+0x20>
    4292:	bf00      	nop

00004294 <__register_exitproc>:
    4294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4298:	4c25      	ldr	r4, [pc, #148]	; (4330 <__register_exitproc+0x9c>)
    429a:	4606      	mov	r6, r0
    429c:	6825      	ldr	r5, [r4, #0]
    429e:	4688      	mov	r8, r1
    42a0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    42a4:	4692      	mov	sl, r2
    42a6:	4699      	mov	r9, r3
    42a8:	b3c4      	cbz	r4, 431c <__register_exitproc+0x88>
    42aa:	6860      	ldr	r0, [r4, #4]
    42ac:	281f      	cmp	r0, #31
    42ae:	dc17      	bgt.n	42e0 <__register_exitproc+0x4c>
    42b0:	1c41      	adds	r1, r0, #1
    42b2:	b176      	cbz	r6, 42d2 <__register_exitproc+0x3e>
    42b4:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    42b8:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    42bc:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    42c0:	2201      	movs	r2, #1
    42c2:	4082      	lsls	r2, r0
    42c4:	4315      	orrs	r5, r2
    42c6:	2e02      	cmp	r6, #2
    42c8:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    42cc:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    42d0:	d01e      	beq.n	4310 <__register_exitproc+0x7c>
    42d2:	1c83      	adds	r3, r0, #2
    42d4:	6061      	str	r1, [r4, #4]
    42d6:	2000      	movs	r0, #0
    42d8:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    42dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42e0:	4b14      	ldr	r3, [pc, #80]	; (4334 <__register_exitproc+0xa0>)
    42e2:	b303      	cbz	r3, 4326 <__register_exitproc+0x92>
    42e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42e8:	f3af 8000 	nop.w
    42ec:	4604      	mov	r4, r0
    42ee:	b1d0      	cbz	r0, 4326 <__register_exitproc+0x92>
    42f0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    42f4:	2700      	movs	r7, #0
    42f6:	e884 0088 	stmia.w	r4, {r3, r7}
    42fa:	4638      	mov	r0, r7
    42fc:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4300:	2101      	movs	r1, #1
    4302:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    4306:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    430a:	2e00      	cmp	r6, #0
    430c:	d0e1      	beq.n	42d2 <__register_exitproc+0x3e>
    430e:	e7d1      	b.n	42b4 <__register_exitproc+0x20>
    4310:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    4314:	431a      	orrs	r2, r3
    4316:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    431a:	e7da      	b.n	42d2 <__register_exitproc+0x3e>
    431c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    4320:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    4324:	e7c1      	b.n	42aa <__register_exitproc+0x16>
    4326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    432a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    432e:	bf00      	nop
    4330:	0000a554 	.word	0x0000a554
    4334:	00000000 	.word	0x00000000

00004338 <register_fini>:
    4338:	4b02      	ldr	r3, [pc, #8]	; (4344 <register_fini+0xc>)
    433a:	b113      	cbz	r3, 4342 <register_fini+0xa>
    433c:	4802      	ldr	r0, [pc, #8]	; (4348 <register_fini+0x10>)
    433e:	f7ff bf17 	b.w	4170 <atexit>
    4342:	4770      	bx	lr
    4344:	00000000 	.word	0x00000000
    4348:	0000417d 	.word	0x0000417d

0000434c <reverse8>:
	dio_ssp_stop();
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
    434c:	b510      	push	{r4, lr}
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    434e:	2300      	movs	r3, #0
	cs_trigger_disable();
}

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;
    4350:	461a      	mov	r2, r3

	for(size_t i=0; i<8; i++)
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    4352:	fa40 f103 	asr.w	r1, r0, r3
    4356:	f1c3 0407 	rsb	r4, r3, #7
    435a:	f001 0101 	and.w	r1, r1, #1
    435e:	40a1      	lsls	r1, r4

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    4360:	3301      	adds	r3, #1
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    4362:	430a      	orrs	r2, r1

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    4364:	2b08      	cmp	r3, #8
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
    4366:	b2d2      	uxtb	r2, r2

static uint8_t reverse8(uint8_t data)
{
	uint8_t reversed = 0;

	for(size_t i=0; i<8; i++)
    4368:	d1f3      	bne.n	4352 <reverse8+0x6>
	{
		reversed |= ((data >> i) & 0x01) << (7-i);
	}

	return reversed;
}
    436a:	4610      	mov	r0, r2
    436c:	bd10      	pop	{r4, pc}
    436e:	0000      	movs	r0, r0

00004370 <cc2400_rx>:
	target.syncword = 0;
}

/* start un-buffered rx */
static void cc2400_rx()
{
    4370:	b538      	push	{r3, r4, r5, lr}
	u16 mdmctrl = 0;

	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
    4372:	4b25      	ldr	r3, [pc, #148]	; (4408 <cc2400_rx+0x98>)
    4374:	4c25      	ldr	r4, [pc, #148]	; (440c <cc2400_rx+0x9c>)
    4376:	781a      	ldrb	r2, [r3, #0]
    4378:	b112      	cbz	r2, 4380 <cc2400_rx+0x10>
    437a:	781a      	ldrb	r2, [r3, #0]
    437c:	2a01      	cmp	r2, #1
    437e:	d127      	bne.n	43d0 <cc2400_rx+0x60>
		if (modulation == MOD_BT_BASIC_RATE) {
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	b133      	cbz	r3, 4392 <cc2400_rx+0x22>
			mdmctrl = 0x0029; // 160 kHz frequency deviation
		} else if (modulation == MOD_BT_LOW_ENERGY) {
    4384:	4b20      	ldr	r3, [pc, #128]	; (4408 <cc2400_rx+0x98>)
    4386:	781b      	ldrb	r3, [r3, #0]
			mdmctrl = 0x0040; // 250 kHz frequency deviation
    4388:	2b01      	cmp	r3, #1
    438a:	bf14      	ite	ne
    438c:	2500      	movne	r5, #0
    438e:	2540      	moveq	r5, #64	; 0x40
    4390:	e000      	b.n	4394 <cc2400_rx+0x24>
{
	u16 mdmctrl = 0;

	if((modulation == MOD_BT_BASIC_RATE) || (modulation == MOD_BT_LOW_ENERGY)) {
		if (modulation == MOD_BT_BASIC_RATE) {
			mdmctrl = 0x0029; // 160 kHz frequency deviation
    4392:	2529      	movs	r5, #41	; 0x29
		} else if (modulation == MOD_BT_LOW_ENERGY) {
			mdmctrl = 0x0040; // 250 kHz frequency deviation
		}
		cc2400_set(MANAND,  0x7fff);
    4394:	200d      	movs	r0, #13
    4396:	f647 71ff 	movw	r1, #32767	; 0x7fff
    439a:	f004 ff90 	bl	92be <cc2400_set>
		cc2400_set(LMTST,   0x2b22);
    439e:	2012      	movs	r0, #18
    43a0:	f642 3122 	movw	r1, #11042	; 0x2b22
    43a4:	f004 ff8b 	bl	92be <cc2400_set>
		cc2400_set(MDMTST0, 0x134b); // without PRNG
    43a8:	2014      	movs	r0, #20
    43aa:	f241 314b 	movw	r1, #4939	; 0x134b
    43ae:	f004 ff86 	bl	92be <cc2400_set>
		cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    43b2:	2020      	movs	r0, #32
    43b4:	f240 1101 	movw	r1, #257	; 0x101
    43b8:	f004 ff81 	bl	92be <cc2400_set>
		//      |  | |   |  +--------> CRC off
		//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
		//      |  | +---------------> 2 preamble bytes of 01010101
		//      |  +-----------------> not packet mode
			//      +--------------------> un-buffered mode
		cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    43bc:	8821      	ldrh	r1, [r4, #0]
    43be:	2002      	movs	r0, #2
    43c0:	3901      	subs	r1, #1
    43c2:	b289      	uxth	r1, r1
    43c4:	f004 ff7b 	bl	92be <cc2400_set>
		cc2400_set(MDMCTRL, mdmctrl);
    43c8:	2003      	movs	r0, #3
    43ca:	4629      	mov	r1, r5
    43cc:	f004 ff77 	bl	92be <cc2400_set>
	}

	// Set up CS register
	cs_threshold_calc_and_set(channel);
    43d0:	8820      	ldrh	r0, [r4, #0]
    43d2:	b280      	uxth	r0, r0
    43d4:	f002 fefc 	bl	71d0 <cs_threshold_calc_and_set>

	clkn_start();
    43d8:	f002 ff96 	bl	7308 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    43dc:	f005 f810 	bl	9400 <cc2400_status>
    43e0:	0642      	lsls	r2, r0, #25
    43e2:	d5fb      	bpl.n	43dc <cc2400_rx+0x6c>
	cc2400_strobe(SFSON);
    43e4:	2061      	movs	r0, #97	; 0x61
    43e6:	f005 f812 	bl	940e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    43ea:	f005 f809 	bl	9400 <cc2400_status>
    43ee:	0743      	lsls	r3, r0, #29
    43f0:	d5fb      	bpl.n	43ea <cc2400_rx+0x7a>
	cc2400_strobe(SRX);
    43f2:	2062      	movs	r0, #98	; 0x62
    43f4:	f005 f80b 	bl	940e <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    43f8:	4b05      	ldr	r3, [pc, #20]	; (4410 <cc2400_rx+0xa0>)
    43fa:	2280      	movs	r2, #128	; 0x80
    43fc:	601a      	str	r2, [r3, #0]
	HGM_SET;
    43fe:	f44f 7280 	mov.w	r2, #256	; 0x100
    4402:	601a      	str	r2, [r3, #0]
    4404:	bd38      	pop	{r3, r4, r5, pc}
    4406:	bf00      	nop
    4408:	10000a24 	.word	0x10000a24
    440c:	10000448 	.word	0x10000448
    4410:	2009c058 	.word	0x2009c058

00004414 <cc2400_rx_sync>:
#endif
}

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    4414:	b570      	push	{r4, r5, r6, lr}
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    4416:	4b27      	ldr	r3, [pc, #156]	; (44b4 <cc2400_rx_sync+0xa0>)
#endif
}

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    4418:	4604      	mov	r4, r0
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    441a:	781a      	ldrb	r2, [r3, #0]
    441c:	b132      	cbz	r2, 442c <cc2400_rx_sync+0x18>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    441e:	781b      	ldrb	r3, [r3, #0]
    4420:	2b01      	cmp	r3, #1
    4422:	d146      	bne.n	44b2 <cc2400_rx_sync+0x9e>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    4424:	2540      	movs	r5, #64	; 0x40
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    4426:	f240 5661 	movw	r6, #1377	; 0x561
    442a:	e002      	b.n	4432 <cc2400_rx_sync+0x1e>
{
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    442c:	f240 4661 	movw	r6, #1121	; 0x461
static void cc2400_rx_sync(u32 sync)
{
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    4430:	2529      	movs	r5, #41	; 0x29
	} else {
		/* oops */
		return;
	}

	cc2400_set(MANAND,  0x7fff);
    4432:	200d      	movs	r0, #13
    4434:	f647 71ff 	movw	r1, #32767	; 0x7fff
    4438:	f004 ff41 	bl	92be <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    443c:	2012      	movs	r0, #18
    443e:	f642 3122 	movw	r1, #11042	; 0x2b22
    4442:	f004 ff3c 	bl	92be <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    4446:	2014      	movs	r0, #20
    4448:	f241 214b 	movw	r1, #4683	; 0x124b
    444c:	f004 ff37 	bl	92be <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    4450:	2020      	movs	r0, #32
    4452:	4631      	mov	r1, r6
    4454:	f004 ff33 	bl	92be <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    4458:	b2a1      	uxth	r1, r4
    445a:	202c      	movs	r0, #44	; 0x2c
    445c:	f004 ff2f 	bl	92be <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    4460:	0c21      	lsrs	r1, r4, #16

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    4462:	4c15      	ldr	r4, [pc, #84]	; (44b8 <cc2400_rx_sync+0xa4>)
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);

	cc2400_set(SYNCL,   sync & 0xffff);
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    4464:	202d      	movs	r0, #45	; 0x2d
    4466:	f004 ff2a 	bl	92be <cc2400_set>

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    446a:	8821      	ldrh	r1, [r4, #0]
    446c:	2002      	movs	r0, #2
    446e:	3901      	subs	r1, #1
    4470:	b289      	uxth	r1, r1
    4472:	f004 ff24 	bl	92be <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    4476:	2003      	movs	r0, #3
    4478:	4629      	mov	r1, r5
    447a:	f004 ff20 	bl	92be <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set(channel);
    447e:	8820      	ldrh	r0, [r4, #0]
    4480:	b280      	uxth	r0, r0
    4482:	f002 fea5 	bl	71d0 <cs_threshold_calc_and_set>

	clkn_start();
    4486:	f002 ff3f 	bl	7308 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    448a:	f004 ffb9 	bl	9400 <cc2400_status>
    448e:	0642      	lsls	r2, r0, #25
    4490:	d5fb      	bpl.n	448a <cc2400_rx_sync+0x76>
	cc2400_strobe(SFSON);
    4492:	2061      	movs	r0, #97	; 0x61
    4494:	f004 ffbb 	bl	940e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    4498:	f004 ffb2 	bl	9400 <cc2400_status>
    449c:	0743      	lsls	r3, r0, #29
    449e:	d5fb      	bpl.n	4498 <cc2400_rx_sync+0x84>
	cc2400_strobe(SRX);
    44a0:	2062      	movs	r0, #98	; 0x62
    44a2:	f004 ffb4 	bl	940e <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    44a6:	4b05      	ldr	r3, [pc, #20]	; (44bc <cc2400_rx_sync+0xa8>)
    44a8:	2280      	movs	r2, #128	; 0x80
    44aa:	601a      	str	r2, [r3, #0]
	HGM_SET;
    44ac:	f44f 7280 	mov.w	r2, #256	; 0x100
    44b0:	601a      	str	r2, [r3, #0]
    44b2:	bd70      	pop	{r4, r5, r6, pc}
    44b4:	10000a24 	.word	0x10000a24
    44b8:	10000448 	.word	0x10000448
    44bc:	2009c058 	.word	0x2009c058

000044c0 <enqueue>:

/* Unpacked symbol buffers (two rxbufs) */
char unpacked[DMA_SIZE*8*2];

static int enqueue(uint8_t type, uint8_t* buf)
{
    44c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    44c2:	4607      	mov	r7, r0
    44c4:	460e      	mov	r6, r1
	usb_pkt_rx* f = usb_enqueue();
    44c6:	f002 fda3 	bl	7010 <usb_enqueue>
    44ca:	4d1d      	ldr	r5, [pc, #116]	; (4540 <enqueue+0x80>)

	/* fail if queue is full */
	if (f == NULL) {
    44cc:	4604      	mov	r4, r0
    44ce:	b920      	cbnz	r0, 44da <enqueue+0x1a>
		status |= FIFO_OVERFLOW;
    44d0:	786b      	ldrb	r3, [r5, #1]
    44d2:	f043 0304 	orr.w	r3, r3, #4
    44d6:	706b      	strb	r3, [r5, #1]
		return 0;
    44d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	f->pkt_type = type;
	if(type == SPECAN) {
    44da:	2f04      	cmp	r7, #4
	if (f == NULL) {
		status |= FIFO_OVERFLOW;
		return 0;
	}

	f->pkt_type = type;
    44dc:	7007      	strb	r7, [r0, #0]
	if(type == SPECAN) {
    44de:	d10e      	bne.n	44fe <enqueue+0x3e>
		f->clkn_high = (clkn >> 20) & 0xff;
		f->clk100ns = CLK100NS;
    44e0:	f640 4135 	movw	r1, #3125	; 0xc35
		return 0;
	}

	f->pkt_type = type;
	if(type == SPECAN) {
		f->clkn_high = (clkn >> 20) & 0xff;
    44e4:	4a17      	ldr	r2, [pc, #92]	; (4544 <enqueue+0x84>)
    44e6:	6813      	ldr	r3, [r2, #0]
    44e8:	0d1b      	lsrs	r3, r3, #20
    44ea:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = CLK100NS;
    44ec:	4b16      	ldr	r3, [pc, #88]	; (4548 <enqueue+0x88>)
    44ee:	6812      	ldr	r2, [r2, #0]
    44f0:	681b      	ldr	r3, [r3, #0]
    44f2:	f3c2 0213 	ubfx	r2, r2, #0, #20
    44f6:	fb01 3302 	mla	r3, r1, r2, r3
    44fa:	6043      	str	r3, [r0, #4]
    44fc:	e014      	b.n	4528 <enqueue+0x68>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    44fe:	78ab      	ldrb	r3, [r5, #2]
    4500:	70c3      	strb	r3, [r0, #3]
		f->clk100ns = idle_buf_clk100ns;
    4502:	686b      	ldr	r3, [r5, #4]
    4504:	6043      	str	r3, [r0, #4]
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
    4506:	892b      	ldrh	r3, [r5, #8]
    4508:	3b62      	subs	r3, #98	; 0x62
    450a:	7083      	strb	r3, [r0, #2]
		f->rssi_min = rssi_min;
    450c:	4b0f      	ldr	r3, [pc, #60]	; (454c <enqueue+0x8c>)
    450e:	781b      	ldrb	r3, [r3, #0]
    4510:	7243      	strb	r3, [r0, #9]
		f->rssi_max = rssi_max;
    4512:	4b0f      	ldr	r3, [pc, #60]	; (4550 <enqueue+0x90>)
    4514:	781b      	ldrb	r3, [r3, #0]
    4516:	7203      	strb	r3, [r0, #8]
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    4518:	8928      	ldrh	r0, [r5, #8]
    451a:	b280      	uxth	r0, r0
    451c:	f002 fe44 	bl	71a8 <rssi_get_avg>
		f->rssi_count = rssi_count;
    4520:	4b0c      	ldr	r3, [pc, #48]	; (4554 <enqueue+0x94>)
		f->clkn_high = idle_buf_clkn_high;
		f->clk100ns = idle_buf_clk100ns;
		f->channel = (uint8_t)((idle_buf_channel - 2402) & 0xff);
		f->rssi_min = rssi_min;
		f->rssi_max = rssi_max;
		f->rssi_avg = rssi_get_avg(idle_buf_channel);
    4522:	72a0      	strb	r0, [r4, #10]
		f->rssi_count = rssi_count;
    4524:	781b      	ldrb	r3, [r3, #0]
    4526:	72e3      	strb	r3, [r4, #11]
	}

	memcpy(f->data, buf, DMA_SIZE);
    4528:	f104 000e 	add.w	r0, r4, #14
    452c:	4631      	mov	r1, r6
    452e:	2232      	movs	r2, #50	; 0x32
    4530:	f005 ff6a 	bl	a408 <memcpy>

	f->status = status;
    4534:	786b      	ldrb	r3, [r5, #1]
	status = 0;

	return 1;
    4536:	2001      	movs	r0, #1
		f->rssi_count = rssi_count;
	}

	memcpy(f->data, buf, DMA_SIZE);

	f->status = status;
    4538:	7063      	strb	r3, [r4, #1]
	status = 0;
    453a:	2300      	movs	r3, #0
    453c:	706b      	strb	r3, [r5, #1]

	return 1;
}
    453e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4540:	10000a24 	.word	0x10000a24
    4544:	1000124c 	.word	0x1000124c
    4548:	40004008 	.word	0x40004008
    454c:	10001232 	.word	0x10001232
    4550:	10001230 	.word	0x10001230
    4554:	100016ce 	.word	0x100016ce

00004558 <le_set_access_address>:
	// reset GIO
	cc2400_set(IOCFG, gio_save);
}

/* set LE access address */
static void le_set_access_address(u32 aa) {
    4558:	b510      	push	{r4, lr}
	u32 aa_rev;

	le.access_address = aa;
    455a:	4c04      	ldr	r4, [pc, #16]	; (456c <le_set_access_address+0x14>)
    455c:	6060      	str	r0, [r4, #4]
	aa_rev = rbit(aa);
    455e:	f004 fdbb 	bl	90d8 <rbit>
	le.syncl = aa_rev & 0xffff;
    4562:	8160      	strh	r0, [r4, #10]
	le.synch = aa_rev >> 16;
    4564:	0c00      	lsrs	r0, r0, #16
    4566:	8120      	strh	r0, [r4, #8]
    4568:	bd10      	pop	{r4, pc}
    456a:	bf00      	nop
    456c:	10000448 	.word	0x10000448

00004570 <cc2400_idle>:
		}
	}
}

static void cc2400_idle()
{
    4570:	b510      	push	{r4, lr}
	cc2400_strobe(SRFOFF);
    4572:	2064      	movs	r0, #100	; 0x64
    4574:	f004 ff4b 	bl	940e <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    4578:	f004 ff42 	bl	9400 <cc2400_status>
    457c:	f000 0004 	and.w	r0, r0, #4
    4580:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    4584:	2800      	cmp	r0, #0
    4586:	d1f7      	bne.n	4578 <cc2400_idle+0x8>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    4588:	4b21      	ldr	r3, [pc, #132]	; (4610 <cc2400_idle+0xa0>)
    458a:	2280      	movs	r2, #128	; 0x80
    458c:	601a      	str	r2, [r3, #0]
	HGM_CLR;
#endif

	RXLED_CLR;
    458e:	2110      	movs	r1, #16
	cc2400_strobe(SRFOFF);
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
	HGM_CLR;
    4590:	f44f 7280 	mov.w	r2, #256	; 0x100
    4594:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    4596:	f843 1c20 	str.w	r1, [r3, #-32]
	TXLED_CLR;
    459a:	f843 2c20 	str.w	r2, [r3, #-32]
	USRLED_CLR;
    459e:	2202      	movs	r2, #2
    45a0:	f843 2c20 	str.w	r2, [r3, #-32]

	clkn_stop();
    45a4:	f002 fe88 	bl	72b8 <clkn_stop>
	dio_ssp_stop();
    45a8:	f002 ff9e 	bl	74e8 <dio_ssp_stop>
	cs_reset();
    45ac:	f002 fe72 	bl	7294 <cs_reset>
	rssi_reset();
    45b0:	f002 fd96 	bl	70e0 <rssi_reset>

	/* hopping stuff */
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
    45b4:	f640 1189 	movw	r1, #2441	; 0x989
	dio_ssp_stop();
	cs_reset();
	rssi_reset();

	/* hopping stuff */
	hop_mode = HOP_NONE;
    45b8:	4b16      	ldr	r3, [pc, #88]	; (4614 <cc2400_idle+0xa4>)
	do_hop = 0;
	channel = 2441;
    45ba:	4a17      	ldr	r2, [pc, #92]	; (4618 <cc2400_idle+0xa8>)
	dio_ssp_stop();
	cs_reset();
	rssi_reset();

	/* hopping stuff */
	hop_mode = HOP_NONE;
    45bc:	729c      	strb	r4, [r3, #10]
	do_hop = 0;
    45be:	72dc      	strb	r4, [r3, #11]
	channel = 2441;
    45c0:	8011      	strh	r1, [r2, #0]
	hop_direct_channel = 0;
	hop_timeout = 158;
    45c2:	219e      	movs	r1, #158	; 0x9e

	/* hopping stuff */
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
	hop_direct_channel = 0;
    45c4:	819c      	strh	r4, [r3, #12]
	hop_timeout = 158;
    45c6:	f8a2 1050 	strh.w	r1, [r2, #80]	; 0x50
	requested_channel = 0;
	le_adv_channel = 2402;
    45ca:	f640 1162 	movw	r1, #2402	; 0x962
	hop_mode = HOP_NONE;
	do_hop = 0;
	channel = 2441;
	hop_direct_channel = 0;
	hop_timeout = 158;
	requested_channel = 0;
    45ce:	81dc      	strh	r4, [r3, #14]
	le_adv_channel = 2402;
    45d0:	f8a2 1052 	strh.w	r1, [r2, #82]	; 0x52


	/* bulk USB stuff */
	idle_buf_clkn_high = 0;
    45d4:	709c      	strb	r4, [r3, #2]
	idle_buf_clk100ns = 0;
    45d6:	605c      	str	r4, [r3, #4]
	idle_buf_channel = 0;
    45d8:	811c      	strh	r4, [r3, #8]
	dma_discard = 0;
    45da:	741c      	strb	r4, [r3, #16]
	status = 0;
    45dc:	705c      	strb	r4, [r3, #1]

	/* operation mode */
	mode = MODE_IDLE;
    45de:	745c      	strb	r4, [r3, #17]
	requested_mode = MODE_IDLE;
    45e0:	749c      	strb	r4, [r3, #18]
	jam_mode = JAM_NONE;
    45e2:	74dc      	strb	r4, [r3, #19]
	ego_mode = EGO_FOLLOW;
    45e4:	751c      	strb	r4, [r3, #20]

	modulation = MOD_BT_BASIC_RATE;
    45e6:	701c      	strb	r4, [r3, #0]

	/* specan stuff */
	low_freq = 2400;
    45e8:	f44f 6316 	mov.w	r3, #2400	; 0x960
    45ec:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
	high_freq = 2483;
    45f0:	f640 13b3 	movw	r3, #2483	; 0x9b3
    45f4:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
	rssi_threshold = -30;
    45f8:	23e2      	movs	r3, #226	; 0xe2
    45fa:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58

	target.address = 0;
    45fe:	4b07      	ldr	r3, [pc, #28]	; (461c <cc2400_idle+0xac>)
    4600:	2000      	movs	r0, #0
    4602:	2100      	movs	r1, #0
    4604:	e9c3 0100 	strd	r0, r1, [r3]
	target.syncword = 0;
    4608:	e9c3 0102 	strd	r0, r1, [r3, #8]
    460c:	bd10      	pop	{r4, pc}
    460e:	bf00      	nop
    4610:	2009c05c 	.word	0x2009c05c
    4614:	10000a24 	.word	0x10000a24
    4618:	10000448 	.word	0x10000448
    461c:	10001748 	.word	0x10001748

00004620 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    4620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel)];
    4624:	4d39      	ldr	r5, [pc, #228]	; (470c <cb_follow_le+0xec>)
    4626:	4f3a      	ldr	r7, [pc, #232]	; (4710 <cb_follow_le+0xf0>)
    4628:	8828      	ldrh	r0, [r5, #0]
    462a:	b280      	uxth	r0, r0
    462c:	f002 fb70 	bl	6d10 <btle_channel_index>

	u32 access_address = 0;
    4630:	2200      	movs	r2, #0
	for (i = 0; i < 31; ++i) {
    4632:	4613      	mov	r3, r2

/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel)];
    4634:	5c39      	ldrb	r1, [r7, r0]

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4636:	4e37      	ldr	r6, [pc, #220]	; (4714 <cb_follow_le+0xf4>)
    4638:	5d98      	ldrb	r0, [r3, r6]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    463a:	3301      	adds	r3, #1
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    463c:	07c0      	lsls	r0, r0, #31
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    463e:	2b1f      	cmp	r3, #31
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4640:	ea40 0252 	orr.w	r2, r0, r2, lsr #1
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    4644:	d1f7      	bne.n	4636 <cb_follow_le+0x16>
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
    4646:	686c      	ldr	r4, [r5, #4]
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
    4648:	5cf0      	ldrb	r0, [r6, r3]
    464a:	07c0      	lsls	r0, r0, #31
    464c:	ea40 0252 	orr.w	r2, r0, r2, lsr #1
		if (access_address == le.access_address) {
    4650:	42a2      	cmp	r2, r4
    4652:	d153      	bne.n	46fc <cb_follow_le+0xdc>
    4654:	2000      	movs	r0, #0
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    4656:	f04f 0800 	mov.w	r8, #0
    465a:	46c6      	mov	lr, r8
    465c:	eb03 0cc0 	add.w	ip, r3, r0, lsl #3
    4660:	eb0e 020c 	add.w	r2, lr, ip
    4664:	4432      	add	r2, r6
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
    4666:	2803      	cmp	r0, #3
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
    4668:	f812 2c1f 	ldrb.w	r2, [r2, #-31]
					if (j >= 4) { // unwhiten data bytes
    466c:	dd0a      	ble.n	4684 <cb_follow_le+0x64>
						bit ^= whitening[idx];
    466e:	187c      	adds	r4, r7, r1
    4670:	f894 4028 	ldrb.w	r4, [r4, #40]	; 0x28
						idx = (idx + 1) % sizeof(whitening);
    4674:	3101      	adds	r1, #1
				for (k = 0; k < 8; k++) {
					int offset = k + (j * 8) + i - 31;
					if (offset >= DMA_SIZE*8*2) break;
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
    4676:	4062      	eors	r2, r4
						idx = (idx + 1) % sizeof(whitening);
    4678:	247f      	movs	r4, #127	; 0x7f
    467a:	fbb1 f4f4 	udiv	r4, r1, r4
    467e:	ebc4 14c4 	rsb	r4, r4, r4, lsl #7
    4682:	1b09      	subs	r1, r1, r4
					}
					byte |= bit << k;
    4684:	fa02 f20e 	lsl.w	r2, r2, lr
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    4688:	f10e 0e01 	add.w	lr, lr, #1
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
    468c:	ea42 0208 	orr.w	r2, r2, r8
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    4690:	f1be 0f08 	cmp.w	lr, #8
					int bit = unpacked[offset];
					if (j >= 4) { // unwhiten data bytes
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
    4694:	fa5f f882 	uxtb.w	r8, r2
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    4698:	d1e2      	bne.n	4660 <cb_follow_le+0x40>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    469a:	4c1f      	ldr	r4, [pc, #124]	; (4718 <cb_follow_le+0xf8>)
    469c:	6822      	ldr	r2, [r4, #0]
    469e:	f802 8000 	strb.w	r8, [r2, r0]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    46a2:	3001      	adds	r0, #1
    46a4:	282e      	cmp	r0, #46	; 0x2e
    46a6:	d1d6      	bne.n	4656 <cb_follow_le+0x36>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    46a8:	696b      	ldr	r3, [r5, #20]
    46aa:	b95b      	cbnz	r3, 46c4 <cb_follow_le+0xa4>
				if (calc_crc != wire_crc) // skip packets with a bad CRC
					break;
			}

			// send to PC
			enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    46ac:	6821      	ldr	r1, [r4, #0]
    46ae:	2001      	movs	r0, #1
    46b0:	f7ff ff06 	bl	44c0 <enqueue>
			RXLED_SET;
    46b4:	4b19      	ldr	r3, [pc, #100]	; (471c <cb_follow_le+0xfc>)
    46b6:	2210      	movs	r2, #16
    46b8:	601a      	str	r2, [r3, #0]

			packet_cb((uint8_t*)idle_rxbuf);
    46ba:	4b19      	ldr	r3, [pc, #100]	; (4720 <cb_follow_le+0x100>)
    46bc:	6820      	ldr	r0, [r4, #0]
    46be:	699b      	ldr	r3, [r3, #24]
    46c0:	4798      	blx	r3

			break;
    46c2:	e01f      	b.n	4704 <cb_follow_le+0xe4>
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    46c4:	6823      	ldr	r3, [r4, #0]
    46c6:	795d      	ldrb	r5, [r3, #5]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    46c8:	4b10      	ldr	r3, [pc, #64]	; (470c <cb_follow_le+0xec>)
    46ca:	6821      	ldr	r1, [r4, #0]
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    46cc:	f005 053f 	and.w	r5, r5, #63	; 0x3f
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    46d0:	1caa      	adds	r2, r5, #2
    46d2:	6918      	ldr	r0, [r3, #16]
    46d4:	3104      	adds	r1, #4
    46d6:	f002 fba1 	bl	6e1c <btle_crcgen_lut>
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    46da:	6822      	ldr	r2, [r4, #0]
    46dc:	f105 0308 	add.w	r3, r5, #8
    46e0:	5cd3      	ldrb	r3, [r2, r3]
							 | (idle_rxbuf[4+len+1] << 8)
    46e2:	6821      	ldr	r1, [r4, #0]
    46e4:	1dea      	adds	r2, r5, #7
    46e6:	5c8a      	ldrb	r2, [r1, r2]
							 |  idle_rxbuf[4+len+0];
    46e8:	6821      	ldr	r1, [r4, #0]
    46ea:	3506      	adds	r5, #6
    46ec:	5d49      	ldrb	r1, [r1, r5]
			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
							 | (idle_rxbuf[4+len+1] << 8)
    46ee:	0212      	lsls	r2, r2, #8
    46f0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
							 |  idle_rxbuf[4+len+0];
    46f4:	430b      	orrs	r3, r1
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    46f6:	4298      	cmp	r0, r3
    46f8:	d104      	bne.n	4704 <cb_follow_le+0xe4>
    46fa:	e7d7      	b.n	46ac <cb_follow_le+0x8c>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    46fc:	3301      	adds	r3, #1
    46fe:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    4702:	d1a1      	bne.n	4648 <cb_follow_le+0x28>
			break;
		}
	}

	return 1;
}
    4704:	2001      	movs	r0, #1
    4706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    470a:	bf00      	nop
    470c:	10000448 	.word	0x10000448
    4710:	0000a558 	.word	0x0000a558
    4714:	100013ac 	.word	0x100013ac
    4718:	100013a8 	.word	0x100013a8
    471c:	2009c038 	.word	0x2009c038
    4720:	10000a24 	.word	0x10000a24

00004724 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    4724:	b570      	push	{r4, r5, r6, lr}
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    4726:	4b59      	ldr	r3, [pc, #356]	; (488c <connection_follow_cb+0x168>)
}

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    4728:	4605      	mov	r5, r0
	u8 header = packet[HEADER_IDX];
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    472a:	7e19      	ldrb	r1, [r3, #24]
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	// u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
	u8 header = packet[HEADER_IDX];
    472c:	7902      	ldrb	r2, [r0, #4]
	u8 *data_len = &packet[DATA_LEN_IDX];
	u8 *data = &packet[DATA_START_IDX];
	// u8 *crc = &packet[DATA_START_IDX + *data_len];

	if (le.link_state == LINK_CONN_PENDING) {
    472e:	2902      	cmp	r1, #2
    4730:	461c      	mov	r4, r3
    4732:	d113      	bne.n	475c <connection_follow_cb+0x38>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    4734:	2203      	movs	r2, #3
    4736:	761a      	strb	r2, [r3, #24]
		le.conn_epoch = clkn;
    4738:	4a55      	ldr	r2, [pc, #340]	; (4890 <connection_follow_cb+0x16c>)
    473a:	6812      	ldr	r2, [r2, #0]
    473c:	61da      	str	r2, [r3, #28]
		le.interval_timer = le.conn_interval - 1;
    473e:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
    4740:	3a01      	subs	r2, #1
    4742:	b292      	uxth	r2, r2
    4744:	841a      	strh	r2, [r3, #32]
		le.conn_count = 0;
    4746:	2200      	movs	r2, #0
    4748:	849a      	strh	r2, [r3, #36]	; 0x24
		le.update_pending = 0;
    474a:	62da      	str	r2, [r3, #44]	; 0x2c

		// hue hue hue
		if (jam_mode != JAM_NONE)
    474c:	4b51      	ldr	r3, [pc, #324]	; (4894 <connection_follow_cb+0x170>)
    474e:	7cda      	ldrb	r2, [r3, #19]
    4750:	2a00      	cmp	r2, #0
    4752:	f000 8099 	beq.w	4888 <connection_follow_cb+0x164>
			le_jam_count = JAM_COUNT_DEFAULT;
    4756:	2228      	movs	r2, #40	; 0x28
    4758:	61da      	str	r2, [r3, #28]
    475a:	bd70      	pop	{r4, r5, r6, pc}

	} else if (le.link_state == LINK_CONNECTED) {
    475c:	2903      	cmp	r1, #3
    475e:	d13b      	bne.n	47d8 <connection_follow_cb+0xb4>
		u8 llid =  header & 0x03;

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    4760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		// hue hue hue
		if (jam_mode != JAM_NONE)
			le_jam_count = JAM_COUNT_DEFAULT;

	} else if (le.link_state == LINK_CONNECTED) {
		u8 llid =  header & 0x03;
    4762:	f002 0203 	and.w	r2, r2, #3

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    4766:	b1a3      	cbz	r3, 4792 <connection_follow_cb+0x6e>
    4768:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    476a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    476c:	b29b      	uxth	r3, r3
    476e:	4299      	cmp	r1, r3
    4770:	d10f      	bne.n	4792 <connection_follow_cb+0x6e>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    4772:	4b47      	ldr	r3, [pc, #284]	; (4890 <connection_follow_cb+0x16c>)
    4774:	681b      	ldr	r3, [r3, #0]
    4776:	61e3      	str	r3, [r4, #28]
			le.conn_interval = le.interval_update;
    4778:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    477a:	8463      	strh	r3, [r4, #34]	; 0x22
			le.interval_timer = le.interval_update - 1;
    477c:	3b01      	subs	r3, #1
    477e:	b29b      	uxth	r3, r3
    4780:	8423      	strh	r3, [r4, #32]
			le.win_size = le.win_size_update;
    4782:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    4786:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
			le.win_offset = le.win_offset_update;
    478a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    478c:	8523      	strh	r3, [r4, #40]	; 0x28
			le.update_pending = 0;
    478e:	2300      	movs	r3, #0
    4790:	62e3      	str	r3, [r4, #44]	; 0x2c
		}

		if (llid == 0x03 && data[0] == 0x00) {
    4792:	2a03      	cmp	r2, #3
    4794:	d178      	bne.n	4888 <connection_follow_cb+0x164>
    4796:	79ab      	ldrb	r3, [r5, #6]
    4798:	2b00      	cmp	r3, #0
    479a:	d175      	bne.n	4888 <connection_follow_cb+0x164>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    479c:	79eb      	ldrb	r3, [r5, #7]
    479e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    47a2:	7a6a      	ldrb	r2, [r5, #9]
    47a4:	7a2b      	ldrb	r3, [r5, #8]
    47a6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    47aa:	86e3      	strh	r3, [r4, #54]	; 0x36
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    47ac:	7aea      	ldrb	r2, [r5, #11]
    47ae:	7aab      	ldrb	r3, [r5, #10]
    47b0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    47b4:	8663      	strh	r3, [r4, #50]	; 0x32
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    47b6:	7c6a      	ldrb	r2, [r5, #17]
    47b8:	7c2b      	ldrb	r3, [r5, #16]
    47ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			if (le.update_instant - le.conn_count < 32767)
    47be:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    47c0:	b29b      	uxth	r3, r3
			if (le.update_instant - le.conn_count < 32767)
    47c2:	b292      	uxth	r2, r2
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    47c4:	8623      	strh	r3, [r4, #48]	; 0x30
			if (le.update_instant - le.conn_count < 32767)
    47c6:	1a9b      	subs	r3, r3, r2
    47c8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    47cc:	4293      	cmp	r3, r2
    47ce:	dc5b      	bgt.n	4888 <connection_follow_cb+0x164>
				le.update_pending = 1;
    47d0:	4b2e      	ldr	r3, [pc, #184]	; (488c <connection_follow_cb+0x168>)
    47d2:	2201      	movs	r2, #1
    47d4:	62da      	str	r2, [r3, #44]	; 0x2c
    47d6:	bd70      	pop	{r4, r5, r6, pc}
		}

	} else if (le.link_state == LINK_LISTENING) {
    47d8:	2901      	cmp	r1, #1
    47da:	d155      	bne.n	4888 <connection_follow_cb+0x164>
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
    47dc:	f002 020f 	and.w	r2, r2, #15
    47e0:	2a05      	cmp	r2, #5
    47e2:	d151      	bne.n	4888 <connection_follow_cb+0x164>
			uint16_t conn_interval;

			// ignore packets with incorrect length
			if (*data_len != 34)
    47e4:	7943      	ldrb	r3, [r0, #5]
    47e6:	2b22      	cmp	r3, #34	; 0x22
    47e8:	d14e      	bne.n	4888 <connection_follow_cb+0x164>
				return;

			// conn interval must be [7.5 ms, 4.0s] in units of 1.25 ms
			conn_interval = (packet[29] << 8) | packet[28];
    47ea:	7f42      	ldrb	r2, [r0, #29]
    47ec:	7f03      	ldrb	r3, [r0, #28]
    47ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (conn_interval < 6 || conn_interval > 3200)
    47f2:	f640 427a 	movw	r2, #3194	; 0xc7a
    47f6:	3b06      	subs	r3, #6
    47f8:	b29b      	uxth	r3, r3
    47fa:	4293      	cmp	r3, r2
    47fc:	d844      	bhi.n	4888 <connection_follow_cb+0x164>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    47fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    4800:	b93b      	cbnz	r3, 4812 <connection_follow_cb+0xee>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    4802:	2302      	movs	r3, #2
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    4804:	2000      	movs	r0, #0
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
			}

			le.link_state = LINK_CONN_PENDING;
    4806:	7623      	strb	r3, [r4, #24]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    4808:	6160      	str	r0, [r4, #20]
    480a:	f105 0111 	add.w	r1, r5, #17

			for (i = 0; i < 4; ++i)
    480e:	4603      	mov	r3, r0
    4810:	e011      	b.n	4836 <connection_follow_cb+0x112>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    4812:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    4816:	1da9      	adds	r1, r5, #6
    4818:	2206      	movs	r2, #6
    481a:	f005 fdc3 	bl	a3a4 <memcmp>
			if (conn_interval < 6 || conn_interval > 3200)
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    481e:	2800      	cmp	r0, #0
    4820:	d0ef      	beq.n	4802 <connection_follow_cb+0xde>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    4822:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    4826:	f105 010c 	add.w	r1, r5, #12
    482a:	2206      	movs	r2, #6
    482c:	f005 fdba 	bl	a3a4 <memcmp>
				return;

			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    4830:	2800      	cmp	r0, #0
    4832:	d0e6      	beq.n	4802 <connection_follow_cb+0xde>
    4834:	bd70      	pop	{r4, r5, r6, pc}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
    4836:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    483a:	00de      	lsls	r6, r3, #3
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    483c:	3301      	adds	r3, #1
				aa |= packet[18+i] << (i*8);
    483e:	40b2      	lsls	r2, r6
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    4840:	2b04      	cmp	r3, #4
				aa |= packet[18+i] << (i*8);
    4842:	ea40 0002 	orr.w	r0, r0, r2
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    4846:	d1f6      	bne.n	4836 <connection_follow_cb+0x112>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    4848:	f7ff fe86 	bl	4558 <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
    484c:	7deb      	ldrb	r3, [r5, #23]
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    484e:	7e28      	ldrb	r0, [r5, #24]
						| (packet[CRC_INIT+1] << 8)
    4850:	021b      	lsls	r3, r3, #8
    4852:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
						|  packet[CRC_INIT+0];
    4856:	7da8      	ldrb	r0, [r5, #22]
    4858:	4318      	orrs	r0, r3
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    485a:	60e0      	str	r0, [r4, #12]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    485c:	f004 fc3c 	bl	90d8 <rbit>

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    4860:	7e6b      	ldrb	r3, [r5, #25]

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    4862:	6120      	str	r0, [r4, #16]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    4864:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    4868:	7eab      	ldrb	r3, [r5, #26]
    486a:	8523      	strh	r3, [r4, #40]	; 0x28

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
    486c:	7f6a      	ldrb	r2, [r5, #29]
    486e:	7f2b      	ldrb	r3, [r5, #28]
    4870:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4874:	8463      	strh	r3, [r4, #34]	; 0x22
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    4876:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
			le.channel_idx = le.channel_increment;

			// Hop to the initial channel immediately
			do_hop = 1;
    487a:	2201      	movs	r2, #1
#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = (packet[CONN_INTERVAL+1] << 8)
							 |  packet[CONN_INTERVAL+0];

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    487c:	f003 031f 	and.w	r3, r3, #31
    4880:	76a3      	strb	r3, [r4, #26]
			le.channel_idx = le.channel_increment;
    4882:	7663      	strb	r3, [r4, #25]

			// Hop to the initial channel immediately
			do_hop = 1;
    4884:	4b03      	ldr	r3, [pc, #12]	; (4894 <connection_follow_cb+0x170>)
    4886:	72da      	strb	r2, [r3, #11]
    4888:	bd70      	pop	{r4, r5, r6, pc}
    488a:	bf00      	nop
    488c:	10000448 	.word	0x10000448
    4890:	1000124c 	.word	0x1000124c
    4894:	10000a24 	.word	0x10000a24

00004898 <vendor_request_handler>:

	return 1;
}

static int vendor_request_handler(uint8_t request, uint16_t* request_params, uint8_t* data, int* data_len)
{
    4898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    489a:	460e      	mov	r6, r1
    489c:	4615      	mov	r5, r2
    489e:	461c      	mov	r4, r3
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    48a0:	2846      	cmp	r0, #70	; 0x46
    48a2:	f200 834e 	bhi.w	4f42 <vendor_request_handler+0x6aa>
    48a6:	e8df f010 	tbh	[pc, r0, lsl #1]
    48aa:	00ff      	.short	0x00ff
    48ac:	004c0047 	.word	0x004c0047
    48b0:	00550050 	.word	0x00550050
    48b4:	005d0058 	.word	0x005d0058
    48b8:	00620060 	.word	0x00620060
    48bc:	006b0066 	.word	0x006b0066
    48c0:	00c700c0 	.word	0x00c700c0
    48c4:	00790104 	.word	0x00790104
    48c8:	007e0074 	.word	0x007e0074
    48cc:	00860083 	.word	0x00860083
    48d0:	0093008b 	.word	0x0093008b
    48d4:	00ba00b8 	.word	0x00ba00b8
    48d8:	00fd00bc 	.word	0x00fd00bc
    48dc:	034c0101 	.word	0x034c0101
    48e0:	00970106 	.word	0x00970106
    48e4:	00a8009e 	.word	0x00a8009e
    48e8:	00aa00a6 	.word	0x00aa00a6
    48ec:	0122012f 	.word	0x0122012f
    48f0:	014f014c 	.word	0x014f014c
    48f4:	01570153 	.word	0x01570153
    48f8:	01d7019f 	.word	0x01d7019f
    48fc:	023a01fa 	.word	0x023a01fa
    4900:	02530249 	.word	0x02530249
    4904:	0260034a 	.word	0x0260034a
    4908:	026b0265 	.word	0x026b0265
    490c:	02800272 	.word	0x02800272
    4910:	01f001e4 	.word	0x01f001e4
    4914:	02c9028e 	.word	0x02c9028e
    4918:	02d3013e 	.word	0x02d3013e
    491c:	0296034c 	.word	0x0296034c
    4920:	03450341 	.word	0x03450341
    4924:	01d301c1 	.word	0x01d301c1
    4928:	034c0206 	.word	0x034c0206
    492c:	02ae029b 	.word	0x02ae029b
    4930:	02be0120 	.word	0x02be0120
    4934:	033d020d 	.word	0x033d020d
	case UBERTOOTH_PING:
		*data_len = 0;
		break;

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    4938:	4b9c      	ldr	r3, [pc, #624]	; (4bac <vendor_request_handler+0x314>)
    493a:	2001      	movs	r0, #1
    493c:	7498      	strb	r0, [r3, #18]
		*data_len = 0;
    493e:	2300      	movs	r3, #0
    4940:	e1a1      	b.n	4c86 <vendor_request_handler+0x3ee>
		break;

	case UBERTOOTH_TX_SYMBOLS:
		hop_mode = HOP_BLUETOOTH;
    4942:	4b9a      	ldr	r3, [pc, #616]	; (4bac <vendor_request_handler+0x314>)
    4944:	2202      	movs	r2, #2
    4946:	729a      	strb	r2, [r3, #10]
    4948:	e276      	b.n	4e38 <vendor_request_handler+0x5a0>
		requested_mode = MODE_TX_SYMBOLS;
		*data_len = 0;
		break;

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    494a:	4b99      	ldr	r3, [pc, #612]	; (4bb0 <vendor_request_handler+0x318>)
    494c:	681b      	ldr	r3, [r3, #0]
    494e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    4952:	e0ff      	b.n	4b54 <vendor_request_handler+0x2bc>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    4954:	880a      	ldrh	r2, [r1, #0]
    4956:	2302      	movs	r3, #2
    4958:	e015      	b.n	4986 <vendor_request_handler+0xee>
		else
			USRLED_CLR;
		break;

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    495a:	4b95      	ldr	r3, [pc, #596]	; (4bb0 <vendor_request_handler+0x318>)
    495c:	681b      	ldr	r3, [r3, #0]
    495e:	f3c3 1300 	ubfx	r3, r3, #4, #1
    4962:	e0f7      	b.n	4b54 <vendor_request_handler+0x2bc>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    4964:	880a      	ldrh	r2, [r1, #0]
    4966:	2310      	movs	r3, #16
    4968:	e00d      	b.n	4986 <vendor_request_handler+0xee>
		else
			RXLED_CLR;
		break;

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    496a:	4b91      	ldr	r3, [pc, #580]	; (4bb0 <vendor_request_handler+0x318>)
    496c:	e024      	b.n	49b8 <vendor_request_handler+0x120>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    496e:	880a      	ldrh	r2, [r1, #0]
    4970:	f44f 7380 	mov.w	r3, #256	; 0x100
    4974:	e007      	b.n	4986 <vendor_request_handler+0xee>
		else
			TXLED_CLR;
		break;

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    4976:	4b8e      	ldr	r3, [pc, #568]	; (4bb0 <vendor_request_handler+0x318>)
    4978:	681b      	ldr	r3, [r3, #0]
    497a:	f3c3 2340 	ubfx	r3, r3, #9, #1
    497e:	e0e9      	b.n	4b54 <vendor_request_handler+0x2bc>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    4980:	880a      	ldrh	r2, [r1, #0]
    4982:	f44f 7300 	mov.w	r3, #512	; 0x200
    4986:	b10a      	cbz	r2, 498c <vendor_request_handler+0xf4>
			CC1V8_SET;
    4988:	4a8a      	ldr	r2, [pc, #552]	; (4bb4 <vendor_request_handler+0x31c>)
    498a:	e000      	b.n	498e <vendor_request_handler+0xf6>
		else
			CC1V8_CLR;
    498c:	4a8a      	ldr	r2, [pc, #552]	; (4bb8 <vendor_request_handler+0x320>)
    498e:	6013      	str	r3, [r2, #0]
    4990:	e2d5      	b.n	4f3e <vendor_request_handler+0x6a6>
		break;

	case UBERTOOTH_GET_PARTNUM:
		get_part_num(data, data_len);
    4992:	4610      	mov	r0, r2
    4994:	4621      	mov	r1, r4
    4996:	f004 fe1b 	bl	95d0 <get_part_num>
    499a:	e2d0      	b.n	4f3e <vendor_request_handler+0x6a6>
	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
		break;

	case UBERTOOTH_GET_SERIAL:
		get_device_serial(data, data_len);
    499c:	4610      	mov	r0, r2
    499e:	4621      	mov	r1, r4
    49a0:	f004 fe32 	bl	9608 <get_device_serial>
    49a4:	e2cb      	b.n	4f3e <vendor_request_handler+0x6a6>
		break;

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    49a6:	4b85      	ldr	r3, [pc, #532]	; (4bbc <vendor_request_handler+0x324>)
    49a8:	681b      	ldr	r3, [r3, #0]
    49aa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    49ae:	e0d1      	b.n	4b54 <vendor_request_handler+0x2bc>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    49b0:	880a      	ldrh	r2, [r1, #0]
    49b2:	2380      	movs	r3, #128	; 0x80
    49b4:	e007      	b.n	49c6 <vendor_request_handler+0x12e>
		else
			PAEN_CLR;
		break;

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    49b6:	4b81      	ldr	r3, [pc, #516]	; (4bbc <vendor_request_handler+0x324>)
    49b8:	681b      	ldr	r3, [r3, #0]
    49ba:	f3c3 2300 	ubfx	r3, r3, #8, #1
    49be:	e0c9      	b.n	4b54 <vendor_request_handler+0x2bc>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    49c0:	880a      	ldrh	r2, [r1, #0]
    49c2:	f44f 7380 	mov.w	r3, #256	; 0x100
    49c6:	b10a      	cbz	r2, 49cc <vendor_request_handler+0x134>
			HGM_SET;
    49c8:	4a7d      	ldr	r2, [pc, #500]	; (4bc0 <vendor_request_handler+0x328>)
    49ca:	e7e0      	b.n	498e <vendor_request_handler+0xf6>
		else
			HGM_CLR;
    49cc:	4a7d      	ldr	r2, [pc, #500]	; (4bc4 <vendor_request_handler+0x32c>)
    49ce:	e7de      	b.n	498e <vendor_request_handler+0xf6>
		break;
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    49d0:	2203      	movs	r2, #3
    49d2:	4b76      	ldr	r3, [pc, #472]	; (4bac <vendor_request_handler+0x314>)
    49d4:	749a      	strb	r2, [r3, #18]
    49d6:	e2b2      	b.n	4f3e <vendor_request_handler+0x6a6>
		break;

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    49d8:	2005      	movs	r0, #5
    49da:	f004 fc67 	bl	92ac <cc2400_get>
    49de:	f000 0007 	and.w	r0, r0, #7
    49e2:	7028      	strb	r0, [r5, #0]
    49e4:	e1de      	b.n	4da4 <vendor_request_handler+0x50c>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    49e6:	8809      	ldrh	r1, [r1, #0]
    49e8:	2907      	cmp	r1, #7
    49ea:	f200 82aa 	bhi.w	4f42 <vendor_request_handler+0x6aa>
			cc2400_set(FREND, 8 | request_params[0]);
    49ee:	2005      	movs	r0, #5
    49f0:	f041 0108 	orr.w	r1, r1, #8
    49f4:	e1f1      	b.n	4dda <vendor_request_handler+0x542>
			return 0;
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    49f6:	2205      	movs	r2, #5
    49f8:	e7eb      	b.n	49d2 <vendor_request_handler+0x13a>
		break;

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    49fa:	2206      	movs	r2, #6
    49fc:	e7e9      	b.n	49d2 <vendor_request_handler+0x13a>
		break;
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    49fe:	4b72      	ldr	r3, [pc, #456]	; (4bc8 <vendor_request_handler+0x330>)
    4a00:	781a      	ldrb	r2, [r3, #0]
    4a02:	702a      	strb	r2, [r5, #0]
		data[1] = rr.request_pa;
    4a04:	785a      	ldrb	r2, [r3, #1]
    4a06:	706a      	strb	r2, [r5, #1]
		data[2] = rr.request_num;
    4a08:	789a      	ldrb	r2, [r3, #2]
    4a0a:	70aa      	strb	r2, [r5, #2]
		data[3] = rr.reply_pa;
    4a0c:	78da      	ldrb	r2, [r3, #3]
    4a0e:	70ea      	strb	r2, [r5, #3]
		data[4] = rr.reply_num;
    4a10:	791b      	ldrb	r3, [r3, #4]
    4a12:	712b      	strb	r3, [r5, #4]
		*data_len = 5;
    4a14:	2305      	movs	r3, #5
    4a16:	6023      	str	r3, [r4, #0]
    4a18:	e291      	b.n	4f3e <vendor_request_handler+0x6a6>
		break;

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4a1a:	2200      	movs	r2, #0
    4a1c:	e7d9      	b.n	49d2 <vendor_request_handler+0x13a>
		break;

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4a1e:	4b63      	ldr	r3, [pc, #396]	; (4bac <vendor_request_handler+0x314>)
    4a20:	e097      	b.n	4b52 <vendor_request_handler+0x2ba>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4a22:	780a      	ldrb	r2, [r1, #0]
    4a24:	4b61      	ldr	r3, [pc, #388]	; (4bac <vendor_request_handler+0x314>)
    4a26:	701a      	strb	r2, [r3, #0]
    4a28:	e289      	b.n	4f3e <vendor_request_handler+0x6a6>
		break;

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4a2a:	4b68      	ldr	r3, [pc, #416]	; (4bcc <vendor_request_handler+0x334>)
    4a2c:	881a      	ldrh	r2, [r3, #0]
    4a2e:	702a      	strb	r2, [r5, #0]
		data[1] = (channel >> 8) & 0xFF;
    4a30:	881b      	ldrh	r3, [r3, #0]
    4a32:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4a36:	e19b      	b.n	4d70 <vendor_request_handler+0x4d8>
		*data_len = 2;
		break;

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4a38:	880a      	ldrh	r2, [r1, #0]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4a3a:	f640 21ea 	movw	r1, #2794	; 0xaea
		data[1] = (channel >> 8) & 0xFF;
		*data_len = 2;
		break;

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4a3e:	4b5b      	ldr	r3, [pc, #364]	; (4bac <vendor_request_handler+0x314>)
    4a40:	81da      	strh	r2, [r3, #14]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4a42:	89da      	ldrh	r2, [r3, #14]
    4a44:	b292      	uxth	r2, r2
    4a46:	428a      	cmp	r2, r1
    4a48:	d904      	bls.n	4a54 <vendor_request_handler+0x1bc>
			hop_mode = HOP_SWEEP;
    4a4a:	2201      	movs	r2, #1
    4a4c:	729a      	strb	r2, [r3, #10]
			requested_channel = 2402;
    4a4e:	f640 1262 	movw	r2, #2402	; 0x962
    4a52:	e015      	b.n	4a80 <vendor_request_handler+0x1e8>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4a54:	2200      	movs	r2, #0
    4a56:	729a      	strb	r2, [r3, #10]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4a58:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4a5c:	89d9      	ldrh	r1, [r3, #14]
    4a5e:	b289      	uxth	r1, r1
    4a60:	4291      	cmp	r1, r2
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4a62:	f640 21e9 	movw	r1, #2793	; 0xae9
			requested_channel = 2402;
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4a66:	bf84      	itt	hi
    4a68:	89da      	ldrhhi	r2, [r3, #14]
    4a6a:	b292      	uxthhi	r2, r2
    4a6c:	81da      	strh	r2, [r3, #14]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4a6e:	89da      	ldrh	r2, [r3, #14]
    4a70:	b292      	uxth	r2, r2
    4a72:	428a      	cmp	r2, r1
    4a74:	bf8f      	iteee	hi
    4a76:	f640 22ea 	movwhi	r2, #2794	; 0xaea
    4a7a:	4a4c      	ldrls	r2, [pc, #304]	; (4bac <vendor_request_handler+0x314>)
    4a7c:	89d2      	ldrhls	r2, [r2, #14]
    4a7e:	b292      	uxthls	r2, r2
    4a80:	81da      	strh	r2, [r3, #14]
		}

		le_adv_channel = requested_channel;
    4a82:	89d9      	ldrh	r1, [r3, #14]
    4a84:	4a51      	ldr	r2, [pc, #324]	; (4bcc <vendor_request_handler+0x334>)
    4a86:	b289      	uxth	r1, r1
    4a88:	f8a2 1052 	strh.w	r1, [r2, #82]	; 0x52
		if (mode != MODE_BT_FOLLOW_LE) {
    4a8c:	7c5b      	ldrb	r3, [r3, #17]
			hop_mode = HOP_NONE;
			requested_channel = MAX(requested_channel, MIN_FREQ);
			requested_channel = MIN(requested_channel, MAX_FREQ);
		}

		le_adv_channel = requested_channel;
    4a8e:	4847      	ldr	r0, [pc, #284]	; (4bac <vendor_request_handler+0x314>)
		if (mode != MODE_BT_FOLLOW_LE) {
    4a90:	2b09      	cmp	r3, #9
    4a92:	f000 8254 	beq.w	4f3e <vendor_request_handler+0x6a6>
			channel = requested_channel;
    4a96:	89c3      	ldrh	r3, [r0, #14]
    4a98:	b29b      	uxth	r3, r3
    4a9a:	8013      	strh	r3, [r2, #0]
			requested_channel = 0;
    4a9c:	2300      	movs	r3, #0
    4a9e:	81c3      	strh	r3, [r0, #14]

			/* CS threshold is mode-dependent. Update it after
			 * possible mode change. TODO - kludgy. */
			cs_threshold_calc_and_set(channel);
    4aa0:	8810      	ldrh	r0, [r2, #0]
    4aa2:	e18c      	b.n	4dbe <vendor_request_handler+0x526>
		}
		break;

	case UBERTOOTH_SET_ISP:
		set_isp();
    4aa4:	f004 fde4 	bl	9670 <set_isp>
		*data_len = 0; /* should never return */
    4aa8:	2300      	movs	r3, #0
    4aaa:	e7b4      	b.n	4a16 <vendor_request_handler+0x17e>
		break;

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    4aac:	4a48      	ldr	r2, [pc, #288]	; (4bd0 <vendor_request_handler+0x338>)
    4aae:	4b49      	ldr	r3, [pc, #292]	; (4bd4 <vendor_request_handler+0x33c>)
    4ab0:	601a      	str	r2, [r3, #0]
		requested_mode = MODE_RESET;
    4ab2:	220b      	movs	r2, #11
    4ab4:	e78d      	b.n	49d2 <vendor_request_handler+0x13a>
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4ab6:	880a      	ldrh	r2, [r1, #0]
    4ab8:	f46f 6000 	mvn.w	r0, #2048	; 0x800
    4abc:	1813      	adds	r3, r2, r0
    4abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4ac2:	f080 823e 	bcs.w	4f42 <vendor_request_handler+0x6aa>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4ac6:	884b      	ldrh	r3, [r1, #2]
		bootloader_ctrl = DFU_MODE;
		requested_mode = MODE_RESET;
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4ac8:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    4acc:	1859      	adds	r1, r3, r1
    4ace:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    4ad2:	f080 8236 	bcs.w	4f42 <vendor_request_handler+0x6aa>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4ad6:	4293      	cmp	r3, r2
    4ad8:	f0c0 8233 	bcc.w	4f42 <vendor_request_handler+0x6aa>
				request_params[1] < request_params[0])
			return 0;
		low_freq = request_params[0];
    4adc:	493b      	ldr	r1, [pc, #236]	; (4bcc <vendor_request_handler+0x334>)
    4ade:	f8a1 2054 	strh.w	r2, [r1, #84]	; 0x54
		high_freq = request_params[1];
    4ae2:	f8a1 3056 	strh.w	r3, [r1, #86]	; 0x56
		requested_mode = MODE_SPECAN;
    4ae6:	2204      	movs	r2, #4
    4ae8:	e1a5      	b.n	4e36 <vendor_request_handler+0x59e>
		*data_len = 0;
		break;

	case UBERTOOTH_RX_GENERIC:
		requested_mode = MODE_RX_GENERIC;
    4aea:	220f      	movs	r2, #15
    4aec:	e1a3      	b.n	4e36 <vendor_request_handler+0x59e>
		*data_len = 0;
		break;

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    4aee:	880b      	ldrh	r3, [r1, #0]
    4af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4af4:	f200 8225 	bhi.w	4f42 <vendor_request_handler+0x6aa>
			return 0;
		rssi_threshold = 54 - request_params[0];
    4af8:	4a34      	ldr	r2, [pc, #208]	; (4bcc <vendor_request_handler+0x334>)
    4afa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    4afe:	b2db      	uxtb	r3, r3
    4b00:	f882 3058 	strb.w	r3, [r2, #88]	; 0x58
		requested_mode = MODE_LED_SPECAN;
    4b04:	2207      	movs	r2, #7
    4b06:	e196      	b.n	4e36 <vendor_request_handler+0x59e>
		*data_len = 0;
		break;

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    4b08:	2300      	movs	r3, #0
    4b0a:	7013      	strb	r3, [r2, #0]
		data[1] = 0x00;
    4b0c:	7053      	strb	r3, [r2, #1]

		length = (u8)strlen(GIT_REVISION);
    4b0e:	4832      	ldr	r0, [pc, #200]	; (4bd8 <vendor_request_handler+0x340>)
    4b10:	f005 fcf0 	bl	a4f4 <strlen>
    4b14:	b2c6      	uxtb	r6, r0
		data[2] = length;
    4b16:	70ae      	strb	r6, [r5, #2]

		memcpy(&data[3], GIT_REVISION, length);
    4b18:	4632      	mov	r2, r6
    4b1a:	1ce8      	adds	r0, r5, #3
    4b1c:	492e      	ldr	r1, [pc, #184]	; (4bd8 <vendor_request_handler+0x340>)
    4b1e:	f005 fc73 	bl	a408 <memcpy>

		*data_len = 2 + 1 + length;
    4b22:	3603      	adds	r6, #3
    4b24:	e00b      	b.n	4b3e <vendor_request_handler+0x2a6>
		break;

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    4b26:	482d      	ldr	r0, [pc, #180]	; (4bdc <vendor_request_handler+0x344>)
    4b28:	f005 fce4 	bl	a4f4 <strlen>
    4b2c:	b2c6      	uxtb	r6, r0
		data[0] = length;
    4b2e:	4628      	mov	r0, r5
		memcpy(&data[1], compile_info, length);
    4b30:	4632      	mov	r2, r6
		*data_len = 2 + 1 + length;
		break;

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
		data[0] = length;
    4b32:	f800 6b01 	strb.w	r6, [r0], #1
		memcpy(&data[1], compile_info, length);
    4b36:	4929      	ldr	r1, [pc, #164]	; (4bdc <vendor_request_handler+0x344>)
    4b38:	f005 fc66 	bl	a408 <memcpy>
		*data_len = 1 + length;
    4b3c:	3601      	adds	r6, #1
    4b3e:	6026      	str	r6, [r4, #0]
    4b40:	e1fd      	b.n	4f3e <vendor_request_handler+0x6a6>
		break;

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    4b42:	2001      	movs	r0, #1
    4b44:	7010      	strb	r0, [r2, #0]
    4b46:	e12e      	b.n	4da6 <vendor_request_handler+0x50e>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    4b48:	880a      	ldrh	r2, [r1, #0]
    4b4a:	4b25      	ldr	r3, [pc, #148]	; (4be0 <vendor_request_handler+0x348>)
    4b4c:	701a      	strb	r2, [r3, #0]
    4b4e:	e134      	b.n	4dba <vendor_request_handler+0x522>
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    4b50:	4b23      	ldr	r3, [pc, #140]	; (4be0 <vendor_request_handler+0x348>)
    4b52:	781b      	ldrb	r3, [r3, #0]
    4b54:	702b      	strb	r3, [r5, #0]
    4b56:	e125      	b.n	4da4 <vendor_request_handler+0x50c>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    4b58:	4c22      	ldr	r4, [pc, #136]	; (4be4 <vendor_request_handler+0x34c>)
    4b5a:	2200      	movs	r2, #0
    4b5c:	2300      	movs	r3, #0
    4b5e:	e9c4 2300 	strd	r2, r3, [r4]
		target.syncword = 0;
    4b62:	e9c4 2302 	strd	r2, r3, [r4, #8]
		for(int i=0; i < 8; i++) {
    4b66:	2600      	movs	r6, #0
			target.address |= (uint64_t)data[i] << 8*i;
    4b68:	5da8      	ldrb	r0, [r5, r6]
    4b6a:	00f2      	lsls	r2, r6, #3
    4b6c:	2100      	movs	r1, #0
    4b6e:	f005 f935 	bl	9ddc <__aeabi_llsl>
    4b72:	e9d4 2300 	ldrd	r2, r3, [r4]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4b76:	3601      	adds	r6, #1
			target.address |= (uint64_t)data[i] << 8*i;
    4b78:	4310      	orrs	r0, r2
    4b7a:	4319      	orrs	r1, r3
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4b7c:	2e08      	cmp	r6, #8
			target.address |= (uint64_t)data[i] << 8*i;
    4b7e:	e9c4 0100 	strd	r0, r1, [r4]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
    4b82:	d1f1      	bne.n	4b68 <vendor_request_handler+0x2d0>
    4b84:	3507      	adds	r5, #7
    4b86:	2600      	movs	r6, #0
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4b88:	00f2      	lsls	r2, r6, #3
    4b8a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
    4b8e:	2100      	movs	r1, #0
    4b90:	f005 f924 	bl	9ddc <__aeabi_llsl>
    4b94:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4b98:	3601      	adds	r6, #1
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4b9a:	4310      	orrs	r0, r2
    4b9c:	4319      	orrs	r1, r3
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4b9e:	2e08      	cmp	r6, #8
			target.syncword |= (uint64_t)data[i+8] << 8*i;
    4ba0:	e9c4 0102 	strd	r0, r1, [r4, #8]
		target.address = 0;
		target.syncword = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4ba4:	d1f0      	bne.n	4b88 <vendor_request_handler+0x2f0>
			target.syncword |= (uint64_t)data[i+8] << 8*i;
		}
		precalc();
    4ba6:	f001 ff73 	bl	6a90 <precalc>
    4baa:	e1c8      	b.n	4f3e <vendor_request_handler+0x6a6>
    4bac:	10000a24 	.word	0x10000a24
    4bb0:	2009c034 	.word	0x2009c034
    4bb4:	2009c038 	.word	0x2009c038
    4bb8:	2009c03c 	.word	0x2009c03c
    4bbc:	2009c054 	.word	0x2009c054
    4bc0:	2009c058 	.word	0x2009c058
    4bc4:	2009c05c 	.word	0x2009c05c
    4bc8:	10001708 	.word	0x10001708
    4bcc:	10000448 	.word	0x10000448
    4bd0:	4305bb21 	.word	0x4305bb21
    4bd4:	1000001c 	.word	0x1000001c
    4bd8:	0000ae14 	.word	0x0000ae14
    4bdc:	0000a5ff 	.word	0x0000a5ff
    4be0:	100016d0 	.word	0x100016d0
    4be4:	10001748 	.word	0x10001748
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
    4be8:	4ba3      	ldr	r3, [pc, #652]	; (4e78 <vendor_request_handler+0x5e0>)
    4bea:	2200      	movs	r2, #0
    4bec:	601a      	str	r2, [r3, #0]
    4bee:	1ce8      	adds	r0, r5, #3
    4bf0:	1e6a      	subs	r2, r5, #1
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
    4bf2:	6819      	ldr	r1, [r3, #0]
    4bf4:	0209      	lsls	r1, r1, #8
    4bf6:	6019      	str	r1, [r3, #0]
			clkn_offset |= data[i];
    4bf8:	f812 4f01 	ldrb.w	r4, [r2, #1]!
    4bfc:	6819      	ldr	r1, [r3, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4bfe:	4282      	cmp	r2, r0
			clkn_offset <<= 8;
			clkn_offset |= data[i];
    4c00:	ea41 0104 	orr.w	r1, r1, r4
    4c04:	6019      	str	r1, [r3, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4c06:	d1f4      	bne.n	4bf2 <vendor_request_handler+0x35a>
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
    4c08:	4b9c      	ldr	r3, [pc, #624]	; (4e7c <vendor_request_handler+0x5e4>)
    4c0a:	2202      	movs	r2, #2
    4c0c:	729a      	strb	r2, [r3, #10]
		dma_discard = 1;
		DIO_SSEL_SET;
    4c0e:	4a9c      	ldr	r2, [pc, #624]	; (4e80 <vendor_request_handler+0x5e8>)
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
		dma_discard = 1;
    4c10:	2001      	movs	r0, #1
		DIO_SSEL_SET;
    4c12:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
		for(int i=0; i < 4; i++) {
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
		dma_discard = 1;
    4c16:	7418      	strb	r0, [r3, #16]
		DIO_SSEL_SET;
    4c18:	6011      	str	r1, [r2, #0]
		clk100ns_offset = (data[4] << 8) | (data[5] << 0);
    4c1a:	7929      	ldrb	r1, [r5, #4]
    4c1c:	796a      	ldrb	r2, [r5, #5]
    4c1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4c22:	4998      	ldr	r1, [pc, #608]	; (4e84 <vendor_request_handler+0x5ec>)
    4c24:	800a      	strh	r2, [r1, #0]
		requested_mode = MODE_BT_FOLLOW;
    4c26:	2208      	movs	r2, #8
    4c28:	749a      	strb	r2, [r3, #18]
		break;
    4c2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case UBERTOOTH_AFH:
		hop_mode = HOP_AFH;
    4c2c:	4b93      	ldr	r3, [pc, #588]	; (4e7c <vendor_request_handler+0x5e4>)
    4c2e:	2205      	movs	r2, #5
    4c30:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_AFH;
    4c32:	220e      	movs	r2, #14
    4c34:	749a      	strb	r2, [r3, #18]

		for(int i=0; i < 10; i++) {
    4c36:	2300      	movs	r3, #0
			afh_map[i] = 0;
    4c38:	4993      	ldr	r1, [pc, #588]	; (4e88 <vendor_request_handler+0x5f0>)
    4c3a:	2200      	movs	r2, #0
    4c3c:	545a      	strb	r2, [r3, r1]

	case UBERTOOTH_AFH:
		hop_mode = HOP_AFH;
		requested_mode = MODE_AFH;

		for(int i=0; i < 10; i++) {
    4c3e:	3301      	adds	r3, #1
    4c40:	2b0a      	cmp	r3, #10
    4c42:	d1f9      	bne.n	4c38 <vendor_request_handler+0x3a0>
			afh_map[i] = 0;
		}
		used_channels = 0;
    4c44:	4b91      	ldr	r3, [pc, #580]	; (4e8c <vendor_request_handler+0x5f4>)
		afh_enabled = 1;
    4c46:	2001      	movs	r0, #1
		requested_mode = MODE_AFH;

		for(int i=0; i < 10; i++) {
			afh_map[i] = 0;
		}
		used_channels = 0;
    4c48:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
    4c4a:	4b91      	ldr	r3, [pc, #580]	; (4e90 <vendor_request_handler+0x5f8>)
    4c4c:	7018      	strb	r0, [r3, #0]
		break;
    4c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case UBERTOOTH_HOP:
		do_hop = 1;
    4c50:	4b8a      	ldr	r3, [pc, #552]	; (4e7c <vendor_request_handler+0x5e4>)
    4c52:	2001      	movs	r0, #1
    4c54:	72d8      	strb	r0, [r3, #11]
		break;
    4c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    4c58:	78ab      	ldrb	r3, [r5, #2]
    4c5a:	7852      	ldrb	r2, [r2, #1]
    4c5c:	041b      	lsls	r3, r3, #16
    4c5e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4c62:	782a      	ldrb	r2, [r5, #0]
    4c64:	4313      	orrs	r3, r2
    4c66:	78ea      	ldrb	r2, [r5, #3]
    4c68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		clkn = clock;
    4c6c:	4a89      	ldr	r2, [pc, #548]	; (4e94 <vendor_request_handler+0x5fc>)
    4c6e:	6013      	str	r3, [r2, #0]
    4c70:	e0a3      	b.n	4dba <vendor_request_handler+0x522>
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4c72:	2300      	movs	r3, #0
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
			afh_map[i] = data[i];
    4c74:	5ce9      	ldrb	r1, [r5, r3]
    4c76:	4a84      	ldr	r2, [pc, #528]	; (4e88 <vendor_request_handler+0x5f0>)
    4c78:	5499      	strb	r1, [r3, r2]
		clkn = clock;
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
    4c7a:	3301      	adds	r3, #1
    4c7c:	2b0a      	cmp	r3, #10
    4c7e:	d1f9      	bne.n	4c74 <vendor_request_handler+0x3dc>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    4c80:	4a83      	ldr	r2, [pc, #524]	; (4e90 <vendor_request_handler+0x5f8>)
    4c82:	2001      	movs	r0, #1
    4c84:	7010      	strb	r0, [r2, #0]
		*data_len = 10;
    4c86:	6023      	str	r3, [r4, #0]
		break;
    4c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4c8a:	2300      	movs	r3, #0
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
			afh_map[i] = 0;
    4c8c:	497e      	ldr	r1, [pc, #504]	; (4e88 <vendor_request_handler+0x5f0>)
    4c8e:	2200      	movs	r2, #0
    4c90:	545a      	strb	r2, [r3, r1]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
    4c92:	3301      	adds	r3, #1
    4c94:	2b0a      	cmp	r3, #10
    4c96:	d1f9      	bne.n	4c8c <vendor_request_handler+0x3f4>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    4c98:	497d      	ldr	r1, [pc, #500]	; (4e90 <vendor_request_handler+0x5f8>)
    4c9a:	700a      	strb	r2, [r1, #0]
    4c9c:	e6bb      	b.n	4a16 <vendor_request_handler+0x17e>
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    4c9e:	4b7d      	ldr	r3, [pc, #500]	; (4e94 <vendor_request_handler+0x5fc>)
    4ca0:	6819      	ldr	r1, [r3, #0]
		for(int i=0; i < 4; i++) {
    4ca2:	2300      	movs	r3, #0
    4ca4:	00da      	lsls	r2, r3, #3
			data[i] = (clock >> (8*i)) & 0xff;
    4ca6:	fa21 f202 	lsr.w	r2, r1, r2
    4caa:	54ea      	strb	r2, [r5, r3]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(int i=0; i < 4; i++) {
    4cac:	3301      	adds	r3, #1
    4cae:	2b04      	cmp	r3, #4
    4cb0:	d1f8      	bne.n	4ca4 <vendor_request_handler+0x40c>
			data[i] = (clock >> (8*i)) & 0xff;
		}
		*data_len = 4;
    4cb2:	2304      	movs	r3, #4
    4cb4:	e6af      	b.n	4a16 <vendor_request_handler+0x17e>
		break;

	case UBERTOOTH_TRIM_CLOCK:
		clk100ns_offset = (data[0] << 8) | (data[1] << 0);
    4cb6:	7812      	ldrb	r2, [r2, #0]
    4cb8:	786b      	ldrb	r3, [r5, #1]
    4cba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    4cbe:	4a71      	ldr	r2, [pc, #452]	; (4e84 <vendor_request_handler+0x5ec>)
    4cc0:	8013      	strh	r3, [r2, #0]
    4cc2:	e13c      	b.n	4f3e <vendor_request_handler+0x6a6>
		break;

	case UBERTOOTH_FIX_CLOCK_DRIFT:
		clk_drift_ppm += (int16_t)(data[0] << 8) | (data[1] << 0);
    4cc4:	4b74      	ldr	r3, [pc, #464]	; (4e98 <vendor_request_handler+0x600>)
    4cc6:	7810      	ldrb	r0, [r2, #0]
    4cc8:	7852      	ldrb	r2, [r2, #1]
    4cca:	8819      	ldrh	r1, [r3, #0]
    4ccc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    4cd0:	440a      	add	r2, r1
    4cd2:	b292      	uxth	r2, r2
    4cd4:	801a      	strh	r2, [r3, #0]

		// Too slow
		if (clk_drift_ppm < 0) {
    4cd6:	881a      	ldrh	r2, [r3, #0]
    4cd8:	4870      	ldr	r0, [pc, #448]	; (4e9c <vendor_request_handler+0x604>)
    4cda:	b212      	sxth	r2, r2
    4cdc:	2a00      	cmp	r2, #0
    4cde:	4a70      	ldr	r2, [pc, #448]	; (4ea0 <vendor_request_handler+0x608>)
    4ce0:	da07      	bge.n	4cf2 <vendor_request_handler+0x45a>
			clk_drift_correction = 320 / (uint16_t)(-clk_drift_ppm);
    4ce2:	881b      	ldrh	r3, [r3, #0]
    4ce4:	f44f 71a0 	mov.w	r1, #320	; 0x140
    4ce8:	425b      	negs	r3, r3
    4cea:	b29b      	uxth	r3, r3
    4cec:	fb91 f3f3 	sdiv	r3, r1, r3
    4cf0:	e00a      	b.n	4d08 <vendor_request_handler+0x470>
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
		}
		// Too fast
		else if (clk_drift_ppm > 0) {
    4cf2:	8819      	ldrh	r1, [r3, #0]
    4cf4:	b209      	sxth	r1, r1
    4cf6:	2900      	cmp	r1, #0
    4cf8:	dd0d      	ble.n	4d16 <vendor_request_handler+0x47e>
			clk_drift_correction = 320 / clk_drift_ppm;
    4cfa:	881b      	ldrh	r3, [r3, #0]
    4cfc:	f44f 71a0 	mov.w	r1, #320	; 0x140
    4d00:	b21b      	sxth	r3, r3
    4d02:	fb91 f3f3 	sdiv	r3, r1, r3
    4d06:	b29b      	uxth	r3, r3
    4d08:	8013      	strh	r3, [r2, #0]
			clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    4d0a:	4b66      	ldr	r3, [pc, #408]	; (4ea4 <vendor_request_handler+0x60c>)
    4d0c:	6819      	ldr	r1, [r3, #0]
    4d0e:	8813      	ldrh	r3, [r2, #0]
    4d10:	b29b      	uxth	r3, r3
    4d12:	440b      	add	r3, r1
    4d14:	e001      	b.n	4d1a <vendor_request_handler+0x482>
		}
		// Don't trim
		else {
			clk_drift_correction = 0;
    4d16:	2300      	movs	r3, #0
    4d18:	8013      	strh	r3, [r2, #0]
			clkn_next_drift_fix = 0;
    4d1a:	6003      	str	r3, [r0, #0]
    4d1c:	e10f      	b.n	4f3e <vendor_request_handler+0x6a6>
		}

		break;

	case UBERTOOTH_BTLE_SNIFFING:
		le.do_follow = request_params[0];
    4d1e:	880b      	ldrh	r3, [r1, #0]
    4d20:	4d61      	ldr	r5, [pc, #388]	; (4ea8 <vendor_request_handler+0x610>)
		*data_len = 0;
    4d22:	2200      	movs	r2, #0
		}

		break;

	case UBERTOOTH_BTLE_SNIFFING:
		le.do_follow = request_params[0];
    4d24:	63ab      	str	r3, [r5, #56]	; 0x38
		*data_len = 0;

		do_hop = 0;
    4d26:	4b55      	ldr	r3, [pc, #340]	; (4e7c <vendor_request_handler+0x5e4>)

		break;

	case UBERTOOTH_BTLE_SNIFFING:
		le.do_follow = request_params[0];
		*data_len = 0;
    4d28:	6022      	str	r2, [r4, #0]

		do_hop = 0;
    4d2a:	72da      	strb	r2, [r3, #11]
		hop_mode = HOP_BTLE;
    4d2c:	2203      	movs	r2, #3
    4d2e:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BT_FOLLOW_LE;
    4d30:	2209      	movs	r2, #9
    4d32:	749a      	strb	r2, [r3, #18]

		usb_queue_init();
    4d34:	f002 f95e 	bl	6ff4 <usb_queue_init>
		cs_threshold_calc_and_set(channel);
    4d38:	8828      	ldrh	r0, [r5, #0]
    4d3a:	e040      	b.n	4dbe <vendor_request_handler+0x526>
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4d3c:	2300      	movs	r3, #0
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
			data[i] = (le.access_address >> (8*i)) & 0xff;
    4d3e:	4a5a      	ldr	r2, [pc, #360]	; (4ea8 <vendor_request_handler+0x610>)
    4d40:	00d9      	lsls	r1, r3, #3
    4d42:	6852      	ldr	r2, [r2, #4]
    4d44:	40ca      	lsrs	r2, r1
    4d46:	54ea      	strb	r2, [r5, r3]
		usb_queue_init();
		cs_threshold_calc_and_set(channel);
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
    4d48:	3301      	adds	r3, #1
    4d4a:	2b04      	cmp	r3, #4
    4d4c:	d1f7      	bne.n	4d3e <vendor_request_handler+0x4a6>
    4d4e:	e7b0      	b.n	4cb2 <vendor_request_handler+0x41a>
		}
		*data_len = 4;
		break;

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    4d50:	7893      	ldrb	r3, [r2, #2]
    4d52:	7850      	ldrb	r0, [r2, #1]
    4d54:	041b      	lsls	r3, r3, #16
    4d56:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    4d5a:	7810      	ldrb	r0, [r2, #0]
    4d5c:	4303      	orrs	r3, r0
    4d5e:	78d0      	ldrb	r0, [r2, #3]
    4d60:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
    4d64:	f7ff fbf8 	bl	4558 <le_set_access_address>
    4d68:	e0d8      	b.n	4f1c <vendor_request_handler+0x684>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    4d6a:	2313      	movs	r3, #19
    4d6c:	7013      	strb	r3, [r2, #0]
		data[1] = 0x37;
    4d6e:	2337      	movs	r3, #55	; 0x37
    4d70:	706b      	strb	r3, [r5, #1]
    4d72:	e02e      	b.n	4dd2 <vendor_request_handler+0x53a>
		*data_len = 2;
		break;

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    4d74:	4b4c      	ldr	r3, [pc, #304]	; (4ea8 <vendor_request_handler+0x610>)
    4d76:	695b      	ldr	r3, [r3, #20]
    4d78:	3300      	adds	r3, #0
    4d7a:	bf18      	it	ne
    4d7c:	2301      	movne	r3, #1
    4d7e:	e6e9      	b.n	4b54 <vendor_request_handler+0x2bc>
		*data_len = 1;
		break;

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    4d80:	880b      	ldrh	r3, [r1, #0]
    4d82:	4a49      	ldr	r2, [pc, #292]	; (4ea8 <vendor_request_handler+0x610>)
    4d84:	3300      	adds	r3, #0
    4d86:	bf18      	it	ne
    4d88:	2301      	movne	r3, #1
    4d8a:	6153      	str	r3, [r2, #20]
    4d8c:	e0d7      	b.n	4f3e <vendor_request_handler+0x6a6>
		break;

	case UBERTOOTH_POLL:
		p = dequeue();
    4d8e:	f002 f959 	bl	7044 <dequeue>
		if (p != NULL) {
    4d92:	4601      	mov	r1, r0
    4d94:	b128      	cbz	r0, 4da2 <vendor_request_handler+0x50a>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    4d96:	4628      	mov	r0, r5
    4d98:	2240      	movs	r2, #64	; 0x40
    4d9a:	f005 fb35 	bl	a408 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    4d9e:	2340      	movs	r3, #64	; 0x40
    4da0:	e639      	b.n	4a16 <vendor_request_handler+0x17e>
		} else {
			data[0] = 0;
    4da2:	7028      	strb	r0, [r5, #0]
			*data_len = 1;
    4da4:	2001      	movs	r0, #1
    4da6:	6020      	str	r0, [r4, #0]
    4da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		break;

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;

		hop_mode = HOP_NONE;
    4daa:	4b34      	ldr	r3, [pc, #208]	; (4e7c <vendor_request_handler+0x5e4>)
			*data_len = 1;
		}
		break;

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    4dac:	2200      	movs	r2, #0
    4dae:	6022      	str	r2, [r4, #0]

		hop_mode = HOP_NONE;
    4db0:	729a      	strb	r2, [r3, #10]
		requested_mode = MODE_BT_PROMISC_LE;
    4db2:	220a      	movs	r2, #10
    4db4:	749a      	strb	r2, [r3, #18]

		usb_queue_init();
    4db6:	f002 f91d 	bl	6ff4 <usb_queue_init>
		cs_threshold_calc_and_set(channel);
    4dba:	4b3b      	ldr	r3, [pc, #236]	; (4ea8 <vendor_request_handler+0x610>)
    4dbc:	8818      	ldrh	r0, [r3, #0]
    4dbe:	b280      	uxth	r0, r0
    4dc0:	f002 fa06 	bl	71d0 <cs_threshold_calc_and_set>
    4dc4:	e0bb      	b.n	4f3e <vendor_request_handler+0x6a6>
		break;

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    4dc6:	7808      	ldrb	r0, [r1, #0]
    4dc8:	f004 fa70 	bl	92ac <cc2400_get>
		data[0] = (reg_val >> 8) & 0xff;
    4dcc:	0a03      	lsrs	r3, r0, #8
    4dce:	702b      	strb	r3, [r5, #0]
		data[1] = reg_val & 0xff;
    4dd0:	7068      	strb	r0, [r5, #1]
		*data_len = 2;
    4dd2:	2302      	movs	r3, #2
    4dd4:	e61f      	b.n	4a16 <vendor_request_handler+0x17e>
		break;

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    4dd6:	7808      	ldrb	r0, [r1, #0]
    4dd8:	8849      	ldrh	r1, [r1, #2]
    4dda:	f004 fa70 	bl	92be <cc2400_set>
    4dde:	e0ae      	b.n	4f3e <vendor_request_handler+0x6a6>
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4de0:	2300      	movs	r3, #0
	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
		break;

	case UBERTOOTH_WRITE_REGISTERS:
		for(i=0; i<request_params[0]; i++) {
    4de2:	8832      	ldrh	r2, [r6, #0]
    4de4:	1c5c      	adds	r4, r3, #1
    4de6:	b2db      	uxtb	r3, r3
    4de8:	4293      	cmp	r3, r2
    4dea:	f080 80a8 	bcs.w	4f3e <vendor_request_handler+0x6a6>
			reg_val = (data[(i*3)+1] << 8) | data[(i*3)+2];
    4dee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4df2:	18ea      	adds	r2, r5, r3
    4df4:	7851      	ldrb	r1, [r2, #1]
    4df6:	7892      	ldrb	r2, [r2, #2]
			cc2400_set(data[i*3], reg_val);
    4df8:	5ce8      	ldrb	r0, [r5, r3]
    4dfa:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    4dfe:	f004 fa5e 	bl	92be <cc2400_set>
    4e02:	4623      	mov	r3, r4
    4e04:	e7ed      	b.n	4de2 <vendor_request_handler+0x54a>
	size_t length; // string length
	usb_pkt_rx* p = NULL;
	uint16_t reg_val;
	uint8_t i;

	switch (request) {
    4e06:	2600      	movs	r6, #0
    4e08:	b2f7      	uxtb	r7, r6
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
			reg_val = cc2400_get(i);
    4e0a:	4638      	mov	r0, r7
    4e0c:	f004 fa4e 	bl	92ac <cc2400_get>
    4e10:	3601      	adds	r6, #1
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4e12:	0a03      	lsrs	r3, r0, #8
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4e14:	2e2e      	cmp	r6, #46	; 0x2e
			reg_val = cc2400_get(i);
			data[i*3] = i;
    4e16:	702f      	strb	r7, [r5, #0]
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
    4e18:	706b      	strb	r3, [r5, #1]
			data[(i*3)+2] = reg_val & 0xff;
    4e1a:	70a8      	strb	r0, [r5, #2]
    4e1c:	f105 0503 	add.w	r5, r5, #3
		}
		break;

	case UBERTOOTH_READ_ALL_REGISTERS:
		#define MAX_READ_REG 0x2d
		for(i=0; i<=MAX_READ_REG; i++) {
    4e20:	d1f2      	bne.n	4e08 <vendor_request_handler+0x570>
			reg_val = cc2400_get(i);
			data[i*3] = i;
			data[(i*3)+1] = (reg_val >> 8) & 0xff;
			data[(i*3)+2] = reg_val & 0xff;
		}
		*data_len = MAX_READ_REG*3;
    4e22:	2387      	movs	r3, #135	; 0x87
    4e24:	e5f7      	b.n	4a16 <vendor_request_handler+0x17e>
		break;

	case UBERTOOTH_TX_GENERIC_PACKET:
		i = 7 + data[6];
    4e26:	7992      	ldrb	r2, [r2, #6]
		memcpy(&tx_pkt, data, i);
    4e28:	4820      	ldr	r0, [pc, #128]	; (4eac <vendor_request_handler+0x614>)
		}
		*data_len = MAX_READ_REG*3;
		break;

	case UBERTOOTH_TX_GENERIC_PACKET:
		i = 7 + data[6];
    4e2a:	3207      	adds	r2, #7
		memcpy(&tx_pkt, data, i);
    4e2c:	b2d2      	uxtb	r2, r2
    4e2e:	4629      	mov	r1, r5
    4e30:	f005 faea 	bl	a408 <memcpy>
		//tx_pkt.channel = data[4] << 8 | data[5];
		requested_mode = MODE_TX_GENERIC;
    4e34:	2210      	movs	r2, #16
    4e36:	4b11      	ldr	r3, [pc, #68]	; (4e7c <vendor_request_handler+0x5e4>)
    4e38:	749a      	strb	r2, [r3, #18]
    4e3a:	e635      	b.n	4aa8 <vendor_request_handler+0x210>
		*data_len = 0;
		break;

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    4e3c:	4c0f      	ldr	r4, [pc, #60]	; (4e7c <vendor_request_handler+0x5e4>)
    4e3e:	4611      	mov	r1, r2
    4e40:	f104 0020 	add.w	r0, r4, #32
    4e44:	2206      	movs	r2, #6
    4e46:	f005 fadf 	bl	a408 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    4e4a:	230c      	movs	r3, #12
    4e4c:	74a3      	strb	r3, [r4, #18]
    4e4e:	e076      	b.n	4f3e <vendor_request_handler+0x6a6>
		break;

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		if (data[6] > 48) {
    4e50:	7994      	ldrb	r4, [r2, #6]
    4e52:	2c30      	cmp	r4, #48	; 0x30
    4e54:	d873      	bhi.n	4f3e <vendor_request_handler+0x6a6>
			return 1; // invalid mask
		}
		else if (data[6] == 0) {
    4e56:	bb5c      	cbnz	r4, 4eb0 <vendor_request_handler+0x618>
			le.target_set = 0;
    4e58:	4d13      	ldr	r5, [pc, #76]	; (4ea8 <vendor_request_handler+0x610>)
			memset(le.target, 0, 6);
    4e5a:	4621      	mov	r1, r4
    4e5c:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    4e60:	2206      	movs	r2, #6
		// Store the target address in reverse order so that we can do a simple memcmp later
		if (data[6] > 48) {
			return 1; // invalid mask
		}
		else if (data[6] == 0) {
			le.target_set = 0;
    4e62:	64ac      	str	r4, [r5, #72]	; 0x48
			memset(le.target, 0, 6);
    4e64:	f7ff f9c8 	bl	41f8 <memset>
			memset(le.target_mask, 0, 6);
    4e68:	f105 0042 	add.w	r0, r5, #66	; 0x42
    4e6c:	4621      	mov	r1, r4
    4e6e:	2206      	movs	r2, #6
    4e70:	f7ff f9c2 	bl	41f8 <memset>
    4e74:	e063      	b.n	4f3e <vendor_request_handler+0x6a6>
    4e76:	bf00      	nop
    4e78:	10001240 	.word	0x10001240
    4e7c:	10000a24 	.word	0x10000a24
    4e80:	2009c098 	.word	0x2009c098
    4e84:	1000139a 	.word	0x1000139a
    4e88:	10001233 	.word	0x10001233
    4e8c:	10001231 	.word	0x10001231
    4e90:	100016cf 	.word	0x100016cf
    4e94:	1000124c 	.word	0x1000124c
    4e98:	100016cc 	.word	0x100016cc
    4e9c:	10001704 	.word	0x10001704
    4ea0:	10001248 	.word	0x10001248
    4ea4:	10001244 	.word	0x10001244
    4ea8:	10000448 	.word	0x10000448
    4eac:	10001250 	.word	0x10001250
    4eb0:	4c25      	ldr	r4, [pc, #148]	; (4f48 <vendor_request_handler+0x6b0>)
    4eb2:	3206      	adds	r2, #6
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		if (data[6] > 48) {
			return 1; // invalid mask
		}
		else if (data[6] == 0) {
    4eb4:	4623      	mov	r3, r4
    4eb6:	1da1      	adds	r1, r4, #6
			memset(le.target_mask, 0, 6);
		} else {
			unsigned last;

			for (i = 0; i < 6; ++i)
				le.target[i] = data[5-i];
    4eb8:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
    4ebc:	f803 0f01 	strb.w	r0, [r3, #1]!
			memset(le.target, 0, 6);
			memset(le.target_mask, 0, 6);
		} else {
			unsigned last;

			for (i = 0; i < 6; ++i)
    4ec0:	428b      	cmp	r3, r1
    4ec2:	d1f9      	bne.n	4eb8 <vendor_request_handler+0x620>
				le.target[i] = data[5-i];

			// compute mask
			memset(le.target_mask, 0, 6);
    4ec4:	4821      	ldr	r0, [pc, #132]	; (4f4c <vendor_request_handler+0x6b4>)
    4ec6:	2100      	movs	r1, #0
    4ec8:	2206      	movs	r2, #6
    4eca:	f7ff f995 	bl	41f8 <memset>
			for (i = 5; data[6] > 8; --i, data[6] -= 8) {
    4ece:	2305      	movs	r3, #5
    4ed0:	79a8      	ldrb	r0, [r5, #6]
    4ed2:	2808      	cmp	r0, #8
    4ed4:	d90a      	bls.n	4eec <vendor_request_handler+0x654>
				le.target_mask[i] = 0xff;
    4ed6:	4a1e      	ldr	r2, [pc, #120]	; (4f50 <vendor_request_handler+0x6b8>)
    4ed8:	21ff      	movs	r1, #255	; 0xff
    4eda:	441a      	add	r2, r3
    4edc:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
			for (i = 0; i < 6; ++i)
				le.target[i] = data[5-i];

			// compute mask
			memset(le.target_mask, 0, 6);
			for (i = 5; data[6] > 8; --i, data[6] -= 8) {
    4ee0:	79aa      	ldrb	r2, [r5, #6]
    4ee2:	3b01      	subs	r3, #1
    4ee4:	3a08      	subs	r2, #8
    4ee6:	b2db      	uxtb	r3, r3
    4ee8:	71aa      	strb	r2, [r5, #6]
    4eea:	e7f1      	b.n	4ed0 <vendor_request_handler+0x638>
				le.target_mask[i] = 0xff;
			}
			last = i;

			if (data[6] > 0) {
    4eec:	b168      	cbz	r0, 4f0a <vendor_request_handler+0x672>
    4eee:	2100      	movs	r1, #0
    4ef0:	460a      	mov	r2, r1
				uint8_t final_byte = 0;
				for (i = 0; i < data[6]; ++i) {
    4ef2:	b2cd      	uxtb	r5, r1
    4ef4:	4285      	cmp	r5, r0
    4ef6:	d204      	bcs.n	4f02 <vendor_request_handler+0x66a>
					final_byte >>= 1;
    4ef8:	0852      	lsrs	r2, r2, #1
					final_byte |= 0b10000000;
    4efa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    4efe:	3101      	adds	r1, #1
    4f00:	e7f7      	b.n	4ef2 <vendor_request_handler+0x65a>
				}
				le.target_mask[last] = final_byte;
    4f02:	4913      	ldr	r1, [pc, #76]	; (4f50 <vendor_request_handler+0x6b8>)
    4f04:	440b      	add	r3, r1
    4f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    4f0a:	4a12      	ldr	r2, [pc, #72]	; (4f54 <vendor_request_handler+0x6bc>)
    4f0c:	3401      	adds	r4, #1
			}

			// in case the user specifies a bad mask
			for (i = 0; i < 5; ++i)
				le.target[i] &= le.target_mask[i];
    4f0e:	7823      	ldrb	r3, [r4, #0]
    4f10:	79a1      	ldrb	r1, [r4, #6]
				}
				le.target_mask[last] = final_byte;
			}

			// in case the user specifies a bad mask
			for (i = 0; i < 5; ++i)
    4f12:	4294      	cmp	r4, r2
				le.target[i] &= le.target_mask[i];
    4f14:	ea03 0301 	and.w	r3, r3, r1
    4f18:	7023      	strb	r3, [r4, #0]
				}
				le.target_mask[last] = final_byte;
			}

			// in case the user specifies a bad mask
			for (i = 0; i < 5; ++i)
    4f1a:	d1f7      	bne.n	4f0c <vendor_request_handler+0x674>
				le.target[i] &= le.target_mask[i];

			le.target_set = 1;
    4f1c:	4b0c      	ldr	r3, [pc, #48]	; (4f50 <vendor_request_handler+0x6b8>)
    4f1e:	2001      	movs	r0, #1
    4f20:	6498      	str	r0, [r3, #72]	; 0x48
    4f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		break;

	case UBERTOOTH_CANCEL_FOLLOW:
		// cancel following an active connection
		cancel_follow = 1;
    4f24:	4b0c      	ldr	r3, [pc, #48]	; (4f58 <vendor_request_handler+0x6c0>)
    4f26:	2001      	movs	r0, #1
    4f28:	6298      	str	r0, [r3, #40]	; 0x28
		break;
    4f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    4f2c:	780a      	ldrb	r2, [r1, #0]
    4f2e:	4b0a      	ldr	r3, [pc, #40]	; (4f58 <vendor_request_handler+0x6c0>)
    4f30:	74da      	strb	r2, [r3, #19]
    4f32:	e004      	b.n	4f3e <vendor_request_handler+0x6a6>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    4f34:	4b08      	ldr	r3, [pc, #32]	; (4f58 <vendor_request_handler+0x6c0>)
    4f36:	220d      	movs	r2, #13
    4f38:	749a      	strb	r2, [r3, #18]
		ego_mode = request_params[0];
    4f3a:	780a      	ldrb	r2, [r1, #0]
    4f3c:	751a      	strb	r2, [r3, #20]
		break;

	default:
		return 0;
	}
	return 1;
    4f3e:	2001      	movs	r0, #1
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
		ego_mode = request_params[0];
		break;
    4f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4f42:	2000      	movs	r0, #0

	default:
		return 0;
	}
	return 1;
}
    4f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4f46:	bf00      	nop
    4f48:	10000483 	.word	0x10000483
    4f4c:	1000048a 	.word	0x1000048a
    4f50:	10000448 	.word	0x10000448
    4f54:	10000488 	.word	0x10000488
    4f58:	10000a24 	.word	0x10000a24

00004f5c <enqueue_with_ts>:

	return 1;
}

int enqueue_with_ts(uint8_t type, uint8_t* buf, uint32_t ts)
{
    4f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4f60:	4606      	mov	r6, r0
    4f62:	460f      	mov	r7, r1
    4f64:	4690      	mov	r8, r2
	usb_pkt_rx* f = usb_enqueue();
    4f66:	f002 f853 	bl	7010 <usb_enqueue>
    4f6a:	4d0f      	ldr	r5, [pc, #60]	; (4fa8 <enqueue_with_ts+0x4c>)

	/* fail if queue is full */
	if (f == NULL) {
    4f6c:	4604      	mov	r4, r0
    4f6e:	b928      	cbnz	r0, 4f7c <enqueue_with_ts+0x20>
		status |= FIFO_OVERFLOW;
    4f70:	786b      	ldrb	r3, [r5, #1]
    4f72:	f043 0304 	orr.w	r3, r3, #4
    4f76:	706b      	strb	r3, [r5, #1]
		return 0;
    4f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	f->pkt_type = type;

	f->clkn_high = 0;
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4f7c:	4b0b      	ldr	r3, [pc, #44]	; (4fac <enqueue_with_ts+0x50>)
	if (f == NULL) {
		status |= FIFO_OVERFLOW;
		return 0;
	}

	f->pkt_type = type;
    4f7e:	7006      	strb	r6, [r0, #0]

	f->clkn_high = 0;
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4f80:	881b      	ldrh	r3, [r3, #0]
		return 0;
	}

	f->pkt_type = type;

	f->clkn_high = 0;
    4f82:	2600      	movs	r6, #0
	f->clk100ns = ts;

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4f84:	3b62      	subs	r3, #98	; 0x62
		return 0;
	}

	f->pkt_type = type;

	f->clkn_high = 0;
    4f86:	70c6      	strb	r6, [r0, #3]
	f->clk100ns = ts;
    4f88:	f8c0 8004 	str.w	r8, [r0, #4]

	f->channel = (uint8_t)((channel - 2402) & 0xff);
    4f8c:	7083      	strb	r3, [r0, #2]
	f->rssi_avg = 0;
    4f8e:	7286      	strb	r6, [r0, #10]
	f->rssi_count = 0;
    4f90:	72c6      	strb	r6, [r0, #11]

	memcpy(f->data, buf, DMA_SIZE);
    4f92:	4639      	mov	r1, r7
    4f94:	2232      	movs	r2, #50	; 0x32
    4f96:	300e      	adds	r0, #14
    4f98:	f005 fa36 	bl	a408 <memcpy>

	f->status = status;
    4f9c:	786b      	ldrb	r3, [r5, #1]
	status = 0;
    4f9e:	706e      	strb	r6, [r5, #1]
	f->rssi_avg = 0;
	f->rssi_count = 0;

	memcpy(f->data, buf, DMA_SIZE);

	f->status = status;
    4fa0:	7063      	strb	r3, [r4, #1]
	status = 0;

	return 1;
    4fa2:	2001      	movs	r0, #1
}
    4fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4fa8:	10000a24 	.word	0x10000a24
    4fac:	10000448 	.word	0x10000448

00004fb0 <TIMER0_IRQHandler>:
	return 1;
}

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    4fb0:	b570      	push	{r4, r5, r6, lr}
	if (T0IR & TIR_MR0_Interrupt) {
    4fb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    4fb6:	681b      	ldr	r3, [r3, #0]
    4fb8:	07db      	lsls	r3, r3, #31
    4fba:	d57d      	bpl.n	50b8 <TIMER0_IRQHandler+0x108>

		clkn += clkn_offset + 1;
    4fbc:	493f      	ldr	r1, [pc, #252]	; (50bc <TIMER0_IRQHandler+0x10c>)
    4fbe:	4b40      	ldr	r3, [pc, #256]	; (50c0 <TIMER0_IRQHandler+0x110>)
    4fc0:	6808      	ldr	r0, [r1, #0]
    4fc2:	681a      	ldr	r2, [r3, #0]
    4fc4:	4402      	add	r2, r0
    4fc6:	3201      	adds	r2, #1
    4fc8:	601a      	str	r2, [r3, #0]
		clkn_offset = 0;
    4fca:	2200      	movs	r2, #0
    4fcc:	600a      	str	r2, [r1, #0]
		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    4fce:	493d      	ldr	r1, [pc, #244]	; (50c4 <TIMER0_IRQHandler+0x114>)
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    4fd0:	6818      	ldr	r0, [r3, #0]
    4fd2:	4a3d      	ldr	r2, [pc, #244]	; (50c8 <TIMER0_IRQHandler+0x118>)

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    4fd4:	7a8e      	ldrb	r6, [r1, #10]
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    4fd6:	69d4      	ldr	r4, [r2, #28]
    4fd8:	460d      	mov	r5, r1

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    4fda:	b116      	cbz	r6, 4fe2 <TIMER0_IRQHandler+0x32>
    4fdc:	7a8e      	ldrb	r6, [r1, #10]
    4fde:	2e01      	cmp	r6, #1
    4fe0:	d105      	bne.n	4fee <TIMER0_IRQHandler+0x3e>
			if ((clkn & 0x7f) == 0)
    4fe2:	681a      	ldr	r2, [r3, #0]
    4fe4:	0656      	lsls	r6, r2, #25
    4fe6:	d135      	bne.n	5054 <TIMER0_IRQHandler+0xa4>
				do_hop = 1;
    4fe8:	2201      	movs	r2, #1
    4fea:	72ea      	strb	r2, [r5, #11]
    4fec:	e032      	b.n	5054 <TIMER0_IRQHandler+0xa4>
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    4fee:	7a8d      	ldrb	r5, [r1, #10]
    4ff0:	2d02      	cmp	r5, #2
    4ff2:	d103      	bne.n	4ffc <TIMER0_IRQHandler+0x4c>
			if ((clkn & 0x1) == 0)
    4ff4:	681a      	ldr	r2, [r3, #0]
    4ff6:	07d4      	lsls	r4, r2, #31
    4ff8:	d42c      	bmi.n	5054 <TIMER0_IRQHandler+0xa4>
    4ffa:	e029      	b.n	5050 <TIMER0_IRQHandler+0xa0>
				do_hop = 1;
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    4ffc:	7a8d      	ldrb	r5, [r1, #10]
    4ffe:	2d03      	cmp	r5, #3
    5000:	d11a      	bne.n	5038 <TIMER0_IRQHandler+0x88>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    5002:	7e15      	ldrb	r5, [r2, #24]
    5004:	2d03      	cmp	r5, #3
    5006:	d125      	bne.n	5054 <TIMER0_IRQHandler+0xa4>
	if (T0IR & TIR_MR0_Interrupt) {

		clkn += clkn_offset + 1;
		clkn_offset = 0;

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    5008:	1b00      	subs	r0, r0, r4
				do_hop = 1;
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    500a:	0780      	lsls	r0, r0, #30
    500c:	d122      	bne.n	5054 <TIMER0_IRQHandler+0xa4>
				--le.interval_timer;
    500e:	8c10      	ldrh	r0, [r2, #32]
    5010:	3801      	subs	r0, #1
    5012:	b280      	uxth	r0, r0
    5014:	8410      	strh	r0, [r2, #32]
				if (le.interval_timer == 0) {
    5016:	8c10      	ldrh	r0, [r2, #32]
    5018:	b280      	uxth	r0, r0
    501a:	b940      	cbnz	r0, 502e <TIMER0_IRQHandler+0x7e>
					do_hop = 1;
    501c:	2001      	movs	r0, #1
    501e:	72c8      	strb	r0, [r1, #11]
					++le.conn_count;
    5020:	8c91      	ldrh	r1, [r2, #36]	; 0x24
    5022:	4401      	add	r1, r0
    5024:	b289      	uxth	r1, r1
    5026:	8491      	strh	r1, [r2, #36]	; 0x24
					le.interval_timer = le.conn_interval;
    5028:	8c51      	ldrh	r1, [r2, #34]	; 0x22
    502a:	8411      	strh	r1, [r2, #32]
    502c:	e012      	b.n	5054 <TIMER0_IRQHandler+0xa4>
				} else {
					TXLED_CLR; // hack!
    502e:	4a27      	ldr	r2, [pc, #156]	; (50cc <TIMER0_IRQHandler+0x11c>)
    5030:	f44f 7180 	mov.w	r1, #256	; 0x100
    5034:	6011      	str	r1, [r2, #0]
    5036:	e00d      	b.n	5054 <TIMER0_IRQHandler+0xa4>
				}
			}
		}
		else if (hop_mode == HOP_AFH) {
    5038:	7a88      	ldrb	r0, [r1, #10]
    503a:	2805      	cmp	r0, #5
    503c:	d10a      	bne.n	5054 <TIMER0_IRQHandler+0xa4>
			if( (last_hop + hop_timeout) == clkn ) {
    503e:	4824      	ldr	r0, [pc, #144]	; (50d0 <TIMER0_IRQHandler+0x120>)
    5040:	6800      	ldr	r0, [r0, #0]
    5042:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
    5046:	681c      	ldr	r4, [r3, #0]
    5048:	b292      	uxth	r2, r2
    504a:	4402      	add	r2, r0
    504c:	42a2      	cmp	r2, r4
    504e:	d101      	bne.n	5054 <TIMER0_IRQHandler+0xa4>
				do_hop = 1;
    5050:	2201      	movs	r2, #1
    5052:	72ca      	strb	r2, [r1, #11]
			}
		}

		// Fix linear clock drift deviation
		if(clkn_next_drift_fix != 0 && clk100ns_offset == 0) {
    5054:	491f      	ldr	r1, [pc, #124]	; (50d4 <TIMER0_IRQHandler+0x124>)
    5056:	4a20      	ldr	r2, [pc, #128]	; (50d8 <TIMER0_IRQHandler+0x128>)
    5058:	6808      	ldr	r0, [r1, #0]
    505a:	b1c0      	cbz	r0, 508e <TIMER0_IRQHandler+0xde>
    505c:	8810      	ldrh	r0, [r2, #0]
    505e:	b280      	uxth	r0, r0
    5060:	b9a8      	cbnz	r0, 508e <TIMER0_IRQHandler+0xde>
			if(clkn >= clkn_next_drift_fix) {
    5062:	681c      	ldr	r4, [r3, #0]
    5064:	6808      	ldr	r0, [r1, #0]
    5066:	4284      	cmp	r4, r0
    5068:	d311      	bcc.n	508e <TIMER0_IRQHandler+0xde>

				// Too fast
				if(clk_drift_ppm >= 0) {
    506a:	481c      	ldr	r0, [pc, #112]	; (50dc <TIMER0_IRQHandler+0x12c>)
    506c:	8800      	ldrh	r0, [r0, #0]
    506e:	b200      	sxth	r0, r0
    5070:	2800      	cmp	r0, #0
					clk100ns_offset = 1;
				}

				// Too slow
				else {
					clk100ns_offset = 6249;
    5072:	bfb4      	ite	lt
    5074:	f641 0069 	movwlt	r0, #6249	; 0x1869
		if(clkn_next_drift_fix != 0 && clk100ns_offset == 0) {
			if(clkn >= clkn_next_drift_fix) {

				// Too fast
				if(clk_drift_ppm >= 0) {
					clk100ns_offset = 1;
    5078:	2001      	movge	r0, #1
				}

				// Too slow
				else {
					clk100ns_offset = 6249;
    507a:	8010      	strh	r0, [r2, #0]
				}
				clkn_last_drift_fix = clkn;
    507c:	681c      	ldr	r4, [r3, #0]
    507e:	4818      	ldr	r0, [pc, #96]	; (50e0 <TIMER0_IRQHandler+0x130>)
    5080:	6004      	str	r4, [r0, #0]
				clkn_next_drift_fix = clkn_last_drift_fix + clk_drift_correction;
    5082:	6804      	ldr	r4, [r0, #0]
    5084:	4817      	ldr	r0, [pc, #92]	; (50e4 <TIMER0_IRQHandler+0x134>)
    5086:	8800      	ldrh	r0, [r0, #0]
    5088:	b280      	uxth	r0, r0
    508a:	4420      	add	r0, r4
    508c:	6008      	str	r0, [r1, #0]
			}
		}

		// Negative clock correction
		if(clk100ns_offset > 3124)
    508e:	f640 4034 	movw	r0, #3124	; 0xc34
    5092:	8811      	ldrh	r1, [r2, #0]
    5094:	b289      	uxth	r1, r1
    5096:	4281      	cmp	r1, r0
			clkn += 2;
    5098:	bf82      	ittt	hi
    509a:	6819      	ldrhi	r1, [r3, #0]
    509c:	3102      	addhi	r1, #2
    509e:	6019      	strhi	r1, [r3, #0]

		T0MR0 = 3124 + clk100ns_offset;
    50a0:	8813      	ldrh	r3, [r2, #0]
    50a2:	4911      	ldr	r1, [pc, #68]	; (50e8 <TIMER0_IRQHandler+0x138>)
    50a4:	b29b      	uxth	r3, r3
    50a6:	f603 4334 	addw	r3, r3, #3124	; 0xc34
    50aa:	600b      	str	r3, [r1, #0]
		clk100ns_offset = 0;
    50ac:	2300      	movs	r3, #0
    50ae:	8013      	strh	r3, [r2, #0]

		/* Ack interrupt */
		T0IR = TIR_MR0_Interrupt;
    50b0:	2201      	movs	r2, #1
    50b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    50b6:	601a      	str	r2, [r3, #0]
    50b8:	bd70      	pop	{r4, r5, r6, pc}
    50ba:	bf00      	nop
    50bc:	10001240 	.word	0x10001240
    50c0:	1000124c 	.word	0x1000124c
    50c4:	10000a24 	.word	0x10000a24
    50c8:	10000448 	.word	0x10000448
    50cc:	2009c03c 	.word	0x2009c03c
    50d0:	10001228 	.word	0x10001228
    50d4:	10001704 	.word	0x10001704
    50d8:	1000139a 	.word	0x1000139a
    50dc:	100016cc 	.word	0x100016cc
    50e0:	10001244 	.word	0x10001244
    50e4:	10001248 	.word	0x10001248
    50e8:	40004018 	.word	0x40004018

000050ec <EINT3_IRQHandler>:
/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
void EINT3_IRQHandler()
{
	/* TODO - check specific source of shared interrupt */
	IO2IntClr   = PIN_GIO6; // clear interrupt
    50ec:	4b08      	ldr	r3, [pc, #32]	; (5110 <EINT3_IRQHandler+0x24>)
    50ee:	2204      	movs	r2, #4
    50f0:	601a      	str	r2, [r3, #0]
	DIO_SSEL_CLR;           // enable SPI
    50f2:	4b08      	ldr	r3, [pc, #32]	; (5114 <EINT3_IRQHandler+0x28>)
    50f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    50f8:	601a      	str	r2, [r3, #0]
	cs_trigger  = 1;        // signal trigger
    50fa:	4b07      	ldr	r3, [pc, #28]	; (5118 <EINT3_IRQHandler+0x2c>)
    50fc:	2201      	movs	r2, #1
    50fe:	701a      	strb	r2, [r3, #0]
	if (hop_mode == HOP_BLUETOOTH)
    5100:	4b06      	ldr	r3, [pc, #24]	; (511c <EINT3_IRQHandler+0x30>)
    5102:	7a9a      	ldrb	r2, [r3, #10]
    5104:	2a02      	cmp	r2, #2
		dma_discard = 0;
    5106:	bf04      	itt	eq
    5108:	2200      	moveq	r2, #0
    510a:	741a      	strbeq	r2, [r3, #16]
    510c:	4770      	bx	lr
    510e:	bf00      	nop
    5110:	400280ac 	.word	0x400280ac
    5114:	2009c09c 	.word	0x2009c09c
    5118:	10001745 	.word	0x10001745
    511c:	10000a24 	.word	0x10000a24

00005120 <legacy_DMA_IRQHandler>:
		}
	}
}

void legacy_DMA_IRQHandler()
{
    5120:	b510      	push	{r4, lr}
	if ( mode == MODE_RX_SYMBOLS
    5122:	4b28      	ldr	r3, [pc, #160]	; (51c4 <legacy_DMA_IRQHandler+0xa4>)
    5124:	7c5a      	ldrb	r2, [r3, #17]
    5126:	2a01      	cmp	r2, #1
    5128:	d011      	beq.n	514e <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_FOLLOW
    512a:	7c5a      	ldrb	r2, [r3, #17]
    512c:	2a08      	cmp	r2, #8
    512e:	d00e      	beq.n	514e <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_SPECAN
    5130:	7c5a      	ldrb	r2, [r3, #17]
    5132:	2a04      	cmp	r2, #4
    5134:	d00b      	beq.n	514e <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_FOLLOW_LE
    5136:	7c5a      	ldrb	r2, [r3, #17]
    5138:	2a09      	cmp	r2, #9
    513a:	d008      	beq.n	514e <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_PROMISC_LE
    513c:	7c5a      	ldrb	r2, [r3, #17]
    513e:	2a0a      	cmp	r2, #10
    5140:	d005      	beq.n	514e <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_BT_SLAVE_LE
    5142:	7c5a      	ldrb	r2, [r3, #17]
    5144:	2a0c      	cmp	r2, #12
    5146:	d002      	beq.n	514e <legacy_DMA_IRQHandler+0x2e>
	   || mode == MODE_RX_GENERIC)
    5148:	7c5a      	ldrb	r2, [r3, #17]
    514a:	2a0f      	cmp	r2, #15
    514c:	d139      	bne.n	51c2 <legacy_DMA_IRQHandler+0xa2>
	{
		/* interrupt on channel 0 */
		if (DMACIntStat & (1 << 0)) {
    514e:	4a1e      	ldr	r2, [pc, #120]	; (51c8 <legacy_DMA_IRQHandler+0xa8>)
    5150:	6812      	ldr	r2, [r2, #0]
    5152:	07d1      	lsls	r1, r2, #31
    5154:	d535      	bpl.n	51c2 <legacy_DMA_IRQHandler+0xa2>
			if (DMACIntTCStat & (1 << 0)) {
    5156:	4a1d      	ldr	r2, [pc, #116]	; (51cc <legacy_DMA_IRQHandler+0xac>)
    5158:	6812      	ldr	r2, [r2, #0]
    515a:	07d2      	lsls	r2, r2, #31
    515c:	d526      	bpl.n	51ac <legacy_DMA_IRQHandler+0x8c>
				DMACIntTCClear = (1 << 0);

				if (hop_mode == HOP_BLUETOOTH)
					DIO_SSEL_SET;

				idle_buf_clk100ns  = CLK100NS;
    515e:	f640 4435 	movw	r4, #3125	; 0xc35
	   || mode == MODE_RX_GENERIC)
	{
		/* interrupt on channel 0 */
		if (DMACIntStat & (1 << 0)) {
			if (DMACIntTCStat & (1 << 0)) {
				DMACIntTCClear = (1 << 0);
    5162:	4a1b      	ldr	r2, [pc, #108]	; (51d0 <legacy_DMA_IRQHandler+0xb0>)
    5164:	2101      	movs	r1, #1
    5166:	6011      	str	r1, [r2, #0]

				if (hop_mode == HOP_BLUETOOTH)
    5168:	7a9a      	ldrb	r2, [r3, #10]
					DIO_SSEL_SET;

				idle_buf_clk100ns  = CLK100NS;
    516a:	481a      	ldr	r0, [pc, #104]	; (51d4 <legacy_DMA_IRQHandler+0xb4>)
		/* interrupt on channel 0 */
		if (DMACIntStat & (1 << 0)) {
			if (DMACIntTCStat & (1 << 0)) {
				DMACIntTCClear = (1 << 0);

				if (hop_mode == HOP_BLUETOOTH)
    516c:	2a02      	cmp	r2, #2
					DIO_SSEL_SET;
    516e:	bf02      	ittt	eq
    5170:	4a19      	ldreq	r2, [pc, #100]	; (51d8 <legacy_DMA_IRQHandler+0xb8>)
    5172:	f04f 5180 	moveq.w	r1, #268435456	; 0x10000000
    5176:	6011      	streq	r1, [r2, #0]

				idle_buf_clk100ns  = CLK100NS;
    5178:	4a18      	ldr	r2, [pc, #96]	; (51dc <legacy_DMA_IRQHandler+0xbc>)
    517a:	6801      	ldr	r1, [r0, #0]
    517c:	6812      	ldr	r2, [r2, #0]
    517e:	f3c1 0113 	ubfx	r1, r1, #0, #20
    5182:	fb04 2201 	mla	r2, r4, r1, r2
    5186:	605a      	str	r2, [r3, #4]
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
    5188:	6802      	ldr	r2, [r0, #0]
    518a:	f3c2 5207 	ubfx	r2, r2, #20, #8
    518e:	709a      	strb	r2, [r3, #2]
				idle_buf_channel   = channel;
    5190:	4a13      	ldr	r2, [pc, #76]	; (51e0 <legacy_DMA_IRQHandler+0xc0>)
    5192:	8812      	ldrh	r2, [r2, #0]
    5194:	b292      	uxth	r2, r2
    5196:	811a      	strh	r2, [r3, #8]

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
    5198:	4a12      	ldr	r2, [pc, #72]	; (51e4 <legacy_DMA_IRQHandler+0xc4>)
				active_rxbuf = idle_rxbuf;
    519a:	4b13      	ldr	r3, [pc, #76]	; (51e8 <legacy_DMA_IRQHandler+0xc8>)
				idle_buf_clk100ns  = CLK100NS;
				idle_buf_clkn_high = (clkn >> 20) & 0xff;
				idle_buf_channel   = channel;

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
    519c:	6811      	ldr	r1, [r2, #0]
				active_rxbuf = idle_rxbuf;
    519e:	6818      	ldr	r0, [r3, #0]
    51a0:	6010      	str	r0, [r2, #0]
				idle_rxbuf = tmp;

				++rx_tc;
    51a2:	4a12      	ldr	r2, [pc, #72]	; (51ec <legacy_DMA_IRQHandler+0xcc>)
				idle_buf_channel   = channel;

				/* Keep buffer swapping in sync with DMA. */
				volatile uint8_t* tmp = active_rxbuf;
				active_rxbuf = idle_rxbuf;
				idle_rxbuf = tmp;
    51a4:	6019      	str	r1, [r3, #0]

				++rx_tc;
    51a6:	6813      	ldr	r3, [r2, #0]
    51a8:	3301      	adds	r3, #1
    51aa:	6013      	str	r3, [r2, #0]
			}
			if (DMACIntErrStat & (1 << 0)) {
    51ac:	4b10      	ldr	r3, [pc, #64]	; (51f0 <legacy_DMA_IRQHandler+0xd0>)
    51ae:	681b      	ldr	r3, [r3, #0]
    51b0:	07db      	lsls	r3, r3, #31
    51b2:	d506      	bpl.n	51c2 <legacy_DMA_IRQHandler+0xa2>
				DMACIntErrClr = (1 << 0);
    51b4:	4b0f      	ldr	r3, [pc, #60]	; (51f4 <legacy_DMA_IRQHandler+0xd4>)
    51b6:	2201      	movs	r2, #1
    51b8:	601a      	str	r2, [r3, #0]
				++rx_err;
    51ba:	4a0f      	ldr	r2, [pc, #60]	; (51f8 <legacy_DMA_IRQHandler+0xd8>)
    51bc:	6813      	ldr	r3, [r2, #0]
    51be:	3301      	adds	r3, #1
    51c0:	6013      	str	r3, [r2, #0]
    51c2:	bd10      	pop	{r4, pc}
    51c4:	10000a24 	.word	0x10000a24
    51c8:	50004000 	.word	0x50004000
    51cc:	50004004 	.word	0x50004004
    51d0:	50004008 	.word	0x50004008
    51d4:	1000124c 	.word	0x1000124c
    51d8:	2009c098 	.word	0x2009c098
    51dc:	40004008 	.word	0x40004008
    51e0:	10000448 	.word	0x10000448
    51e4:	1000128c 	.word	0x1000128c
    51e8:	100013a8 	.word	0x100013a8
    51ec:	1000122c 	.word	0x1000122c
    51f0:	5000400c 	.word	0x5000400c
    51f4:	50004010 	.word	0x50004010
    51f8:	10001740 	.word	0x10001740

000051fc <DMA_IRQHandler>:
	}
}

void legacy_DMA_IRQHandler();
void le_DMA_IRQHandler();
void DMA_IRQHandler(void) {
    51fc:	b508      	push	{r3, lr}
	if (mode == MODE_BT_FOLLOW_LE)
    51fe:	4b12      	ldr	r3, [pc, #72]	; (5248 <DMA_IRQHandler+0x4c>)
    5200:	7c5b      	ldrb	r3, [r3, #17]
    5202:	2b09      	cmp	r3, #9
    5204:	d102      	bne.n	520c <DMA_IRQHandler+0x10>
		le_DMA_IRQHandler();
    5206:	f002 fb2d 	bl	7864 <le_DMA_IRQHandler>
    520a:	e001      	b.n	5210 <DMA_IRQHandler+0x14>
	else
		legacy_DMA_IRQHandler();
    520c:	f7ff ff88 	bl	5120 <legacy_DMA_IRQHandler>

	// DMA channel 7: debug UART
	if (DMACIntStat & (1 << 7)) {
    5210:	4b0e      	ldr	r3, [pc, #56]	; (524c <DMA_IRQHandler+0x50>)
    5212:	681b      	ldr	r3, [r3, #0]
    5214:	0619      	lsls	r1, r3, #24
    5216:	d515      	bpl.n	5244 <DMA_IRQHandler+0x48>
		// TC -- DMA completed, unset flag so another printf can occur
		if (DMACIntTCStat & (1 << 7)) {
    5218:	4b0d      	ldr	r3, [pc, #52]	; (5250 <DMA_IRQHandler+0x54>)
    521a:	681b      	ldr	r3, [r3, #0]
    521c:	061a      	lsls	r2, r3, #24
			DMACIntTCClear = (1 << 7);
    521e:	bf41      	itttt	mi
    5220:	4b0c      	ldrmi	r3, [pc, #48]	; (5254 <DMA_IRQHandler+0x58>)
    5222:	2280      	movmi	r2, #128	; 0x80
    5224:	601a      	strmi	r2, [r3, #0]
			debug_dma_active = 0;
    5226:	4b0c      	ldrmi	r3, [pc, #48]	; (5258 <DMA_IRQHandler+0x5c>)
    5228:	bf44      	itt	mi
    522a:	2200      	movmi	r2, #0
    522c:	601a      	strmi	r2, [r3, #0]
		}
		// error -- blow up
		if (DMACIntErrStat & (1 << 7)) {
    522e:	4b0b      	ldr	r3, [pc, #44]	; (525c <DMA_IRQHandler+0x60>)
    5230:	681b      	ldr	r3, [r3, #0]
    5232:	061b      	lsls	r3, r3, #24
    5234:	d506      	bpl.n	5244 <DMA_IRQHandler+0x48>
			DMACIntErrClr = (1 << 7);
    5236:	4b0a      	ldr	r3, [pc, #40]	; (5260 <DMA_IRQHandler+0x64>)
    5238:	2280      	movs	r2, #128	; 0x80
    523a:	601a      	str	r2, [r3, #0]
			// FIXME do something better here
			USRLED_SET;
    523c:	4b09      	ldr	r3, [pc, #36]	; (5264 <DMA_IRQHandler+0x68>)
    523e:	2202      	movs	r2, #2
    5240:	601a      	str	r2, [r3, #0]
			while (1) { }
    5242:	e7fe      	b.n	5242 <DMA_IRQHandler+0x46>
    5244:	bd08      	pop	{r3, pc}
    5246:	bf00      	nop
    5248:	10000a24 	.word	0x10000a24
    524c:	50004000 	.word	0x50004000
    5250:	50004004 	.word	0x50004004
    5254:	50004008 	.word	0x50004008
    5258:	10001188 	.word	0x10001188
    525c:	5000400c 	.word	0x5000400c
    5260:	50004010 	.word	0x50004010
    5264:	2009c038 	.word	0x2009c038

00005268 <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data)
{
    5268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    526c:	b090      	sub	sp, #64	; 0x40
    526e:	4605      	mov	r5, r0
    5270:	460c      	mov	r4, r1
    5272:	4691      	mov	r9, r2
    5274:	f10d 0703 	add.w	r7, sp, #3
    5278:	f10d 32ff 	add.w	r2, sp, #4294967295	; 0xffffffff
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
    527c:	b2e8      	uxtb	r0, r5
    527e:	3201      	adds	r2, #1
		aa >>= 8;
    5280:	0a2d      	lsrs	r5, r5, #8
    5282:	2107      	movs	r1, #7
    5284:	2300      	movs	r3, #0
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
			txbuf[i] |= (byte & 1) << (7 - j);
    5286:	f000 0601 	and.w	r6, r0, #1
    528a:	408e      	lsls	r6, r1
    528c:	4333      	orrs	r3, r6
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    528e:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
			txbuf[i] |= (byte & 1) << (7 - j);
    5292:	b2db      	uxtb	r3, r3
			byte >>= 1;
    5294:	ea4f 0050 	mov.w	r0, r0, lsr #1
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    5298:	d2f5      	bcs.n	5286 <le_transmit+0x1e>
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    529a:	42ba      	cmp	r2, r7
    529c:	7013      	strb	r3, [r2, #0]
    529e:	d1ed      	bne.n	527c <le_transmit+0x14>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel)];
    52a0:	4e59      	ldr	r6, [pc, #356]	; (5408 <le_transmit+0x1a0>)
    52a2:	4f5a      	ldr	r7, [pc, #360]	; (540c <le_transmit+0x1a4>)
    52a4:	8830      	ldrh	r0, [r6, #0]
    52a6:	f10d 0a04 	add.w	sl, sp, #4
    52aa:	b280      	uxth	r0, r0
    52ac:	f001 fd30 	bl	6d10 <btle_channel_index>
	for (i = 0; i < len; ++i) {
    52b0:	46cc      	mov	ip, r9
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel)];
    52b2:	5c3b      	ldrb	r3, [r7, r0]
    52b4:	ebc9 020c 	rsb	r2, r9, ip
	for (i = 0; i < len; ++i) {
    52b8:	42a2      	cmp	r2, r4
    52ba:	d221      	bcs.n	5300 <le_transmit+0x98>
		byte = data[i];
    52bc:	f81c 2b01 	ldrb.w	r2, [ip], #1
    52c0:	f04f 0e07 	mov.w	lr, #7
    52c4:	f04f 0800 	mov.w	r8, #0
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
    52c8:	18f8      	adds	r0, r7, r3
    52ca:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
    52ce:	f002 0101 	and.w	r1, r2, #1
    52d2:	4041      	eors	r1, r0
			idx = (idx + 1) % sizeof(whitening);
    52d4:	3301      	adds	r3, #1
    52d6:	207f      	movs	r0, #127	; 0x7f
    52d8:	fbb3 f0f0 	udiv	r0, r3, r0
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
    52dc:	fa01 f10e 	lsl.w	r1, r1, lr
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
			bit = (byte & 1) ^ whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    52e0:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
    52e4:	ea41 0808 	orr.w	r8, r1, r8
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    52e8:	f11e 3eff 	adds.w	lr, lr, #4294967295	; 0xffffffff
			bit = (byte & 1) ^ whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    52ec:	eba3 0300 	sub.w	r3, r3, r0
			byte >>= 1;
    52f0:	ea4f 0252 	mov.w	r2, r2, lsr #1
			txbuf[i+4] |= bit << (7 - j);
    52f4:	fa5f f888 	uxtb.w	r8, r8
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    52f8:	d2e6      	bcs.n	52c8 <le_transmit+0x60>
    52fa:	f80a 8b01 	strb.w	r8, [sl], #1
    52fe:	e7d9      	b.n	52b4 <le_transmit+0x4c>
	}

	len += 4; // include the AA in len

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    5300:	200d      	movs	r0, #13
    5302:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5306:	f003 ffda 	bl	92be <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    530a:	2012      	movs	r0, #18
    530c:	f642 3122 	movw	r1, #11042	; 0x2b22
    5310:	f003 ffd5 	bl	92be <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5314:	2014      	movs	r0, #20
    5316:	f241 314b 	movw	r1, #4939	; 0x134b
    531a:	f003 ffd0 	bl	92be <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    531e:	2020      	movs	r0, #32
    5320:	f640 4101 	movw	r1, #3073	; 0xc01
    5324:	f003 ffcb 	bl	92be <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   channel);
    5328:	8831      	ldrh	r1, [r6, #0]
    532a:	2002      	movs	r0, #2
    532c:	b289      	uxth	r1, r1
    532e:	f003 ffc6 	bl	92be <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5332:	2005      	movs	r0, #5
    5334:	210b      	movs	r1, #11
    5336:	f003 ffc2 	bl	92be <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    533a:	2003      	movs	r0, #3
    533c:	2140      	movs	r1, #64	; 0x40
    533e:	f003 ffbe 	bl	92be <cc2400_set>
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    5342:	2114      	movs	r1, #20
    5344:	2023      	movs	r0, #35	; 0x23
    5346:	f003 ffba 	bl	92be <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    534a:	07ed      	lsls	r5, r5, #31
		cc2400_set(SYNCH,   0xaaaa);
    534c:	bf4c      	ite	mi
    534e:	f64a 21aa 	movwmi	r1, #43690	; 0xaaaa
	else
		cc2400_set(SYNCH,   0x5555);
    5352:	f245 5155 	movwpl	r1, #21845	; 0x5555
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
		cc2400_set(SYNCH,   0xaaaa);
    5356:	202d      	movs	r0, #45	; 0x2d
	else
		cc2400_set(SYNCH,   0x5555);
    5358:	f003 ffb1 	bl	92be <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    535c:	2008      	movs	r0, #8
    535e:	f003 ffa5 	bl	92ac <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5362:	f3c0 0108 	ubfx	r1, r0, #0, #9
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    5366:	3404      	adds	r4, #4
		cc2400_set(SYNCH,   0xaaaa);
	else
		cc2400_set(SYNCH,   0x5555);

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5368:	4606      	mov	r6, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    536a:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    536e:	2008      	movs	r0, #8
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    5370:	b2e4      	uxtb	r4, r4
	else
		cc2400_set(SYNCH,   0x5555);

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5372:	f003 ffa4 	bl	92be <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5376:	f004 f843 	bl	9400 <cc2400_status>
    537a:	0640      	lsls	r0, r0, #25
    537c:	d5fb      	bpl.n	5376 <le_transmit+0x10e>
	cc2400_strobe(SFSON);
    537e:	2061      	movs	r0, #97	; 0x61
    5380:	f004 f845 	bl	940e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5384:	f004 f83c 	bl	9400 <cc2400_status>
    5388:	0741      	lsls	r1, r0, #29
    538a:	d5fb      	bpl.n	5384 <le_transmit+0x11c>
	TXLED_SET;
    538c:	4b20      	ldr	r3, [pc, #128]	; (5410 <le_transmit+0x1a8>)
    538e:	f44f 7280 	mov.w	r2, #256	; 0x100
    5392:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5394:	2280      	movs	r2, #128	; 0x80
    5396:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5398:	200e      	movs	r0, #14
    539a:	f003 ff87 	bl	92ac <cc2400_get>
    539e:	f000 001f 	and.w	r0, r0, #31
    53a2:	280f      	cmp	r0, #15
    53a4:	d1f8      	bne.n	5398 <le_transmit+0x130>
	cc2400_strobe(STX);
    53a6:	2063      	movs	r0, #99	; 0x63
    53a8:	f004 f831 	bl	940e <cc2400_strobe>

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    53ac:	2500      	movs	r5, #0
    53ae:	42a5      	cmp	r5, r4
    53b0:	d20e      	bcs.n	53d0 <le_transmit+0x168>
		while (GIO6) ; // wait for the FIFO to drain (FIFO_FULL false)
    53b2:	4b18      	ldr	r3, [pc, #96]	; (5414 <le_transmit+0x1ac>)
    53b4:	681b      	ldr	r3, [r3, #0]
    53b6:	075a      	lsls	r2, r3, #29
    53b8:	d4fb      	bmi.n	53b2 <le_transmit+0x14a>
    53ba:	1b60      	subs	r0, r4, r5
    53bc:	b2c0      	uxtb	r0, r0
		tx_len = len - i;
		if (tx_len > 16)
			tx_len = 16;
		cc2400_fifo_write(tx_len, txbuf + i);
    53be:	2810      	cmp	r0, #16
    53c0:	eb0d 0105 	add.w	r1, sp, r5
    53c4:	bf28      	it	cs
    53c6:	2010      	movcs	r0, #16
    53c8:	f003 ff8c 	bl	92e4 <cc2400_fifo_write>
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    53cc:	3510      	adds	r5, #16
    53ce:	e7ee      	b.n	53ae <le_transmit+0x146>
		if (tx_len > 16)
			tx_len = 16;
		cc2400_fifo_write(tx_len, txbuf + i);
	}

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    53d0:	200e      	movs	r0, #14
    53d2:	f003 ff6b 	bl	92ac <cc2400_get>
    53d6:	f000 001f 	and.w	r0, r0, #31
    53da:	280f      	cmp	r0, #15
    53dc:	d1f8      	bne.n	53d0 <le_transmit+0x168>
	TXLED_CLR;
    53de:	4b0e      	ldr	r3, [pc, #56]	; (5418 <le_transmit+0x1b0>)
    53e0:	f44f 7280 	mov.w	r2, #256	; 0x100
    53e4:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    53e6:	2064      	movs	r0, #100	; 0x64
    53e8:	f004 f811 	bl	940e <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    53ec:	f004 f808 	bl	9400 <cc2400_status>
    53f0:	0743      	lsls	r3, r0, #29
    53f2:	d4fb      	bmi.n	53ec <le_transmit+0x184>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    53f4:	4b09      	ldr	r3, [pc, #36]	; (541c <le_transmit+0x1b4>)
    53f6:	2280      	movs	r2, #128	; 0x80
    53f8:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    53fa:	2008      	movs	r0, #8
    53fc:	4631      	mov	r1, r6
    53fe:	f003 ff5e 	bl	92be <cc2400_set>
}
    5402:	b010      	add	sp, #64	; 0x40
    5404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5408:	10000448 	.word	0x10000448
    540c:	0000a558 	.word	0x0000a558
    5410:	2009c038 	.word	0x2009c038
    5414:	2009c054 	.word	0x2009c054
    5418:	2009c03c 	.word	0x2009c03c
    541c:	2009c05c 	.word	0x2009c05c

00005420 <le_jam>:

void le_jam(void) {
    5420:	b508      	push	{r3, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    5422:	200d      	movs	r0, #13
    5424:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5428:	f003 ff49 	bl	92be <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    542c:	2012      	movs	r0, #18
    542e:	f642 3122 	movw	r1, #11042	; 0x2b22
    5432:	f003 ff44 	bl	92be <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    5436:	2014      	movs	r0, #20
    5438:	f242 314b 	movw	r1, #9035	; 0x234b
    543c:	f003 ff3f 	bl	92be <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5440:	2020      	movs	r0, #32
    5442:	f640 4101 	movw	r1, #3073	; 0xc01
    5446:	f003 ff3a 	bl	92be <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    544a:	2005      	movs	r0, #5
    544c:	210b      	movs	r1, #11
    544e:	f003 ff36 	bl	92be <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5452:	2003      	movs	r0, #3
    5454:	2140      	movs	r1, #64	; 0x40
    5456:	f003 ff32 	bl	92be <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    545a:	f003 ffd1 	bl	9400 <cc2400_status>
    545e:	0642      	lsls	r2, r0, #25
    5460:	d5fb      	bpl.n	545a <le_jam+0x3a>
	cc2400_strobe(SFSON);
    5462:	2061      	movs	r0, #97	; 0x61
    5464:	f003 ffd3 	bl	940e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5468:	f003 ffca 	bl	9400 <cc2400_status>
    546c:	0743      	lsls	r3, r0, #29
    546e:	d5fb      	bpl.n	5468 <le_jam+0x48>
	TXLED_SET;
    5470:	4b08      	ldr	r3, [pc, #32]	; (5494 <le_jam+0x74>)
    5472:	f44f 7280 	mov.w	r2, #256	; 0x100
    5476:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5478:	2280      	movs	r2, #128	; 0x80
    547a:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    547c:	200e      	movs	r0, #14
    547e:	f003 ff15 	bl	92ac <cc2400_get>
    5482:	f000 001f 	and.w	r0, r0, #31
    5486:	280f      	cmp	r0, #15
    5488:	d1f8      	bne.n	547c <le_jam+0x5c>
	cc2400_strobe(STX);
    548a:	2063      	movs	r0, #99	; 0x63
#endif
}
    548c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);
    5490:	f003 bfbd 	b.w	940e <cc2400_strobe>
    5494:	2009c038 	.word	0x2009c038

00005498 <hop>:
}

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    5498:	b538      	push	{r3, r4, r5, lr}
	do_hop = 0;
    549a:	4c5d      	ldr	r4, [pc, #372]	; (5610 <hop+0x178>)
    549c:	2300      	movs	r3, #0
    549e:	72e3      	strb	r3, [r4, #11]
	last_hop = clkn;
    54a0:	4b5c      	ldr	r3, [pc, #368]	; (5614 <hop+0x17c>)
    54a2:	4a5d      	ldr	r2, [pc, #372]	; (5618 <hop+0x180>)
    54a4:	6819      	ldr	r1, [r3, #0]
    54a6:	6011      	str	r1, [r2, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    54a8:	7aa2      	ldrb	r2, [r4, #10]
    54aa:	b94a      	cbnz	r2, 54c0 <hop+0x28>
		if (cc2400_get(FSDIV) == (channel - 1))
    54ac:	2002      	movs	r0, #2
    54ae:	f003 fefd 	bl	92ac <cc2400_get>
    54b2:	4b5a      	ldr	r3, [pc, #360]	; (561c <hop+0x184>)
    54b4:	881b      	ldrh	r3, [r3, #0]
    54b6:	b29b      	uxth	r3, r3
    54b8:	3b01      	subs	r3, #1
    54ba:	4298      	cmp	r0, r3
    54bc:	d17d      	bne.n	55ba <hop+0x122>
    54be:	bd38      	pop	{r3, r4, r5, pc}
			return;
	}
	/* Slow sweep (100 hops/sec)
	 * only hop to currently used channels if AFH is enabled
	 */
	else if (hop_mode == HOP_SWEEP) {
    54c0:	7aa2      	ldrb	r2, [r4, #10]
    54c2:	2a01      	cmp	r2, #1
    54c4:	d130      	bne.n	5528 <hop+0x90>
		do {
			channel += 32;
			if (channel > 2480)
				channel -= 79;
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    54c6:	4b56      	ldr	r3, [pc, #344]	; (5620 <hop+0x188>)
    54c8:	7819      	ldrb	r1, [r3, #0]
    54ca:	4b56      	ldr	r3, [pc, #344]	; (5624 <hop+0x18c>)
    54cc:	7818      	ldrb	r0, [r3, #0]
	/* Slow sweep (100 hops/sec)
	 * only hop to currently used channels if AFH is enabled
	 */
	else if (hop_mode == HOP_SWEEP) {
		do {
			channel += 32;
    54ce:	4a53      	ldr	r2, [pc, #332]	; (561c <hop+0x184>)
    54d0:	8813      	ldrh	r3, [r2, #0]
    54d2:	3320      	adds	r3, #32
    54d4:	b29b      	uxth	r3, r3
    54d6:	8013      	strh	r3, [r2, #0]
			if (channel > 2480)
    54d8:	8813      	ldrh	r3, [r2, #0]
    54da:	b29b      	uxth	r3, r3
    54dc:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
				channel -= 79;
    54e0:	bf81      	itttt	hi
    54e2:	8813      	ldrhhi	r3, [r2, #0]
    54e4:	3b4f      	subhi	r3, #79	; 0x4f
    54e6:	b29b      	uxthhi	r3, r3
    54e8:	8013      	strhhi	r3, [r2, #0]
		} while ( used_channels != 0 && afh_enabled && !( afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8) ) );
    54ea:	2900      	cmp	r1, #0
    54ec:	d065      	beq.n	55ba <hop+0x122>
    54ee:	2800      	cmp	r0, #0
    54f0:	d063      	beq.n	55ba <hop+0x122>
    54f2:	8813      	ldrh	r3, [r2, #0]
    54f4:	2508      	movs	r5, #8
    54f6:	b29b      	uxth	r3, r3
    54f8:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    54fc:	fb93 f3f5 	sdiv	r3, r3, r5
    5500:	8812      	ldrh	r2, [r2, #0]
    5502:	4d49      	ldr	r5, [pc, #292]	; (5628 <hop+0x190>)
    5504:	b292      	uxth	r2, r2
    5506:	5ced      	ldrb	r5, [r5, r3]
    5508:	4b48      	ldr	r3, [pc, #288]	; (562c <hop+0x194>)
    550a:	f6a2 1262 	subw	r2, r2, #2402	; 0x962
    550e:	4013      	ands	r3, r2
    5510:	2b00      	cmp	r3, #0
    5512:	bfbe      	ittt	lt
    5514:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
    5518:	f063 0307 	ornlt	r3, r3, #7
    551c:	3301      	addlt	r3, #1
    551e:	fa45 f303 	asr.w	r3, r5, r3
    5522:	07dd      	lsls	r5, r3, #31
    5524:	d5d3      	bpl.n	54ce <hop+0x36>
    5526:	e048      	b.n	55ba <hop+0x122>
	}

	/* AFH detection
	 * only hop to currently unused channesl
	 */
	else if (hop_mode == HOP_AFH) {
    5528:	7aa2      	ldrb	r2, [r4, #10]
    552a:	2a05      	cmp	r2, #5
    552c:	d12c      	bne.n	5588 <hop+0xf0>
		do {
			channel += 32;
			if (channel > 2480)
				channel -= 79;
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    552e:	4b3c      	ldr	r3, [pc, #240]	; (5620 <hop+0x188>)
    5530:	7819      	ldrb	r1, [r3, #0]
	/* AFH detection
	 * only hop to currently unused channesl
	 */
	else if (hop_mode == HOP_AFH) {
		do {
			channel += 32;
    5532:	4a3a      	ldr	r2, [pc, #232]	; (561c <hop+0x184>)
    5534:	8813      	ldrh	r3, [r2, #0]
    5536:	3320      	adds	r3, #32
    5538:	b29b      	uxth	r3, r3
    553a:	8013      	strh	r3, [r2, #0]
			if (channel > 2480)
    553c:	8813      	ldrh	r3, [r2, #0]
    553e:	b29b      	uxth	r3, r3
    5540:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
				channel -= 79;
    5544:	bf81      	itttt	hi
    5546:	8813      	ldrhhi	r3, [r2, #0]
    5548:	3b4f      	subhi	r3, #79	; 0x4f
    554a:	b29b      	uxthhi	r3, r3
    554c:	8013      	strhhi	r3, [r2, #0]
		} while( used_channels != 79 && (afh_map[(channel-2402)/8] & 0x1<<((channel-2402)%8)) );
    554e:	294f      	cmp	r1, #79	; 0x4f
    5550:	d033      	beq.n	55ba <hop+0x122>
    5552:	8813      	ldrh	r3, [r2, #0]
    5554:	2008      	movs	r0, #8
    5556:	b29b      	uxth	r3, r3
    5558:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    555c:	fb93 f3f0 	sdiv	r3, r3, r0
    5560:	8812      	ldrh	r2, [r2, #0]
    5562:	4831      	ldr	r0, [pc, #196]	; (5628 <hop+0x190>)
    5564:	b292      	uxth	r2, r2
    5566:	5cc0      	ldrb	r0, [r0, r3]
    5568:	4b30      	ldr	r3, [pc, #192]	; (562c <hop+0x194>)
    556a:	f6a2 1262 	subw	r2, r2, #2402	; 0x962
    556e:	4013      	ands	r3, r2
    5570:	2b00      	cmp	r3, #0
    5572:	bfbe      	ittt	lt
    5574:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
    5578:	f063 0307 	ornlt	r3, r3, #7
    557c:	3301      	addlt	r3, #1
    557e:	fa40 f303 	asr.w	r3, r0, r3
    5582:	07d8      	lsls	r0, r3, #31
    5584:	d4d5      	bmi.n	5532 <hop+0x9a>
    5586:	e018      	b.n	55ba <hop+0x122>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    5588:	7aa2      	ldrb	r2, [r4, #10]
    558a:	2a02      	cmp	r2, #2
    558c:	d105      	bne.n	559a <hop+0x102>
		channel = next_hop(clkn);
    558e:	6818      	ldr	r0, [r3, #0]
    5590:	f001 fb1e 	bl	6bd0 <next_hop>
    5594:	4b21      	ldr	r3, [pc, #132]	; (561c <hop+0x184>)
    5596:	8018      	strh	r0, [r3, #0]
    5598:	e00f      	b.n	55ba <hop+0x122>
	}

	else if (hop_mode == HOP_BTLE) {
    559a:	7aa3      	ldrb	r3, [r4, #10]
    559c:	2b03      	cmp	r3, #3
    559e:	d105      	bne.n	55ac <hop+0x114>
		channel = btle_next_hop(&le);
    55a0:	4d1e      	ldr	r5, [pc, #120]	; (561c <hop+0x184>)
    55a2:	1d28      	adds	r0, r5, #4
    55a4:	f001 fbe4 	bl	6d70 <btle_next_hop>
    55a8:	8028      	strh	r0, [r5, #0]
    55aa:	e006      	b.n	55ba <hop+0x122>
	}

	else if (hop_mode == HOP_DIRECT) {
    55ac:	7aa3      	ldrb	r3, [r4, #10]
    55ae:	2b04      	cmp	r3, #4
		channel = hop_direct_channel;
    55b0:	bf01      	itttt	eq
    55b2:	89a3      	ldrheq	r3, [r4, #12]
    55b4:	4a19      	ldreq	r2, [pc, #100]	; (561c <hop+0x184>)
    55b6:	b29b      	uxtheq	r3, r3
    55b8:	8013      	strheq	r3, [r2, #0]
	}
	/* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    55ba:	2064      	movs	r0, #100	; 0x64
    55bc:	f003 ff27 	bl	940e <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    55c0:	f003 ff1e 	bl	9400 <cc2400_status>
    55c4:	0742      	lsls	r2, r0, #29
    55c6:	d4fb      	bmi.n	55c0 <hop+0x128>

	/* Retune */
	if(mode == MODE_TX_SYMBOLS)
    55c8:	7c60      	ldrb	r0, [r4, #17]
    55ca:	4d14      	ldr	r5, [pc, #80]	; (561c <hop+0x184>)
    55cc:	b2c0      	uxtb	r0, r0
		cc2400_set(FSDIV, channel);
    55ce:	8829      	ldrh	r1, [r5, #0]
	/* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?

	/* Retune */
	if(mode == MODE_TX_SYMBOLS)
    55d0:	2802      	cmp	r0, #2
		cc2400_set(FSDIV, channel);
	else
		cc2400_set(FSDIV, channel - 1);
    55d2:	bf1c      	itt	ne
    55d4:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
    55d8:	2002      	movne	r0, #2
    55da:	b289      	uxth	r1, r1
    55dc:	f003 fe6f 	bl	92be <cc2400_set>

	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    55e0:	7aa3      	ldrb	r3, [r4, #10]
    55e2:	b11b      	cbz	r3, 55ec <hop+0x154>
		cs_threshold_calc_and_set(channel);
    55e4:	8828      	ldrh	r0, [r5, #0]
    55e6:	b280      	uxth	r0, r0
    55e8:	f001 fdf2 	bl	71d0 <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    55ec:	2061      	movs	r0, #97	; 0x61
    55ee:	f003 ff0e 	bl	940e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    55f2:	f003 ff05 	bl	9400 <cc2400_status>
    55f6:	0743      	lsls	r3, r0, #29
    55f8:	d5fb      	bpl.n	55f2 <hop+0x15a>

	dma_discard = 1;
    55fa:	2301      	movs	r3, #1
    55fc:	7423      	strb	r3, [r4, #16]

	if(mode == MODE_TX_SYMBOLS)
    55fe:	7c63      	ldrb	r3, [r4, #17]
    5600:	2b02      	cmp	r3, #2
		cc2400_strobe(STX);
    5602:	bf0c      	ite	eq
    5604:	2063      	moveq	r0, #99	; 0x63
	else
		cc2400_strobe(SRX);
    5606:	2062      	movne	r0, #98	; 0x62
}
    5608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	dma_discard = 1;

	if(mode == MODE_TX_SYMBOLS)
		cc2400_strobe(STX);
	else
		cc2400_strobe(SRX);
    560c:	f003 beff 	b.w	940e <cc2400_strobe>
    5610:	10000a24 	.word	0x10000a24
    5614:	1000124c 	.word	0x1000124c
    5618:	10001228 	.word	0x10001228
    561c:	10000448 	.word	0x10000448
    5620:	10001231 	.word	0x10001231
    5624:	100016cf 	.word	0x100016cf
    5628:	10001233 	.word	0x10001233
    562c:	80000007 	.word	0x80000007

00005630 <bt_stream_rx>:
}

/* Bluetooth packet monitoring */
void bt_stream_rx()
{
    5630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int8_t rssi;
	int8_t rssi_at_trigger;

	RXLED_CLR;
    5634:	4e4a      	ldr	r6, [pc, #296]	; (5760 <bt_stream_rx+0x130>)
    5636:	2310      	movs	r3, #16
    5638:	6033      	str	r3, [r6, #0]

	usb_queue_init();
    563a:	f001 fcdb 	bl	6ff4 <usb_queue_init>
	dio_ssp_init();
    563e:	f003 fdaf 	bl	91a0 <dio_ssp_init>
	dma_init_rx_symbols();
    5642:	f001 feb1 	bl	73a8 <dma_init_rx_symbols>
	dio_ssp_start();
    5646:	f001 ff2f 	bl	74a8 <dio_ssp_start>

	cc2400_rx();
    564a:	f7fe fe91 	bl	4370 <cc2400_rx>

	cs_trigger_enable();
    564e:	f001 fdf1 	bl	7234 <cs_trigger_enable>

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    5652:	4c44      	ldr	r4, [pc, #272]	; (5764 <bt_stream_rx+0x134>)
    5654:	7ca3      	ldrb	r3, [r4, #18]
    5656:	46a0      	mov	r8, r4
    5658:	2b01      	cmp	r3, #1
    565a:	d178      	bne.n	574e <bt_stream_rx+0x11e>
	{

		RXLED_CLR;
    565c:	2310      	movs	r3, #16
    565e:	6033      	str	r3, [r6, #0]
		 * cover all the symbols in a DMA transfer. Can not do
		 * RSSI sampling in CS interrupt, but could log time
		 * at multiple trigger points there. The MAX() below
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
    5660:	f001 fd3e 	bl	70e0 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    5664:	2580      	movs	r5, #128	; 0x80
		while (!rx_tc) {
    5666:	4b40      	ldr	r3, [pc, #256]	; (5768 <bt_stream_rx+0x138>)
    5668:	f8df a120 	ldr.w	sl, [pc, #288]	; 578c <bt_stream_rx+0x15c>
    566c:	681a      	ldr	r2, [r3, #0]
    566e:	4f3f      	ldr	r7, [pc, #252]	; (576c <bt_stream_rx+0x13c>)
    5670:	4699      	mov	r9, r3
    5672:	bb1a      	cbnz	r2, 56bc <bt_stream_rx+0x8c>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5674:	2006      	movs	r0, #6
    5676:	f003 fe19 	bl	92ac <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    567a:	f89a 3000 	ldrb.w	r3, [sl]
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while (!rx_tc) {
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    567e:	f3c0 2007 	ubfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5682:	b15b      	cbz	r3, 569c <bt_stream_rx+0x6c>
    5684:	2d80      	cmp	r5, #128	; 0x80
    5686:	d109      	bne.n	569c <bt_stream_rx+0x6c>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5688:	4b39      	ldr	r3, [pc, #228]	; (5770 <bt_stream_rx+0x140>)
    568a:	b240      	sxtb	r0, r0
    568c:	f993 5000 	ldrsb.w	r5, [r3]
    5690:	3536      	adds	r5, #54	; 0x36
    5692:	42a8      	cmp	r0, r5
    5694:	bfb8      	it	lt
    5696:	4628      	movlt	r0, r5
    5698:	b2c5      	uxtb	r5, r0
				rssi_at_trigger = rssi;
    569a:	4628      	mov	r0, r5
			}
			rssi_add(rssi);
    569c:	b240      	sxtb	r0, r0
    569e:	f001 fd3b 	bl	7118 <rssi_add>

			handle_usb(clkn);
    56a2:	6838      	ldr	r0, [r7, #0]
    56a4:	f001 fd08 	bl	70b8 <handle_usb>

			/* If timer says time to hop, do it. */
			if (do_hop) {
    56a8:	f898 300b 	ldrb.w	r3, [r8, #11]
    56ac:	b113      	cbz	r3, 56b4 <bt_stream_rx+0x84>
				hop();
    56ae:	f7ff fef3 	bl	5498 <hop>
    56b2:	e7d8      	b.n	5666 <bt_stream_rx+0x36>
			} else {
				TXLED_CLR;
    56b4:	f44f 7380 	mov.w	r3, #256	; 0x100
    56b8:	6033      	str	r3, [r6, #0]
    56ba:	e7d4      	b.n	5666 <bt_stream_rx+0x36>
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    56bc:	4b2d      	ldr	r3, [pc, #180]	; (5774 <bt_stream_rx+0x144>)
    56be:	2210      	movs	r2, #16

		if (rx_err) {
    56c0:	4d2d      	ldr	r5, [pc, #180]	; (5778 <bt_stream_rx+0x148>)
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    56c2:	601a      	str	r2, [r3, #0]

		if (rx_err) {
    56c4:	682b      	ldr	r3, [r5, #0]
    56c6:	b11b      	cbz	r3, 56d0 <bt_stream_rx+0xa0>
			status |= DMA_ERROR;
    56c8:	7863      	ldrb	r3, [r4, #1]
    56ca:	f043 0302 	orr.w	r3, r3, #2
    56ce:	7063      	strb	r3, [r4, #1]
		}

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    56d0:	f8d9 3000 	ldr.w	r3, [r9]
    56d4:	2b01      	cmp	r3, #1
			status |= DMA_OVERFLOW;
    56d6:	bf82      	ittt	hi
    56d8:	7863      	ldrbhi	r3, [r4, #1]
    56da:	f043 0301 	orrhi.w	r3, r3, #1
    56de:	7063      	strbhi	r3, [r4, #1]

		if (dma_discard) {
    56e0:	7c22      	ldrb	r2, [r4, #16]
    56e2:	4b20      	ldr	r3, [pc, #128]	; (5764 <bt_stream_rx+0x134>)
    56e4:	b12a      	cbz	r2, 56f2 <bt_stream_rx+0xc2>
			status |= DISCARD;
    56e6:	785a      	ldrb	r2, [r3, #1]
    56e8:	f042 0220 	orr.w	r2, r2, #32
    56ec:	705a      	strb	r2, [r3, #1]
			dma_discard = 0;
    56ee:	2200      	movs	r2, #0
    56f0:	741a      	strb	r2, [r3, #16]
		}

		rssi_iir_update(channel);
    56f2:	4b22      	ldr	r3, [pc, #136]	; (577c <bt_stream_rx+0x14c>)
    56f4:	8818      	ldrh	r0, [r3, #0]
    56f6:	b280      	uxth	r0, r0
    56f8:	f001 fd2e 	bl	7158 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    56fc:	f89a 3000 	ldrb.w	r3, [sl]
    5700:	b913      	cbnz	r3, 5708 <bt_stream_rx+0xd8>
    5702:	4b1f      	ldr	r3, [pc, #124]	; (5780 <bt_stream_rx+0x150>)
    5704:	781b      	ldrb	r3, [r3, #0]
    5706:	b133      	cbz	r3, 5716 <bt_stream_rx+0xe6>
			status |= CS_TRIGGER;
    5708:	7863      	ldrb	r3, [r4, #1]
    570a:	f043 0308 	orr.w	r3, r3, #8
    570e:	7063      	strb	r3, [r4, #1]
			cs_trigger = 0;
    5710:	2300      	movs	r3, #0
    5712:	f88a 3000 	strb.w	r3, [sl]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    5716:	4b16      	ldr	r3, [pc, #88]	; (5770 <bt_stream_rx+0x140>)
    5718:	4a1a      	ldr	r2, [pc, #104]	; (5784 <bt_stream_rx+0x154>)
    571a:	f993 3000 	ldrsb.w	r3, [r3]
    571e:	f992 2000 	ldrsb.w	r2, [r2]
    5722:	3335      	adds	r3, #53	; 0x35
    5724:	4293      	cmp	r3, r2
			status |= RSSI_TRIGGER;
    5726:	bfb8      	it	lt
    5728:	7863      	ldrblt	r3, [r4, #1]
		}

		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    572a:	f04f 0000 	mov.w	r0, #0
			status |= CS_TRIGGER;
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
    572e:	bfbc      	itt	lt
    5730:	f043 0310 	orrlt.w	r3, r3, #16
    5734:	7063      	strblt	r3, [r4, #1]
		}

		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    5736:	4b14      	ldr	r3, [pc, #80]	; (5788 <bt_stream_rx+0x158>)
    5738:	6819      	ldr	r1, [r3, #0]
    573a:	f7fe fec1 	bl	44c0 <enqueue>

		handle_usb(clkn);
    573e:	6838      	ldr	r0, [r7, #0]
    5740:	f001 fcba 	bl	70b8 <handle_usb>
		rx_tc = 0;
    5744:	2300      	movs	r3, #0
    5746:	f8c9 3000 	str.w	r3, [r9]
		rx_err = 0;
    574a:	602b      	str	r3, [r5, #0]
    574c:	e781      	b.n	5652 <bt_stream_rx+0x22>

	cc2400_rx();

	cs_trigger_enable();

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    574e:	7ca3      	ldrb	r3, [r4, #18]
    5750:	2b08      	cmp	r3, #8
    5752:	d083      	beq.n	565c <bt_stream_rx+0x2c>
		handle_usb(clkn);
		rx_tc = 0;
		rx_err = 0;
	}

	dio_ssp_stop();
    5754:	f001 fec8 	bl	74e8 <dio_ssp_stop>
	cs_trigger_disable();
}
    5758:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		rx_tc = 0;
		rx_err = 0;
	}

	dio_ssp_stop();
	cs_trigger_disable();
    575c:	f001 bd82 	b.w	7264 <cs_trigger_disable>
    5760:	2009c03c 	.word	0x2009c03c
    5764:	10000a24 	.word	0x10000a24
    5768:	1000122c 	.word	0x1000122c
    576c:	1000124c 	.word	0x1000124c
    5770:	10001744 	.word	0x10001744
    5774:	2009c038 	.word	0x2009c038
    5778:	10001740 	.word	0x10001740
    577c:	10000448 	.word	0x10000448
    5780:	10001398 	.word	0x10001398
    5784:	10001230 	.word	0x10001230
    5788:	100013a8 	.word	0x100013a8
    578c:	10001745 	.word	0x10001745

00005790 <br_transmit>:
 * Transmit a BTBR packet with the specified access code.
 *
 * All modulation parameters are set within this function.
 */
void br_transmit()
{
    5790:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    5794:	4b93      	ldr	r3, [pc, #588]	; (59e4 <br_transmit+0x254>)
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    5796:	2700      	movs	r7, #0
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    5798:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
    579c:	2300      	movs	r3, #0
    579e:	f004 0201 	and.w	r2, r4, #1
    57a2:	4313      	orrs	r3, r2
    57a4:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    57a8:	ea4f 76d5 	mov.w	r6, r5, lsr #31
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
    57ac:	f245 5855 	movw	r8, #21845	; 0x5555
    57b0:	bf08      	it	eq
    57b2:	4698      	moveq	r8, r3
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    57b4:	2f00      	cmp	r7, #0
    57b6:	bf08      	it	eq
    57b8:	2e01      	cmpeq	r6, #1

	uint8_t data[16] = {
		reverse8((target.syncword >> 0) & 0xFF),
    57ba:	b2e0      	uxtb	r0, r4
	uint16_t gio_save;

	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;
    57bc:	bf0c      	ite	eq
    57be:	26aa      	moveq	r6, #170	; 0xaa
    57c0:	2655      	movne	r6, #85	; 0x55

	uint8_t data[16] = {
		reverse8((target.syncword >> 0) & 0xFF),
    57c2:	f7fe fdc3 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57c6:	f88d 0000 	strb.w	r0, [sp]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
    57ca:	f3c4 2007 	ubfx	r0, r4, #8, #8
    57ce:	f7fe fdbd 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57d2:	f88d 0001 	strb.w	r0, [sp, #1]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
    57d6:	f3c4 4007 	ubfx	r0, r4, #16, #8
    57da:	f7fe fdb7 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57de:	f88d 0002 	strb.w	r0, [sp, #2]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
    57e2:	0e20      	lsrs	r0, r4, #24
    57e4:	f7fe fdb2 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57e8:	f88d 0003 	strb.w	r0, [sp, #3]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
    57ec:	b2e8      	uxtb	r0, r5
    57ee:	f7fe fdad 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57f2:	f88d 0004 	strb.w	r0, [sp, #4]
		reverse8((target.syncword >> 0) & 0xFF),
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
    57f6:	f3c5 2007 	ubfx	r0, r5, #8, #8
    57fa:	f7fe fda7 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    57fe:	f88d 0005 	strb.w	r0, [sp, #5]
		reverse8((target.syncword >> 8) & 0xFF),
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
    5802:	f3c5 4007 	ubfx	r0, r5, #16, #8
    5806:	f7fe fda1 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    580a:	f88d 0006 	strb.w	r0, [sp, #6]
		reverse8((target.syncword >> 16) & 0xFF),
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
    580e:	0e28      	lsrs	r0, r5, #24
    5810:	f7fe fd9c 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5814:	f88d 0007 	strb.w	r0, [sp, #7]
		reverse8((target.syncword >> 24) & 0xFF),
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
    5818:	4630      	mov	r0, r6
    581a:	f7fe fd97 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    581e:	f88d 0008 	strb.w	r0, [sp, #8]
		reverse8((target.syncword >> 32) & 0xFF),
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
    5822:	2077      	movs	r0, #119	; 0x77
    5824:	f7fe fd92 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5828:	f88d 0009 	strb.w	r0, [sp, #9]
		reverse8((target.syncword >> 40) & 0xFF),
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
    582c:	2066      	movs	r0, #102	; 0x66
    582e:	f7fe fd8d 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5832:	f88d 000a 	strb.w	r0, [sp, #10]
		reverse8((target.syncword >> 48) & 0xFF),
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
    5836:	2055      	movs	r0, #85	; 0x55
    5838:	f7fe fd88 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    583c:	f88d 000b 	strb.w	r0, [sp, #11]
		reverse8((target.syncword >> 56) & 0xFF),
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
    5840:	2044      	movs	r0, #68	; 0x44
    5842:	f7fe fd83 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5846:	f88d 000c 	strb.w	r0, [sp, #12]
		reverse8(trailer),
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
    584a:	2033      	movs	r0, #51	; 0x33
    584c:	f7fe fd7e 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5850:	f88d 000d 	strb.w	r0, [sp, #13]
		reverse8(0x77),
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
		reverse8(0x22),
    5854:	2022      	movs	r0, #34	; 0x22
    5856:	f7fe fd79 	bl	434c <reverse8>
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    585a:	f88d 000e 	strb.w	r0, [sp, #14]
		reverse8(0x66),
		reverse8(0x55),
		reverse8(0x44),
		reverse8(0x33),
		reverse8(0x22),
		reverse8(0x11)
    585e:	2011      	movs	r0, #17
    5860:	f7fe fd74 	bl	434c <reverse8>
	return reversed;
}

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;
    5864:	463c      	mov	r4, r7

	for(size_t i=0; i<16; i++)
    5866:	463b      	mov	r3, r7
	uint32_t clkn_saved = 0;

	uint16_t preamble = (target.syncword & 1) == 1 ? 0x5555 : 0xaaaa;
	uint8_t trailer = ((target.syncword >> 63) & 1) == 1 ? 0xaa : 0x55;

	uint8_t data[16] = {
    5868:	f88d 000f 	strb.w	r0, [sp, #15]
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    586c:	fa48 f203 	asr.w	r2, r8, r3
    5870:	f1c3 010f 	rsb	r1, r3, #15
    5874:	f002 0201 	and.w	r2, r2, #1
    5878:	408a      	lsls	r2, r1

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    587a:	3301      	adds	r3, #1
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    587c:	4314      	orrs	r4, r2

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    587e:	2b10      	cmp	r3, #16
	{
		reversed |= ((data >> i) & 0x01) << (15-i);
    5880:	b2a4      	uxth	r4, r4

static uint16_t reverse16(uint16_t data)
{
	uint16_t reversed = 0;

	for(size_t i=0; i<16; i++)
    5882:	d1f3      	bne.n	586c <br_transmit+0xdc>
/* start buffered tx */
static void cc2400_tx_sync(uint32_t sync)
{
#ifdef TX_ENABLE
	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    5884:	200d      	movs	r0, #13
    5886:	f647 71ff 	movw	r1, #32767	; 0x7fff
    588a:	f003 fd18 	bl	92be <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    588e:	2012      	movs	r0, #18
    5890:	f642 3122 	movw	r1, #11042	; 0x2b22
    5894:	f003 fd13 	bl	92be <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5898:	2014      	movs	r0, #20
    589a:	f241 314b 	movw	r1, #4939	; 0x134b
    589e:	f003 fd0e 	bl	92be <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    58a2:	2020      	movs	r0, #32
    58a4:	f640 4101 	movw	r1, #3073	; 0xc01
    58a8:	f003 fd09 	bl	92be <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(SYNCL,   sync & 0xffff);
    58ac:	4621      	mov	r1, r4
    58ae:	202c      	movs	r0, #44	; 0x2c
    58b0:	f003 fd05 	bl	92be <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    58b4:	202d      	movs	r0, #45	; 0x2d
    58b6:	2100      	movs	r1, #0
    58b8:	f003 fd01 	bl	92be <cc2400_set>

	cc2400_set(FSDIV,   channel);
    58bc:	4b4a      	ldr	r3, [pc, #296]	; (59e8 <br_transmit+0x258>)
    58be:	2002      	movs	r0, #2
    58c0:	8819      	ldrh	r1, [r3, #0]
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)

	if (modulation == MOD_BT_BASIC_RATE) {
    58c2:	4c4a      	ldr	r4, [pc, #296]	; (59ec <br_transmit+0x25c>)
	//      +--------------------> buffered mode

	cc2400_set(SYNCL,   sync & 0xffff);
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);

	cc2400_set(FSDIV,   channel);
    58c4:	b289      	uxth	r1, r1
    58c6:	f003 fcfa 	bl	92be <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    58ca:	2005      	movs	r0, #5
    58cc:	210b      	movs	r1, #11
    58ce:	f003 fcf6 	bl	92be <cc2400_set>

	if (modulation == MOD_BT_BASIC_RATE) {
    58d2:	7823      	ldrb	r3, [r4, #0]
    58d4:	b913      	cbnz	r3, 58dc <br_transmit+0x14c>
		cc2400_set(MDMCTRL, 0x0029);    // 160 kHz frequency deviation
    58d6:	2003      	movs	r0, #3
    58d8:	2129      	movs	r1, #41	; 0x29
    58da:	e004      	b.n	58e6 <br_transmit+0x156>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    58dc:	7823      	ldrb	r3, [r4, #0]
    58de:	2b01      	cmp	r3, #1
    58e0:	d11d      	bne.n	591e <br_transmit+0x18e>
		cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    58e2:	2003      	movs	r0, #3
    58e4:	2140      	movs	r1, #64	; 0x40
    58e6:	f003 fcea 	bl	92be <cc2400_set>
	} else {
		/* oops */
		return;
	}

	clkn_start();
    58ea:	f001 fd0d 	bl	7308 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    58ee:	f003 fd87 	bl	9400 <cc2400_status>
    58f2:	0645      	lsls	r5, r0, #25
    58f4:	d5fb      	bpl.n	58ee <br_transmit+0x15e>
	cc2400_strobe(SFSON);
    58f6:	2061      	movs	r0, #97	; 0x61
    58f8:	f003 fd89 	bl	940e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    58fc:	f003 fd80 	bl	9400 <cc2400_status>
    5900:	0740      	lsls	r0, r0, #29
    5902:	d5fb      	bpl.n	58fc <br_transmit+0x16c>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5904:	4b3a      	ldr	r3, [pc, #232]	; (59f0 <br_transmit+0x260>)
    5906:	2280      	movs	r2, #128	; 0x80
    5908:	601a      	str	r2, [r3, #0]
#endif

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    590a:	200e      	movs	r0, #14
    590c:	f003 fcce 	bl	92ac <cc2400_get>
    5910:	f000 001f 	and.w	r0, r0, #31
    5914:	280f      	cmp	r0, #15
    5916:	d1f8      	bne.n	590a <br_transmit+0x17a>
	cc2400_strobe(STX);
    5918:	2063      	movs	r0, #99	; 0x63
    591a:	f003 fd78 	bl	940e <cc2400_strobe>
		reverse8(0x11)
	};

	cc2400_tx_sync(reverse16(preamble));

	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes
    591e:	2114      	movs	r1, #20
    5920:	2023      	movs	r0, #35	; 0x23
    5922:	f003 fccc 	bl	92be <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5926:	2008      	movs	r0, #8
    5928:	f003 fcc0 	bl	92ac <cc2400_get>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    592c:	f3c0 0108 	ubfx	r1, r0, #0, #9
	cc2400_tx_sync(reverse16(preamble));

	cc2400_set(INT,     0x0014);    // FIFO_THRESHOLD: 20 bytes

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5930:	4607      	mov	r7, r0
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5932:	f441 419c 	orr.w	r1, r1, #19968	; 0x4e00
    5936:	2008      	movs	r0, #8
    5938:	f003 fcc1 	bl	92be <cc2400_set>
 */
void br_transmit()
{
	uint16_t gio_save;

	uint32_t clkn_saved = 0;
    593c:	2600      	movs	r6, #0

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while ( requested_mode == MODE_TX_SYMBOLS )
    593e:	7ca3      	ldrb	r3, [r4, #18]
    5940:	2b02      	cmp	r3, #2
    5942:	d145      	bne.n	59d0 <br_transmit+0x240>
	{

		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    5944:	0876      	lsrs	r6, r6, #1
    5946:	4d2b      	ldr	r5, [pc, #172]	; (59f4 <br_transmit+0x264>)
    5948:	682b      	ldr	r3, [r5, #0]
    594a:	ebb6 0f53 	cmp.w	r6, r3, lsr #1
    594e:	d105      	bne.n	595c <br_transmit+0x1cc>

			// If timer says time to hop, do it.
			if (do_hop) {
    5950:	7ae3      	ldrb	r3, [r4, #11]
    5952:	2b00      	cmp	r3, #0
    5954:	d0f7      	beq.n	5946 <br_transmit+0x1b6>
				hop();
    5956:	f7ff fd9f 	bl	5498 <hop>
    595a:	e7f4      	b.n	5946 <br_transmit+0x1b6>
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));

	while ( requested_mode == MODE_TX_SYMBOLS )
	{

		while ((clkn >> 1) == (clkn_saved >> 1) || T0TC < 2250) {
    595c:	4b26      	ldr	r3, [pc, #152]	; (59f8 <br_transmit+0x268>)
    595e:	681a      	ldr	r2, [r3, #0]
    5960:	f640 03c9 	movw	r3, #2249	; 0x8c9
    5964:	429a      	cmp	r2, r3
    5966:	d9f3      	bls.n	5950 <br_transmit+0x1c0>
			}
		}

		clkn_saved = clkn;

		TXLED_SET;
    5968:	4b24      	ldr	r3, [pc, #144]	; (59fc <br_transmit+0x26c>)
    596a:	f44f 7280 	mov.w	r2, #256	; 0x100
			if (do_hop) {
				hop();
			}
		}

		clkn_saved = clkn;
    596e:	682e      	ldr	r6, [r5, #0]

		TXLED_SET;

		cc2400_fifo_write(16, data);
    5970:	2010      	movs	r0, #16
			}
		}

		clkn_saved = clkn;

		TXLED_SET;
    5972:	601a      	str	r2, [r3, #0]

		cc2400_fifo_write(16, data);
    5974:	4669      	mov	r1, sp
    5976:	f003 fcb5 	bl	92e4 <cc2400_fifo_write>

		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    597a:	200e      	movs	r0, #14
    597c:	f003 fc96 	bl	92ac <cc2400_get>
    5980:	f000 001f 	and.w	r0, r0, #31
    5984:	280f      	cmp	r0, #15
    5986:	d1f8      	bne.n	597a <br_transmit+0x1ea>
		TXLED_CLR;
    5988:	4b1d      	ldr	r3, [pc, #116]	; (5a00 <br_transmit+0x270>)
    598a:	f44f 7280 	mov.w	r2, #256	; 0x100
    598e:	601a      	str	r2, [r3, #0]

		cc2400_strobe(SRFOFF);
    5990:	2064      	movs	r0, #100	; 0x64
    5992:	f003 fd3c 	bl	940e <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    5996:	f003 fd33 	bl	9400 <cc2400_status>
    599a:	0741      	lsls	r1, r0, #29
    599c:	d4fb      	bmi.n	5996 <br_transmit+0x206>

		while (!(cc2400_status() & XOSC16M_STABLE));
    599e:	f003 fd2f 	bl	9400 <cc2400_status>
    59a2:	0642      	lsls	r2, r0, #25
    59a4:	d5fb      	bpl.n	599e <br_transmit+0x20e>
		cc2400_strobe(SFSON);
    59a6:	2061      	movs	r0, #97	; 0x61
    59a8:	f003 fd31 	bl	940e <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    59ac:	f003 fd28 	bl	9400 <cc2400_status>
    59b0:	0743      	lsls	r3, r0, #29
    59b2:	d5fb      	bpl.n	59ac <br_transmit+0x21c>

		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    59b4:	200e      	movs	r0, #14
    59b6:	f003 fc79 	bl	92ac <cc2400_get>
    59ba:	f000 001f 	and.w	r0, r0, #31
    59be:	280f      	cmp	r0, #15
    59c0:	d1f8      	bne.n	59b4 <br_transmit+0x224>
		cc2400_strobe(STX);
    59c2:	2063      	movs	r0, #99	; 0x63
    59c4:	f003 fd23 	bl	940e <cc2400_strobe>

		handle_usb(clkn);
    59c8:	6828      	ldr	r0, [r5, #0]
    59ca:	f001 fb75 	bl	70b8 <handle_usb>
    59ce:	e7b6      	b.n	593e <br_transmit+0x1ae>
	}

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    59d0:	4b0c      	ldr	r3, [pc, #48]	; (5a04 <br_transmit+0x274>)
    59d2:	2280      	movs	r2, #128	; 0x80
    59d4:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    59d6:	2008      	movs	r0, #8
    59d8:	4639      	mov	r1, r7
    59da:	f003 fc70 	bl	92be <cc2400_set>
}
    59de:	b004      	add	sp, #16
    59e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59e4:	10001748 	.word	0x10001748
    59e8:	10000448 	.word	0x10000448
    59ec:	10000a24 	.word	0x10000a24
    59f0:	2009c058 	.word	0x2009c058
    59f4:	1000124c 	.word	0x1000124c
    59f8:	40004008 	.word	0x40004008
    59fc:	2009c038 	.word	0x2009c038
    5a00:	2009c03c 	.word	0x2009c03c
    5a04:	2009c05c 	.word	0x2009c05c

00005a08 <reset_le>:
	le.syncl = aa_rev & 0xffff;
	le.synch = aa_rev >> 16;
}

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    5a08:	b508      	push	{r3, lr}
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    5a0a:	480f      	ldr	r0, [pc, #60]	; (5a48 <reset_le+0x40>)
    5a0c:	f7fe fda4 	bl	4558 <le_set_access_address>
	le.crc_init  = 0x555555;               // advertising channel CRCInit
    5a10:	4b0e      	ldr	r3, [pc, #56]	; (5a4c <reset_le+0x44>)
    5a12:	4a0f      	ldr	r2, [pc, #60]	; (5a50 <reset_le+0x48>)
    5a14:	60da      	str	r2, [r3, #12]
	le.crc_init_reversed = 0xAAAAAA;
    5a16:	4a0f      	ldr	r2, [pc, #60]	; (5a54 <reset_le+0x4c>)
    5a18:	611a      	str	r2, [r3, #16]
	le.crc_verify = 0;
    5a1a:	2200      	movs	r2, #0

	le.channel_idx = 0;
	le.channel_increment = 0;

	le.conn_epoch = 0;
	le.interval_timer = 0;
    5a1c:	841a      	strh	r2, [r3, #32]
/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
	le_set_access_address(0x8e89bed6);     // advertising channel access address
	le.crc_init  = 0x555555;               // advertising channel CRCInit
	le.crc_init_reversed = 0xAAAAAA;
	le.crc_verify = 0;
    5a1e:	615a      	str	r2, [r3, #20]

	le.conn_epoch = 0;
	le.interval_timer = 0;
	le.conn_interval = 0;
	le.conn_interval = 0;
	le.conn_count = 0;
    5a20:	849a      	strh	r2, [r3, #36]	; 0x24
void reset_le() {
	le_set_access_address(0x8e89bed6);     // advertising channel access address
	le.crc_init  = 0x555555;               // advertising channel CRCInit
	le.crc_init_reversed = 0xAAAAAA;
	le.crc_verify = 0;
	le.last_packet = 0;
    5a22:	64da      	str	r2, [r3, #76]	; 0x4c

	le.link_state = LINK_INACTIVE;
    5a24:	761a      	strb	r2, [r3, #24]

	le.channel_idx = 0;
    5a26:	765a      	strb	r2, [r3, #25]
	le.channel_increment = 0;
    5a28:	769a      	strb	r2, [r3, #26]

	le.conn_epoch = 0;
    5a2a:	61da      	str	r2, [r3, #28]
	le.interval_timer = 0;
	le.conn_interval = 0;
    5a2c:	845a      	strh	r2, [r3, #34]	; 0x22
	le.conn_interval = 0;
	le.conn_count = 0;

	le.win_size = 0;
    5a2e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	le.win_offset = 0;
    5a32:	851a      	strh	r2, [r3, #40]	; 0x28

	le.update_pending = 0;
    5a34:	62da      	str	r2, [r3, #44]	; 0x2c
	le.update_instant = 0;
    5a36:	861a      	strh	r2, [r3, #48]	; 0x30
	le.interval_update = 0;
    5a38:	865a      	strh	r2, [r3, #50]	; 0x32
	le.win_size_update = 0;
    5a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	le.win_offset_update = 0;
    5a3e:	86da      	strh	r2, [r3, #54]	; 0x36

	do_hop = 0;
    5a40:	4b05      	ldr	r3, [pc, #20]	; (5a58 <reset_le+0x50>)
    5a42:	72da      	strb	r2, [r3, #11]
    5a44:	bd08      	pop	{r3, pc}
    5a46:	bf00      	nop
    5a48:	8e89bed6 	.word	0x8e89bed6
    5a4c:	10000448 	.word	0x10000448
    5a50:	00555555 	.word	0x00555555
    5a54:	00aaaaaa 	.word	0x00aaaaaa
    5a58:	10000a24 	.word	0x10000a24

00005a5c <reset_le_promisc>:
}

// reset LE Promisc state
void reset_le_promisc(void) {
    5a5c:	b510      	push	{r4, lr}
	memset(&le_promisc, 0, sizeof(le_promisc));
    5a5e:	4c06      	ldr	r4, [pc, #24]	; (5a78 <reset_le_promisc+0x1c>)
    5a60:	2100      	movs	r1, #0
    5a62:	4620      	mov	r0, r4
    5a64:	f44f 7284 	mov.w	r2, #264	; 0x108
    5a68:	f7fe fbc6 	bl	41f8 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    5a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a70:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    5a74:	bd10      	pop	{r4, pc}
    5a76:	bf00      	nop
    5a78:	10001290 	.word	0x10001290

00005a7c <bt_generic_le>:
}

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    5a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    5a80:	4c6a      	ldr	r4, [pc, #424]	; (5c2c <bt_generic_le+0x1b0>)
    5a82:	2301      	movs	r3, #1
	le_promisc.smallest_hop_interval = 0xffffffff;
}

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    5a84:	4682      	mov	sl, r0
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    5a86:	7023      	strb	r3, [r4, #0]
	mode = active_mode;
    5a88:	7460      	strb	r0, [r4, #17]

	reset_le();
    5a8a:	f7ff ffbd 	bl	5a08 <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5a8e:	4b68      	ldr	r3, [pc, #416]	; (5c30 <bt_generic_le+0x1b4>)
    5a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000

	RXLED_CLR;
    5a94:	4f67      	ldr	r7, [pc, #412]	; (5c34 <bt_generic_le+0x1b8>)
	mode = active_mode;

	reset_le();

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5a96:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    5a98:	2310      	movs	r3, #16
    5a9a:	603b      	str	r3, [r7, #0]

	usb_queue_init();
    5a9c:	f001 faaa 	bl	6ff4 <usb_queue_init>
	dio_ssp_init();
    5aa0:	f003 fb7e 	bl	91a0 <dio_ssp_init>
	dma_init_rx_symbols();
    5aa4:	f001 fc80 	bl	73a8 <dma_init_rx_symbols>
	dio_ssp_start();
    5aa8:	f001 fcfe 	bl	74a8 <dio_ssp_start>
	cc2400_rx();
    5aac:	f7fe fc60 	bl	4370 <cc2400_rx>

	cs_trigger_enable();
    5ab0:	f001 fbc0 	bl	7234 <cs_trigger_enable>

	hold = 0;
    5ab4:	2600      	movs	r6, #0

	while (requested_mode == active_mode) {
    5ab6:	7ca3      	ldrb	r3, [r4, #18]
    5ab8:	4553      	cmp	r3, sl
    5aba:	f040 80a5 	bne.w	5c08 <bt_generic_le+0x18c>
		if (requested_channel != 0) {
    5abe:	4b5b      	ldr	r3, [pc, #364]	; (5c2c <bt_generic_le+0x1b0>)
    5ac0:	89db      	ldrh	r3, [r3, #14]
    5ac2:	b29b      	uxth	r3, r3
    5ac4:	b1cb      	cbz	r3, 5afa <bt_generic_le+0x7e>
			cc2400_strobe(SRFOFF);
    5ac6:	2064      	movs	r0, #100	; 0x64
    5ac8:	f003 fca1 	bl	940e <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5acc:	f003 fc98 	bl	9400 <cc2400_status>
    5ad0:	0742      	lsls	r2, r0, #29
    5ad2:	d4fb      	bmi.n	5acc <bt_generic_le+0x50>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    5ad4:	4b58      	ldr	r3, [pc, #352]	; (5c38 <bt_generic_le+0x1bc>)
    5ad6:	2002      	movs	r0, #2
    5ad8:	8819      	ldrh	r1, [r3, #0]
    5ada:	3901      	subs	r1, #1
    5adc:	b289      	uxth	r1, r1
    5ade:	f003 fbee 	bl	92be <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    5ae2:	2061      	movs	r0, #97	; 0x61
    5ae4:	f003 fc93 	bl	940e <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5ae8:	f003 fc8a 	bl	9400 <cc2400_status>
    5aec:	0743      	lsls	r3, r0, #29
    5aee:	d5fb      	bpl.n	5ae8 <bt_generic_le+0x6c>

			/* RX mode */
			cc2400_strobe(SRX);
    5af0:	2062      	movs	r0, #98	; 0x62
    5af2:	f003 fc8c 	bl	940e <cc2400_strobe>

			requested_channel = 0;
    5af6:	2300      	movs	r3, #0
    5af8:	81e3      	strh	r3, [r4, #14]
		}

		if (do_hop) {
    5afa:	7ae3      	ldrb	r3, [r4, #11]
    5afc:	b113      	cbz	r3, 5b04 <bt_generic_le+0x88>
			hop();
    5afe:	f7ff fccb 	bl	5498 <hop>
    5b02:	e002      	b.n	5b0a <bt_generic_le+0x8e>
		} else {
			TXLED_CLR;
    5b04:	f44f 7380 	mov.w	r3, #256	; 0x100
    5b08:	603b      	str	r3, [r7, #0]
		}

		RXLED_CLR;
    5b0a:	2310      	movs	r3, #16
    5b0c:	603b      	str	r3, [r7, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    5b0e:	f001 fae7 	bl	70e0 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    5b12:	2580      	movs	r5, #128	; 0x80
		while ((rx_tc == 0) && (rx_err == 0))
    5b14:	4b49      	ldr	r3, [pc, #292]	; (5c3c <bt_generic_le+0x1c0>)
    5b16:	f8df 9144 	ldr.w	r9, [pc, #324]	; 5c5c <bt_generic_le+0x1e0>
    5b1a:	681a      	ldr	r2, [r3, #0]
    5b1c:	4698      	mov	r8, r3
    5b1e:	b9d2      	cbnz	r2, 5b56 <bt_generic_le+0xda>
    5b20:	f8d9 3000 	ldr.w	r3, [r9]
    5b24:	b9bb      	cbnz	r3, 5b56 <bt_generic_le+0xda>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5b26:	2006      	movs	r0, #6
    5b28:	f003 fbc0 	bl	92ac <cc2400_get>
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5b2c:	4b44      	ldr	r3, [pc, #272]	; (5c40 <bt_generic_le+0x1c4>)
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5b2e:	f3c0 2007 	ubfx	r0, r0, #8, #8
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    5b32:	781b      	ldrb	r3, [r3, #0]
    5b34:	b15b      	cbz	r3, 5b4e <bt_generic_le+0xd2>
    5b36:	2d80      	cmp	r5, #128	; 0x80
    5b38:	d109      	bne.n	5b4e <bt_generic_le+0xd2>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    5b3a:	4b42      	ldr	r3, [pc, #264]	; (5c44 <bt_generic_le+0x1c8>)
    5b3c:	b240      	sxtb	r0, r0
    5b3e:	f993 5000 	ldrsb.w	r5, [r3]
    5b42:	3536      	adds	r5, #54	; 0x36
    5b44:	42a8      	cmp	r0, r5
    5b46:	bfb8      	it	lt
    5b48:	4628      	movlt	r0, r5
    5b4a:	b2c5      	uxtb	r5, r0
				rssi_at_trigger = rssi;
    5b4c:	4628      	mov	r0, r5
			}
			rssi_add(rssi);
    5b4e:	b240      	sxtb	r0, r0
    5b50:	f001 fae2 	bl	7118 <rssi_add>
    5b54:	e7de      	b.n	5b14 <bt_generic_le+0x98>
		}

		if (rx_err) {
    5b56:	f8d9 3000 	ldr.w	r3, [r9]
    5b5a:	b11b      	cbz	r3, 5b64 <bt_generic_le+0xe8>
			status |= DMA_ERROR;
    5b5c:	7863      	ldrb	r3, [r4, #1]
    5b5e:	f043 0302 	orr.w	r3, r3, #2
    5b62:	7063      	strb	r3, [r4, #1]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    5b64:	f8d8 3000 	ldr.w	r3, [r8]
    5b68:	2b00      	cmp	r3, #0
    5b6a:	d059      	beq.n	5c20 <bt_generic_le+0x1a4>
			goto rx_continue;

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    5b6c:	4b33      	ldr	r3, [pc, #204]	; (5c3c <bt_generic_le+0x1c0>)
    5b6e:	681b      	ldr	r3, [r3, #0]
    5b70:	2b01      	cmp	r3, #1
			status |= DMA_OVERFLOW;
    5b72:	bf82      	ittt	hi
    5b74:	7863      	ldrbhi	r3, [r4, #1]
    5b76:	f043 0301 	orrhi.w	r3, r3, #1
    5b7a:	7063      	strbhi	r3, [r4, #1]

		rssi_iir_update(channel);
    5b7c:	4b2e      	ldr	r3, [pc, #184]	; (5c38 <bt_generic_le+0x1bc>)
    5b7e:	8818      	ldrh	r0, [r3, #0]
    5b80:	b280      	uxth	r0, r0
    5b82:	f001 fae9 	bl	7158 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    5b86:	4a2e      	ldr	r2, [pc, #184]	; (5c40 <bt_generic_le+0x1c4>)
    5b88:	7813      	ldrb	r3, [r2, #0]
    5b8a:	b913      	cbnz	r3, 5b92 <bt_generic_le+0x116>
    5b8c:	4b2e      	ldr	r3, [pc, #184]	; (5c48 <bt_generic_le+0x1cc>)
    5b8e:	781b      	ldrb	r3, [r3, #0]
    5b90:	b133      	cbz	r3, 5ba0 <bt_generic_le+0x124>
			status |= CS_TRIGGER;
    5b92:	7863      	ldrb	r3, [r4, #1]
			hold = CS_HOLD_TIME;
    5b94:	2602      	movs	r6, #2
		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
			status |= CS_TRIGGER;
    5b96:	f043 0308 	orr.w	r3, r3, #8
    5b9a:	7063      	strb	r3, [r4, #1]
			hold = CS_HOLD_TIME;
			cs_trigger = 0;
    5b9c:	2300      	movs	r3, #0
    5b9e:	7013      	strb	r3, [r2, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    5ba0:	4b28      	ldr	r3, [pc, #160]	; (5c44 <bt_generic_le+0x1c8>)
    5ba2:	4a2a      	ldr	r2, [pc, #168]	; (5c4c <bt_generic_le+0x1d0>)
    5ba4:	f993 3000 	ldrsb.w	r3, [r3]
    5ba8:	f992 2000 	ldrsb.w	r2, [r2]
    5bac:	3335      	adds	r3, #53	; 0x35
    5bae:	4293      	cmp	r3, r2
    5bb0:	da05      	bge.n	5bbe <bt_generic_le+0x142>
			status |= RSSI_TRIGGER;
    5bb2:	7863      	ldrb	r3, [r4, #1]
			hold = CS_HOLD_TIME;
    5bb4:	2602      	movs	r6, #2
			hold = CS_HOLD_TIME;
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
    5bb6:	f043 0310 	orr.w	r3, r3, #16
    5bba:	7063      	strb	r3, [r4, #1]
    5bbc:	e000      	b.n	5bc0 <bt_generic_le+0x144>
			hold = CS_HOLD_TIME;
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    5bbe:	b37e      	cbz	r6, 5c20 <bt_generic_le+0x1a4>
			goto rx_continue;
		}
		hold--;

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5bc0:	4823      	ldr	r0, [pc, #140]	; (5c50 <bt_generic_le+0x1d4>)
    5bc2:	f44f 72c8 	mov.w	r2, #400	; 0x190

		/* Hold expired? Ignore data. */
		if (hold == 0) {
			goto rx_continue;
		}
		hold--;
    5bc6:	3e01      	subs	r6, #1

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    5bc8:	f500 71c8 	add.w	r1, r0, #400	; 0x190
    5bcc:	f004 fc1c 	bl	a408 <memcpy>

		/* Hold expired? Ignore data. */
		if (hold == 0) {
			goto rx_continue;
		}
		hold--;
    5bd0:	b2f6      	uxtb	r6, r6

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    5bd2:	2200      	movs	r2, #0
    5bd4:	4b1e      	ldr	r3, [pc, #120]	; (5c50 <bt_generic_le+0x1d4>)
    5bd6:	f102 0032 	add.w	r0, r2, #50	; 0x32
    5bda:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
			cs_trigger = 0;
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
			status |= RSSI_TRIGGER;
			hold = CS_HOLD_TIME;
    5bde:	2100      	movs	r1, #0

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5be0:	4d1c      	ldr	r5, [pc, #112]	; (5c54 <bt_generic_le+0x1d8>)
    5be2:	682b      	ldr	r3, [r5, #0]
    5be4:	5c9b      	ldrb	r3, [r3, r2]
				idle_rxbuf[i] <<= 1;
    5be6:	682d      	ldr	r5, [r5, #0]

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    5be8:	09db      	lsrs	r3, r3, #7
    5bea:	5443      	strb	r3, [r0, r1]
				idle_rxbuf[i] <<= 1;
    5bec:	5cab      	ldrb	r3, [r5, r2]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5bee:	3101      	adds	r1, #1
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
    5bf0:	005b      	lsls	r3, r3, #1
    5bf2:	b2db      	uxtb	r3, r3
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5bf4:	2908      	cmp	r1, #8
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
    5bf6:	54ab      	strb	r3, [r5, r2]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    5bf8:	d1f2      	bne.n	5be0 <bt_generic_le+0x164>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    5bfa:	3201      	adds	r2, #1
    5bfc:	2a32      	cmp	r2, #50	; 0x32
    5bfe:	d1e9      	bne.n	5bd4 <bt_generic_le+0x158>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    5c00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5c02:	4813      	ldr	r0, [pc, #76]	; (5c50 <bt_generic_le+0x1d4>)
    5c04:	4798      	blx	r3
		if (!ret) break;
    5c06:	b958      	cbnz	r0, 5c20 <bt_generic_le+0x1a4>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    5c08:	4b13      	ldr	r3, [pc, #76]	; (5c58 <bt_generic_le+0x1dc>)
    5c0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5c0e:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    5c10:	f7fe fcae 	bl	4570 <cc2400_idle>
	dio_ssp_stop();
    5c14:	f001 fc68 	bl	74e8 <dio_ssp_stop>
	cs_trigger_disable();
}
    5c18:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ICER0 = ICER0_ICE_USB;

	// reset the radio completely
	cc2400_idle();
	dio_ssp_stop();
	cs_trigger_disable();
    5c1c:	f001 bb22 	b.w	7264 <cs_trigger_disable>

		int ret = data_cb(unpacked);
		if (!ret) break;

	rx_continue:
		rx_tc = 0;
    5c20:	2300      	movs	r3, #0
    5c22:	f8c8 3000 	str.w	r3, [r8]
		rx_err = 0;
    5c26:	f8c9 3000 	str.w	r3, [r9]
    5c2a:	e744      	b.n	5ab6 <bt_generic_le+0x3a>
    5c2c:	10000a24 	.word	0x10000a24
    5c30:	e000e100 	.word	0xe000e100
    5c34:	2009c03c 	.word	0x2009c03c
    5c38:	10000448 	.word	0x10000448
    5c3c:	1000122c 	.word	0x1000122c
    5c40:	10001745 	.word	0x10001745
    5c44:	10001744 	.word	0x10001744
    5c48:	10001398 	.word	0x10001398
    5c4c:	10001230 	.word	0x10001230
    5c50:	100013ac 	.word	0x100013ac
    5c54:	100013a8 	.word	0x100013a8
    5c58:	e000e180 	.word	0xe000e180
    5c5c:	10001740 	.word	0x10001740

00005c60 <bt_le_sync>:
	cs_trigger_disable();
}


void bt_le_sync(u8 active_mode)
{
    5c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c64:	b093      	sub	sp, #76	; 0x4c
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    5c66:	4da7      	ldr	r5, [pc, #668]	; (5f04 <bt_le_sync+0x2a4>)
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5c68:	4ca7      	ldr	r4, [pc, #668]	; (5f08 <bt_le_sync+0x2a8>)
{
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    5c6a:	2301      	movs	r3, #1
    5c6c:	702b      	strb	r3, [r5, #0]
	mode = active_mode;

	le.link_state = LINK_LISTENING;
    5c6e:	7623      	strb	r3, [r4, #24]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5c70:	4ba6      	ldr	r3, [pc, #664]	; (5f0c <bt_le_sync+0x2ac>)
    5c72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000

	RXLED_CLR;
    5c76:	4ea6      	ldr	r6, [pc, #664]	; (5f10 <bt_le_sync+0x2b0>)
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
	mode = active_mode;
    5c78:	7468      	strb	r0, [r5, #17]

	le.link_state = LINK_LISTENING;

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    5c7a:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    5c7c:	2310      	movs	r3, #16
    5c7e:	6033      	str	r3, [r6, #0]
	cs_trigger_disable();
}


void bt_le_sync(u8 active_mode)
{
    5c80:	4680      	mov	r8, r0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;

	RXLED_CLR;

	usb_queue_init();
    5c82:	f001 f9b7 	bl	6ff4 <usb_queue_init>
	dio_ssp_init();
    5c86:	f003 fa8b 	bl	91a0 <dio_ssp_init>
	dma_init_le();
    5c8a:	f001 fbd1 	bl	7430 <dma_init_le>
	dio_ssp_start();
    5c8e:	f001 fc0b 	bl	74a8 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    5c92:	6860      	ldr	r0, [r4, #4]
    5c94:	f003 fa20 	bl	90d8 <rbit>
    5c98:	f7fe fbbc 	bl	4414 <cc2400_rx_sync>
    5c9c:	46b1      	mov	r9, r6

	while (requested_mode == active_mode) {
    5c9e:	7cab      	ldrb	r3, [r5, #18]
    5ca0:	4543      	cmp	r3, r8
    5ca2:	f040 81a2 	bne.w	5fea <bt_le_sync+0x38a>
		if (requested_channel != 0) {
    5ca6:	4b97      	ldr	r3, [pc, #604]	; (5f04 <bt_le_sync+0x2a4>)
    5ca8:	89db      	ldrh	r3, [r3, #14]
    5caa:	b29b      	uxth	r3, r3
    5cac:	b1c3      	cbz	r3, 5ce0 <bt_le_sync+0x80>
			cc2400_strobe(SRFOFF);
    5cae:	2064      	movs	r0, #100	; 0x64
    5cb0:	f003 fbad 	bl	940e <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5cb4:	f003 fba4 	bl	9400 <cc2400_status>
    5cb8:	0747      	lsls	r7, r0, #29
    5cba:	d4fb      	bmi.n	5cb4 <bt_le_sync+0x54>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    5cbc:	8821      	ldrh	r1, [r4, #0]
    5cbe:	2002      	movs	r0, #2
    5cc0:	3901      	subs	r1, #1
    5cc2:	b289      	uxth	r1, r1
    5cc4:	f003 fafb 	bl	92be <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    5cc8:	2061      	movs	r0, #97	; 0x61
    5cca:	f003 fba0 	bl	940e <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    5cce:	f003 fb97 	bl	9400 <cc2400_status>
    5cd2:	0746      	lsls	r6, r0, #29
    5cd4:	d5fb      	bpl.n	5cce <bt_le_sync+0x6e>

			/* RX mode */
			cc2400_strobe(SRX);
    5cd6:	2062      	movs	r0, #98	; 0x62
    5cd8:	f003 fb99 	bl	940e <cc2400_strobe>

			requested_channel = 0;
    5cdc:	2300      	movs	r3, #0
    5cde:	81eb      	strh	r3, [r5, #14]
		}

		RXLED_CLR;
    5ce0:	2310      	movs	r3, #16
    5ce2:	f8c9 3000 	str.w	r3, [r9]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    5ce6:	f001 f9fb 	bl	70e0 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    5cea:	4b8a      	ldr	r3, [pc, #552]	; (5f14 <bt_le_sync+0x2b4>)
    5cec:	681a      	ldr	r2, [r3, #0]
    5cee:	469a      	mov	sl, r3
    5cf0:	b942      	cbnz	r2, 5d04 <bt_le_sync+0xa4>
    5cf2:	4b89      	ldr	r3, [pc, #548]	; (5f18 <bt_le_sync+0x2b8>)
    5cf4:	681b      	ldr	r3, [r3, #0]
    5cf6:	b92b      	cbnz	r3, 5d04 <bt_le_sync+0xa4>
    5cf8:	7aeb      	ldrb	r3, [r5, #11]
    5cfa:	b91b      	cbnz	r3, 5d04 <bt_le_sync+0xa4>
    5cfc:	4b81      	ldr	r3, [pc, #516]	; (5f04 <bt_le_sync+0x2a4>)
    5cfe:	7c9b      	ldrb	r3, [r3, #18]
    5d00:	4543      	cmp	r3, r8
    5d02:	d0f2      	beq.n	5cea <bt_le_sync+0x8a>
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5d04:	2006      	movs	r0, #6
    5d06:	f003 fad1 	bl	92ac <cc2400_get>
		rssi_min = rssi_max = rssi;
    5d0a:	4b84      	ldr	r3, [pc, #528]	; (5f1c <bt_le_sync+0x2bc>)
		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    5d0c:	f3c0 2007 	ubfx	r0, r0, #8, #8
		rssi_min = rssi_max = rssi;
    5d10:	7018      	strb	r0, [r3, #0]
    5d12:	4b83      	ldr	r3, [pc, #524]	; (5f20 <bt_le_sync+0x2c0>)

		if (requested_mode != active_mode) {
    5d14:	4a7b      	ldr	r2, [pc, #492]	; (5f04 <bt_le_sync+0x2a4>)
		rssi_reset();
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
		rssi_min = rssi_max = rssi;
    5d16:	7018      	strb	r0, [r3, #0]

		if (requested_mode != active_mode) {
    5d18:	7cab      	ldrb	r3, [r5, #18]
    5d1a:	4543      	cmp	r3, r8
    5d1c:	f040 8165 	bne.w	5fea <bt_le_sync+0x38a>
			goto cleanup;
		}

		if (rx_err) {
    5d20:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 5f18 <bt_le_sync+0x2b8>
    5d24:	f8db 3000 	ldr.w	r3, [fp]
    5d28:	46dc      	mov	ip, fp
    5d2a:	b11b      	cbz	r3, 5d34 <bt_le_sync+0xd4>
			status |= DMA_ERROR;
    5d2c:	7853      	ldrb	r3, [r2, #1]
    5d2e:	f043 0302 	orr.w	r3, r3, #2
    5d32:	7053      	strb	r3, [r2, #1]
		}

		if (do_hop)
    5d34:	7aeb      	ldrb	r3, [r5, #11]
    5d36:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    5d3a:	2b00      	cmp	r3, #0
    5d3c:	f040 80a5 	bne.w	5e8a <bt_le_sync+0x22a>
			goto rx_flush;

		/* No DMA transfer? */
		if (!rx_tc)
    5d40:	f8da 3000 	ldr.w	r3, [sl]
    5d44:	2b00      	cmp	r3, #0
    5d46:	d0aa      	beq.n	5c9e <bt_le_sync+0x3e>
			continue;

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
    5d48:	2234      	movs	r2, #52	; 0x34
    5d4a:	a805      	add	r0, sp, #20
    5d4c:	f8cd c00c 	str.w	ip, [sp, #12]
    5d50:	f7fe fa52 	bl	41f8 <memset>
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel)];
    5d54:	8820      	ldrh	r0, [r4, #0]
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    5d56:	6863      	ldr	r3, [r4, #4]

		const uint32_t *whit = whitening_word[btle_channel_index(channel)];
    5d58:	b280      	uxth	r0, r0
		/////////////////////
		// process the packet

		uint32_t packet[48/4+1] = { 0, };
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;
    5d5a:	9305      	str	r3, [sp, #20]

		const uint32_t *whit = whitening_word[btle_channel_index(channel)];
    5d5c:	f000 ffd8 	bl	6d10 <btle_channel_index>
    5d60:	2630      	movs	r6, #48	; 0x30
    5d62:	4346      	muls	r6, r0
    5d64:	4f6f      	ldr	r7, [pc, #444]	; (5f24 <bt_le_sync+0x2c4>)
    5d66:	19bb      	adds	r3, r7, r6
    5d68:	9301      	str	r3, [sp, #4]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    5d6a:	4b6f      	ldr	r3, [pc, #444]	; (5f28 <bt_le_sync+0x2c8>)
    5d6c:	7818      	ldrb	r0, [r3, #0]
					   | rxbuf1[i+1] << 16
    5d6e:	785a      	ldrb	r2, [r3, #1]
					   | rxbuf1[i+2] << 8
    5d70:	f893 e002 	ldrb.w	lr, [r3, #2]
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5d74:	0412      	lsls	r2, r2, #16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
    5d76:	78d9      	ldrb	r1, [r3, #3]
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
    5d78:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
    5d7c:	4308      	orrs	r0, r1
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5d7e:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
		const uint32_t *whit = whitening_word[btle_channel_index(channel)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
    5d82:	9302      	str	r3, [sp, #8]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5d84:	f003 f9a8 	bl	90d8 <rbit>
    5d88:	59be      	ldr	r6, [r7, r6]
		}

		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    5d8a:	9b02      	ldr	r3, [sp, #8]
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5d8c:	4070      	eors	r0, r6
		}

		unsigned len = (p[5] & 0x3f) + 2;
    5d8e:	f3c0 2605 	ubfx	r6, r0, #8, #6
    5d92:	1cb7      	adds	r7, r6, #2
		if (len > 39)
    5d94:	2f27      	cmp	r7, #39	; 0x27
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5d96:	9006      	str	r0, [sp, #24]
		}

		unsigned len = (p[5] & 0x3f) + 2;
		if (len > 39)
    5d98:	f8dd c00c 	ldr.w	ip, [sp, #12]
    5d9c:	dc75      	bgt.n	5e8a <bt_le_sync+0x22a>
			goto rx_flush;

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    5d9e:	3608      	adds	r6, #8
    5da0:	08b2      	lsrs	r2, r6, #2
		if (total_transfers < 11) {
    5da2:	2a0b      	cmp	r2, #11
    5da4:	d00d      	beq.n	5dc2 <bt_le_sync+0x162>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    5da6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5daa:	4a60      	ldr	r2, [pc, #384]	; (5f2c <bt_le_sync+0x2cc>)
    5dac:	6812      	ldr	r2, [r2, #0]
    5dae:	429a      	cmp	r2, r3
    5db0:	d20b      	bcs.n	5dca <bt_le_sync+0x16a>
    5db2:	f8dc 2000 	ldr.w	r2, [ip]
    5db6:	2a00      	cmp	r2, #0
    5db8:	d0f7      	beq.n	5daa <bt_le_sync+0x14a>
    5dba:	e006      	b.n	5dca <bt_le_sync+0x16a>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    5dbc:	f8dc 3000 	ldr.w	r3, [ip]
    5dc0:	b91b      	cbnz	r3, 5dca <bt_le_sync+0x16a>
    5dc2:	4b5b      	ldr	r3, [pc, #364]	; (5f30 <bt_le_sync+0x2d0>)
    5dc4:	681b      	ldr	r3, [r3, #0]
    5dc6:	07d8      	lsls	r0, r3, #31
    5dc8:	d4f8      	bmi.n	5dbc <bt_le_sync+0x15c>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5dca:	4a5a      	ldr	r2, [pc, #360]	; (5f34 <bt_le_sync+0x2d4>)

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    5dcc:	2061      	movs	r0, #97	; 0x61
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5dce:	6813      	ldr	r3, [r2, #0]
    5dd0:	f023 0301 	bic.w	r3, r3, #1
    5dd4:	6013      	str	r3, [r2, #0]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);
    5dd6:	f003 fb1a 	bl	940e <cc2400_strobe>

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5dda:	2304      	movs	r3, #4
			uint32_t v = rxbuf1[i+0] << 24
    5ddc:	4952      	ldr	r1, [pc, #328]	; (5f28 <bt_le_sync+0x2c8>)
    5dde:	1c58      	adds	r0, r3, #1
    5de0:	5cca      	ldrb	r2, [r1, r3]
    5de2:	f103 0e03 	add.w	lr, r3, #3
					   | rxbuf1[i+1] << 16
    5de6:	f811 c000 	ldrb.w	ip, [r1, r0]
    5dea:	1c98      	adds	r0, r3, #2
					   | rxbuf1[i+2] << 8
    5dec:	5c08      	ldrb	r0, [r1, r0]
					   | rxbuf1[i+3] << 0;
    5dee:	f811 e00e 	ldrb.w	lr, [r1, lr]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5df2:	1099      	asrs	r1, r3, #2
    5df4:	ea4e 6202 	orr.w	r2, lr, r2, lsl #24
    5df8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    5dfc:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
    5e00:	9303      	str	r3, [sp, #12]
    5e02:	9102      	str	r1, [sp, #8]
    5e04:	f003 f968 	bl	90d8 <rbit>
    5e08:	9902      	ldr	r1, [sp, #8]
    5e0a:	ab12      	add	r3, sp, #72	; 0x48
    5e0c:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
    5e10:	9b01      	ldr	r3, [sp, #4]
    5e12:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5e16:	9b03      	ldr	r3, [sp, #12]
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e18:	4050      	eors	r0, r2

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5e1a:	3304      	adds	r3, #4
    5e1c:	2b2c      	cmp	r3, #44	; 0x2c
			uint32_t v = rxbuf1[i+0] << 24
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    5e1e:	f84e 0c30 	str.w	r0, [lr, #-48]

		// strobe SFSON to allow the resync to occur while we process the packet
		cc2400_strobe(SFSON);

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    5e22:	d1db      	bne.n	5ddc <bt_le_sync+0x17c>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    5e24:	6963      	ldr	r3, [r4, #20]
    5e26:	b9db      	cbnz	r3, 5e60 <bt_le_sync+0x200>
			if (calc_crc != wire_crc) // skip packets with a bad CRC
				goto rx_flush;
		}


		RXLED_SET;
    5e28:	4b43      	ldr	r3, [pc, #268]	; (5f38 <bt_le_sync+0x2d8>)
    5e2a:	2210      	movs	r2, #16
    5e2c:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    5e2e:	a805      	add	r0, sp, #20
    5e30:	69ab      	ldr	r3, [r5, #24]
    5e32:	4798      	blx	r3

		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
    5e34:	4b41      	ldr	r3, [pc, #260]	; (5f3c <bt_le_sync+0x2dc>)
    5e36:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    5e3a:	601e      	str	r6, [r3, #0]
		enqueue(LE_PACKET, (uint8_t *)packet);
    5e3c:	a905      	add	r1, sp, #20
    5e3e:	2001      	movs	r0, #1
    5e40:	f7fe fb3e 	bl	44c0 <enqueue>
		ISER0 = ISER0_ISE_USB;

		le.last_packet = CLK100NS;
    5e44:	f640 4135 	movw	r1, #3125	; 0xc35
		packet_cb((uint8_t *)packet);

		// disable USB interrupts while we touch USB data structures
		ICER0 = ICER0_ICE_USB;
		enqueue(LE_PACKET, (uint8_t *)packet);
		ISER0 = ISER0_ISE_USB;
    5e48:	4b30      	ldr	r3, [pc, #192]	; (5f0c <bt_le_sync+0x2ac>)
    5e4a:	601e      	str	r6, [r3, #0]

		le.last_packet = CLK100NS;
    5e4c:	4b3c      	ldr	r3, [pc, #240]	; (5f40 <bt_le_sync+0x2e0>)
    5e4e:	681a      	ldr	r2, [r3, #0]
    5e50:	4b3c      	ldr	r3, [pc, #240]	; (5f44 <bt_le_sync+0x2e4>)
    5e52:	f3c2 0213 	ubfx	r2, r2, #0, #20
    5e56:	681b      	ldr	r3, [r3, #0]
    5e58:	fb01 3302 	mla	r3, r1, r2, r3
    5e5c:	64e3      	str	r3, [r4, #76]	; 0x4c
    5e5e:	e014      	b.n	5e8a <bt_le_sync+0x22a>
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    5e60:	4b29      	ldr	r3, [pc, #164]	; (5f08 <bt_le_sync+0x2a8>)
    5e62:	463a      	mov	r2, r7
    5e64:	6918      	ldr	r0, [r3, #16]
    5e66:	a906      	add	r1, sp, #24
    5e68:	f000 ffd8 	bl	6e1c <btle_crcgen_lut>
			u32 wire_crc = (p[4+len+2] << 16)
    5e6c:	ab12      	add	r3, sp, #72	; 0x48
						 | (p[4+len+1] << 8)
    5e6e:	441f      	add	r7, r3
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    5e70:	441e      	add	r6, r3
						 | (p[4+len+1] << 8)
    5e72:	f817 3c2f 	ldrb.w	r3, [r7, #-47]
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    5e76:	f816 2c34 	ldrb.w	r2, [r6, #-52]
						 | (p[4+len+1] << 8)
    5e7a:	021b      	lsls	r3, r3, #8
    5e7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						 | (p[4+len+0] << 0);
    5e80:	f817 2c30 	ldrb.w	r2, [r7, #-48]
    5e84:	4313      	orrs	r3, r2
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    5e86:	4298      	cmp	r0, r3
    5e88:	d0ce      	beq.n	5e28 <bt_le_sync+0x1c8>

		le.last_packet = CLK100NS;

	rx_flush:
		// this might happen twice, but it's safe to do so
		cc2400_strobe(SFSON);
    5e8a:	2061      	movs	r0, #97	; 0x61
    5e8c:	f003 fabf 	bl	940e <cc2400_strobe>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5e90:	4a28      	ldr	r2, [pc, #160]	; (5f34 <bt_le_sync+0x2d4>)
    5e92:	6813      	ldr	r3, [r2, #0]
    5e94:	f023 0301 	bic.w	r3, r3, #1
    5e98:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    5e9a:	4b2b      	ldr	r3, [pc, #172]	; (5f48 <bt_le_sync+0x2e8>)
    5e9c:	681b      	ldr	r3, [r3, #0]
    5e9e:	0759      	lsls	r1, r3, #29
    5ea0:	d502      	bpl.n	5ea8 <bt_le_sync+0x248>
			u8 tmp = (u8)DIO_SSP_DR;
    5ea2:	4b2a      	ldr	r3, [pc, #168]	; (5f4c <bt_le_sync+0x2ec>)
    5ea4:	681b      	ldr	r3, [r3, #0]
    5ea6:	e7f8      	b.n	5e9a <bt_le_sync+0x23a>
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    5ea8:	f640 4135 	movw	r1, #3125	; 0xc35
    5eac:	4b24      	ldr	r3, [pc, #144]	; (5f40 <bt_le_sync+0x2e0>)
    5eae:	681a      	ldr	r2, [r3, #0]
    5eb0:	4b24      	ldr	r3, [pc, #144]	; (5f44 <bt_le_sync+0x2e4>)
    5eb2:	f3c2 0213 	ubfx	r2, r2, #0, #20
    5eb6:	681b      	ldr	r3, [r3, #0]
    5eb8:	fb01 3302 	mla	r3, r1, r2, r3
		if (now < le.last_packet)
    5ebc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			now += 3276800000; // handle rollover
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    5ebe:	7e22      	ldrb	r2, [r4, #24]
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
    5ec0:	428b      	cmp	r3, r1
			now += 3276800000; // handle rollover
    5ec2:	bf38      	it	cc
    5ec4:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
		if  ( // timeout
    5ec8:	f1a2 0202 	sub.w	r2, r2, #2
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
    5ecc:	bf38      	it	cc
    5ece:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
		if  ( // timeout
    5ed2:	2a01      	cmp	r2, #1
    5ed4:	d803      	bhi.n	5ede <bt_le_sync+0x27e>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
			&& (now - le.last_packet > 50000000))
    5ed6:	4a1e      	ldr	r2, [pc, #120]	; (5f50 <bt_le_sync+0x2f0>)
    5ed8:	1a5b      	subs	r3, r3, r1
    5eda:	4293      	cmp	r3, r2
    5edc:	d802      	bhi.n	5ee4 <bt_le_sync+0x284>
			// jam finished
			|| (le_jam_count == 1)
    5ede:	69eb      	ldr	r3, [r5, #28]
    5ee0:	2b01      	cmp	r3, #1
    5ee2:	d151      	bne.n	5f88 <bt_le_sync+0x328>
			)
		{
			reset_le();
    5ee4:	f7ff fd90 	bl	5a08 <reset_le>
			le_jam_count = 0;
			TXLED_CLR;
    5ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5eec:	2300      	movs	r3, #0
    5eee:	61eb      	str	r3, [r5, #28]
			TXLED_CLR;
    5ef0:	f8c9 1000 	str.w	r1, [r9]

			if (jam_mode == JAM_ONCE) {
    5ef4:	7ce9      	ldrb	r1, [r5, #19]
			// jam finished
			|| (le_jam_count == 1)
			)
		{
			reset_le();
			le_jam_count = 0;
    5ef6:	4a03      	ldr	r2, [pc, #12]	; (5f04 <bt_le_sync+0x2a4>)
			TXLED_CLR;

			if (jam_mode == JAM_ONCE) {
    5ef8:	2901      	cmp	r1, #1
    5efa:	d12b      	bne.n	5f54 <bt_le_sync+0x2f4>
				jam_mode = JAM_NONE;
    5efc:	74d3      	strb	r3, [r2, #19]
				requested_mode = MODE_IDLE;
    5efe:	7493      	strb	r3, [r2, #18]
				goto cleanup;
    5f00:	e073      	b.n	5fea <bt_le_sync+0x38a>
    5f02:	bf00      	nop
    5f04:	10000a24 	.word	0x10000a24
    5f08:	10000448 	.word	0x10000448
    5f0c:	e000e100 	.word	0xe000e100
    5f10:	2009c03c 	.word	0x2009c03c
    5f14:	1000122c 	.word	0x1000122c
    5f18:	10001740 	.word	0x10001740
    5f1c:	10001230 	.word	0x10001230
    5f20:	10001232 	.word	0x10001232
    5f24:	0000a648 	.word	0x0000a648
    5f28:	1000170d 	.word	0x1000170d
    5f2c:	50004104 	.word	0x50004104
    5f30:	50004110 	.word	0x50004110
    5f34:	40030024 	.word	0x40030024
    5f38:	2009c038 	.word	0x2009c038
    5f3c:	e000e180 	.word	0xe000e180
    5f40:	1000124c 	.word	0x1000124c
    5f44:	40004008 	.word	0x40004008
    5f48:	4003000c 	.word	0x4003000c
    5f4c:	40030008 	.word	0x40030008
    5f50:	02faf080 	.word	0x02faf080
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    5f54:	f1b8 0f0a 	cmp.w	r8, #10
    5f58:	d047      	beq.n	5fea <bt_le_sync+0x38a>
				goto cleanup;

			le.link_state = LINK_LISTENING;
    5f5a:	2301      	movs	r3, #1

			cc2400_strobe(SRFOFF);
    5f5c:	2064      	movs	r0, #100	; 0x64

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
				goto cleanup;

			le.link_state = LINK_LISTENING;
    5f5e:	7623      	strb	r3, [r4, #24]

			cc2400_strobe(SRFOFF);
    5f60:	f003 fa55 	bl	940e <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    5f64:	f003 fa4c 	bl	9400 <cc2400_status>
    5f68:	0742      	lsls	r2, r0, #29
    5f6a:	d4fb      	bmi.n	5f64 <bt_le_sync+0x304>

			/* Retune */
			channel = le_adv_channel != 0 ? le_adv_channel : 2402;
    5f6c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    5f70:	b29b      	uxth	r3, r3
    5f72:	b123      	cbz	r3, 5f7e <bt_le_sync+0x31e>
    5f74:	4b23      	ldr	r3, [pc, #140]	; (6004 <bt_le_sync+0x3a4>)
    5f76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
    5f7a:	b29b      	uxth	r3, r3
    5f7c:	e001      	b.n	5f82 <bt_le_sync+0x322>
    5f7e:	f640 1362 	movw	r3, #2402	; 0x962
    5f82:	8023      	strh	r3, [r4, #0]
			restart_jamming = 1;
    5f84:	2301      	movs	r3, #1
    5f86:	632b      	str	r3, [r5, #48]	; 0x30
		}

		cc2400_set(SYNCL, le.syncl);
    5f88:	202c      	movs	r0, #44	; 0x2c
    5f8a:	8961      	ldrh	r1, [r4, #10]
    5f8c:	f003 f997 	bl	92be <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    5f90:	202d      	movs	r0, #45	; 0x2d
    5f92:	8921      	ldrh	r1, [r4, #8]
    5f94:	f003 f993 	bl	92be <cc2400_set>

		if (do_hop)
    5f98:	7aeb      	ldrb	r3, [r5, #11]
    5f9a:	b10b      	cbz	r3, 5fa0 <bt_le_sync+0x340>
			hop();
    5f9c:	f7ff fa7c 	bl	5498 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    5fa0:	69eb      	ldr	r3, [r5, #28]
    5fa2:	4e19      	ldr	r6, [pc, #100]	; (6008 <bt_le_sync+0x3a8>)
    5fa4:	2b00      	cmp	r3, #0
    5fa6:	dd05      	ble.n	5fb4 <bt_le_sync+0x354>
			le_jam();
    5fa8:	f7ff fa3a 	bl	5420 <le_jam>
			--le_jam_count;
    5fac:	69f3      	ldr	r3, [r6, #28]
    5fae:	3b01      	subs	r3, #1
    5fb0:	61f3      	str	r3, [r6, #28]
    5fb2:	e014      	b.n	5fde <bt_le_sync+0x37e>
		} else {
			/* RX mode */
			dma_init_le();
    5fb4:	f001 fa3c 	bl	7430 <dma_init_le>
			dio_ssp_start();
    5fb8:	f001 fa76 	bl	74a8 <dio_ssp_start>

			if (restart_jamming) {
    5fbc:	6b33      	ldr	r3, [r6, #48]	; 0x30
    5fbe:	b13b      	cbz	r3, 5fd0 <bt_le_sync+0x370>
				cc2400_rx_sync(rbit(le.access_address));
    5fc0:	6860      	ldr	r0, [r4, #4]
    5fc2:	f003 f889 	bl	90d8 <rbit>
    5fc6:	f7fe fa25 	bl	4414 <cc2400_rx_sync>
				restart_jamming = 0;
    5fca:	2300      	movs	r3, #0
    5fcc:	6333      	str	r3, [r6, #48]	; 0x30
    5fce:	e006      	b.n	5fde <bt_le_sync+0x37e>
			} else {
				// wait till we're in FSLOCK before strobing RX
				while (!(cc2400_status() & FS_LOCK));
    5fd0:	f003 fa16 	bl	9400 <cc2400_status>
    5fd4:	0743      	lsls	r3, r0, #29
    5fd6:	d5fb      	bpl.n	5fd0 <bt_le_sync+0x370>
				cc2400_strobe(SRX);
    5fd8:	2062      	movs	r0, #98	; 0x62
    5fda:	f003 fa18 	bl	940e <cc2400_strobe>
			}
		}

		rx_tc = 0;
    5fde:	2300      	movs	r3, #0
    5fe0:	f8ca 3000 	str.w	r3, [sl]
		rx_err = 0;
    5fe4:	f8cb 3000 	str.w	r3, [fp]
    5fe8:	e659      	b.n	5c9e <bt_le_sync+0x3e>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    5fea:	4b08      	ldr	r3, [pc, #32]	; (600c <bt_le_sync+0x3ac>)
    5fec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    5ff0:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    5ff2:	f7fe fabd 	bl	4570 <cc2400_idle>
	dio_ssp_stop();
    5ff6:	f001 fa77 	bl	74e8 <dio_ssp_stop>
	cs_trigger_disable();
    5ffa:	f001 f933 	bl	7264 <cs_trigger_disable>
}
    5ffe:	b013      	add	sp, #76	; 0x4c
    6000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6004:	10000448 	.word	0x10000448
    6008:	10000a24 	.word	0x10000a24
    600c:	e000e180 	.word	0xe000e180

00006010 <le_promisc_state>:
	bt_le_sync(MODE_BT_FOLLOW_LE);
	*/
}

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    6010:	b570      	push	{r4, r5, r6, lr}
    6012:	b08e      	sub	sp, #56	; 0x38
    6014:	4614      	mov	r4, r2
    6016:	460d      	mov	r5, r1
    6018:	4606      	mov	r6, r0
	u8 buf[50] = { 0, };
    601a:	2100      	movs	r1, #0
    601c:	a801      	add	r0, sp, #4
    601e:	2232      	movs	r2, #50	; 0x32
    6020:	f7fe f8ea 	bl	41f8 <memset>
	if (len > 49)
		len = 49;

	buf[0] = type;
	memcpy(&buf[1], data, len);
    6024:	2c31      	cmp	r4, #49	; 0x31
    6026:	4622      	mov	r2, r4
    6028:	4629      	mov	r1, r5
    602a:	bf28      	it	cs
    602c:	2231      	movcs	r2, #49	; 0x31
    602e:	f10d 0005 	add.w	r0, sp, #5
void le_promisc_state(u8 type, void *data, unsigned len) {
	u8 buf[50] = { 0, };
	if (len > 49)
		len = 49;

	buf[0] = type;
    6032:	f88d 6004 	strb.w	r6, [sp, #4]
	memcpy(&buf[1], data, len);
    6036:	f004 f9e7 	bl	a408 <memcpy>
	enqueue(LE_PROMISC, (uint8_t*)buf);
    603a:	a901      	add	r1, sp, #4
    603c:	2005      	movs	r0, #5
    603e:	f7fe fa3f 	bl	44c0 <enqueue>
}
    6042:	b00e      	add	sp, #56	; 0x38
    6044:	bd70      	pop	{r4, r5, r6, pc}
    6046:	0000      	movs	r0, r0

00006048 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    6048:	b538      	push	{r3, r4, r5, lr}
	static u32 first_ts = 0;
	if (channel == 2404) {
    604a:	f640 1264 	movw	r2, #2404	; 0x964
    604e:	4831      	ldr	r0, [pc, #196]	; (6114 <promisc_recover_hop_increment+0xcc>)
    6050:	4c31      	ldr	r4, [pc, #196]	; (6118 <promisc_recover_hop_increment+0xd0>)
    6052:	8803      	ldrh	r3, [r0, #0]
    6054:	b29b      	uxth	r3, r3
    6056:	4293      	cmp	r3, r2
    6058:	d10d      	bne.n	6076 <promisc_recover_hop_increment+0x2e>
		first_ts = CLK100NS;
    605a:	f640 4135 	movw	r1, #3125	; 0xc35
    605e:	4b2f      	ldr	r3, [pc, #188]	; (611c <promisc_recover_hop_increment+0xd4>)
    6060:	681a      	ldr	r2, [r3, #0]
    6062:	4b2f      	ldr	r3, [pc, #188]	; (6120 <promisc_recover_hop_increment+0xd8>)
    6064:	f3c2 0213 	ubfx	r2, r2, #0, #20
    6068:	681b      	ldr	r3, [r3, #0]
    606a:	fb01 3302 	mla	r3, r1, r2, r3
    606e:	6363      	str	r3, [r4, #52]	; 0x34
		hop_direct_channel = 2406;
    6070:	f640 1366 	movw	r3, #2406	; 0x966
    6074:	e048      	b.n	6108 <promisc_recover_hop_increment+0xc0>
		do_hop = 1;
	} else if (channel == 2406) {
    6076:	f640 1166 	movw	r1, #2406	; 0x966
    607a:	8803      	ldrh	r3, [r0, #0]
    607c:	b29b      	uxth	r3, r3
    607e:	428b      	cmp	r3, r1
    6080:	d144      	bne.n	610c <promisc_recover_hop_increment+0xc4>
		u32 second_ts = CLK100NS;
    6082:	f640 4135 	movw	r1, #3125	; 0xc35
    6086:	4b25      	ldr	r3, [pc, #148]	; (611c <promisc_recover_hop_increment+0xd4>)
		if (second_ts < first_ts)
			second_ts += 3276800000; // handle rollover
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    6088:	8c40      	ldrh	r0, [r0, #34]	; 0x22
	if (channel == 2404) {
		first_ts = CLK100NS;
		hop_direct_channel = 2406;
		do_hop = 1;
	} else if (channel == 2406) {
		u32 second_ts = CLK100NS;
    608a:	681a      	ldr	r2, [r3, #0]
    608c:	4b24      	ldr	r3, [pc, #144]	; (6120 <promisc_recover_hop_increment+0xd8>)
    608e:	f3c2 0213 	ubfx	r2, r2, #0, #20
    6092:	681b      	ldr	r3, [r3, #0]
    6094:	fb01 3302 	mla	r3, r1, r2, r3
		if (second_ts < first_ts)
    6098:	6b62      	ldr	r2, [r4, #52]	; 0x34
			second_ts += 3276800000; // handle rollover
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    609a:	491e      	ldr	r1, [pc, #120]	; (6114 <promisc_recover_hop_increment+0xcc>)
		first_ts = CLK100NS;
		hop_direct_channel = 2406;
		do_hop = 1;
	} else if (channel == 2406) {
		u32 second_ts = CLK100NS;
		if (second_ts < first_ts)
    609c:	4293      	cmp	r3, r2
			second_ts += 3276800000; // handle rollover
    609e:	bf3c      	itt	cc
    60a0:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    60a4:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
    60a8:	1a9b      	subs	r3, r3, r2
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    60aa:	f641 026a 	movw	r2, #6250	; 0x186a
    60ae:	fb02 3300 	mla	r3, r2, r0, r3
    60b2:	f243 02d4 	movw	r2, #12500	; 0x30d4
    60b6:	4342      	muls	r2, r0
    60b8:	fbb3 f3f2 	udiv	r3, r3, r2
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    60bc:	2b24      	cmp	r3, #36	; 0x24
    60be:	d821      	bhi.n	6104 <promisc_recover_hop_increment+0xbc>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    60c0:	4a18      	ldr	r2, [pc, #96]	; (6124 <promisc_recover_hop_increment+0xdc>)
			le.interval_timer = le.conn_interval / 2;
    60c2:	0840      	lsrs	r0, r0, #1
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    60c4:	4413      	add	r3, r2
    60c6:	f893 3870 	ldrb.w	r3, [r3, #2160]	; 0x870
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    60ca:	2525      	movs	r5, #37	; 0x25
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    60cc:	768b      	strb	r3, [r1, #26]
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    60ce:	3301      	adds	r3, #1
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
			le.interval_timer = le.conn_interval / 2;
    60d0:	8408      	strh	r0, [r1, #32]
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    60d2:	fb93 f0f5 	sdiv	r0, r3, r5
    60d6:	fb05 3310 	mls	r3, r5, r0, r3
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
    60da:	2200      	movs	r2, #0
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    60dc:	764b      	strb	r3, [r1, #25]
			le.link_state = LINK_CONNECTED;
    60de:	2003      	movs	r0, #3
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
    60e0:	4b11      	ldr	r3, [pc, #68]	; (6128 <promisc_recover_hop_increment+0xe0>)
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
			le.interval_timer = le.conn_interval / 2;
			le.conn_count = 0;
    60e2:	848a      	strh	r2, [r1, #36]	; 0x24
			le.conn_epoch = 0;
    60e4:	61ca      	str	r2, [r1, #28]
			do_hop = 0;
    60e6:	72e2      	strb	r2, [r4, #11]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
    60e8:	614a      	str	r2, [r1, #20]
			le.conn_count = 0;
			le.conn_epoch = 0;
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
    60ea:	7608      	strb	r0, [r1, #24]
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
			le_promisc_state(3, &le.channel_increment, 1);
    60ec:	2201      	movs	r2, #1
    60ee:	311a      	adds	r1, #26
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
			packet_cb = connection_follow_cb;
    60f0:	61a3      	str	r3, [r4, #24]
			do_hop = 0;
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
			le.link_state = LINK_CONNECTED;
			le.crc_verify = 0;
			hop_mode = HOP_BTLE;
    60f2:	72a0      	strb	r0, [r4, #10]
			packet_cb = connection_follow_cb;
			le_promisc_state(3, &le.channel_increment, 1);
    60f4:	f7ff ff8c 	bl	6010 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    60f8:	7ce3      	ldrb	r3, [r4, #19]
    60fa:	b153      	cbz	r3, 6112 <promisc_recover_hop_increment+0xca>
				le_jam_count = JAM_COUNT_DEFAULT;
    60fc:	4b06      	ldr	r3, [pc, #24]	; (6118 <promisc_recover_hop_increment+0xd0>)
    60fe:	2228      	movs	r2, #40	; 0x28
    6100:	61da      	str	r2, [r3, #28]
    6102:	bd38      	pop	{r3, r4, r5, pc}

			return;
		}
		hop_direct_channel = 2404;
    6104:	f640 1364 	movw	r3, #2404	; 0x964
    6108:	81a3      	strh	r3, [r4, #12]
    610a:	e000      	b.n	610e <promisc_recover_hop_increment+0xc6>
		do_hop = 1;
	}
	else {
		hop_direct_channel = 2404;
    610c:	81a2      	strh	r2, [r4, #12]
		do_hop = 1;
    610e:	2301      	movs	r3, #1
    6110:	72e3      	strb	r3, [r4, #11]
    6112:	bd38      	pop	{r3, r4, r5, pc}
    6114:	10000448 	.word	0x10000448
    6118:	10000a24 	.word	0x10000a24
    611c:	1000124c 	.word	0x1000124c
    6120:	40004008 	.word	0x40004008
    6124:	0000a558 	.word	0x0000a558
    6128:	00004725 	.word	0x00004725

0000612c <promisc_recover_hop_interval>:
	}
}

void promisc_recover_hop_interval(u8 *packet) {
    612c:	b538      	push	{r3, r4, r5, lr}
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    612e:	f640 4435 	movw	r4, #3125	; 0xc35
    6132:	4b24      	ldr	r3, [pc, #144]	; (61c4 <promisc_recover_hop_interval+0x98>)
    6134:	4a24      	ldr	r2, [pc, #144]	; (61c8 <promisc_recover_hop_interval+0x9c>)
    6136:	681b      	ldr	r3, [r3, #0]
    6138:	6812      	ldr	r2, [r2, #0]
    613a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    613e:	fb04 2403 	mla	r4, r4, r3, r2
		cur_clk += 3267800000; // handle rollover
	u32 clk_diff = cur_clk - prev_clk;
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    6142:	f246 12a7 	movw	r2, #24999	; 0x61a7

void promisc_recover_hop_interval(u8 *packet) {
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
	if (cur_clk < prev_clk)
    6146:	4d21      	ldr	r5, [pc, #132]	; (61cc <promisc_recover_hop_interval+0xa0>)
    6148:	6bab      	ldr	r3, [r5, #56]	; 0x38
    614a:	429c      	cmp	r4, r3
		cur_clk += 3267800000; // handle rollover
    614c:	bf3e      	ittt	cc
    614e:	f104 4443 	addcc.w	r4, r4, #3271557120	; 0xc3000000
    6152:	f5a4 1465 	subcc.w	r4, r4, #3751936	; 0x394000
    6156:	f5a4 54a2 	subcc.w	r4, r4, #5184	; 0x1440
	u32 clk_diff = cur_clk - prev_clk;
    615a:	1ae3      	subs	r3, r4, r3
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    615c:	4293      	cmp	r3, r2
    615e:	d930      	bls.n	61c2 <promisc_recover_hop_interval+0x96>
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
    6160:	4a1b      	ldr	r2, [pc, #108]	; (61d0 <promisc_recover_hop_interval+0xa4>)
		le_promisc.smallest_hop_interval = clk_diff;

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    6162:	481b      	ldr	r0, [pc, #108]	; (61d0 <promisc_recover_hop_interval+0xa4>)

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
    6164:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
    6168:	428b      	cmp	r3, r1
		le_promisc.smallest_hop_interval = clk_diff;
    616a:	bf38      	it	cc
    616c:	f8c2 3100 	strcc.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    6170:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    6174:	4a17      	ldr	r2, [pc, #92]	; (61d4 <promisc_recover_hop_interval+0xa8>)
    6176:	f503 3361 	add.w	r3, r3, #230400	; 0x38400
    617a:	f203 3352 	addw	r3, r3, #850	; 0x352
    617e:	fbb3 f3f2 	udiv	r3, r3, r2

	if (le.conn_interval == obsv_hop_interval) {
    6182:	4915      	ldr	r1, [pc, #84]	; (61d8 <promisc_recover_hop_interval+0xac>)
		return;

	if (clk_diff < le_promisc.smallest_hop_interval)
		le_promisc.smallest_hop_interval = clk_diff;

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    6184:	b29b      	uxth	r3, r3

	if (le.conn_interval == obsv_hop_interval) {
    6186:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
    6188:	429a      	cmp	r2, r3
    618a:	d115      	bne.n	61b8 <promisc_recover_hop_interval+0x8c>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    618c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    6190:	3301      	adds	r3, #1
		if (le_promisc.consec_intervals == 5) {
    6192:	2b05      	cmp	r3, #5

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);

	if (le.conn_interval == obsv_hop_interval) {
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    6194:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    6198:	d112      	bne.n	61c0 <promisc_recover_hop_interval+0x94>
			packet_cb = promisc_recover_hop_increment;
    619a:	4b10      	ldr	r3, [pc, #64]	; (61dc <promisc_recover_hop_interval+0xb0>)
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    619c:	2002      	movs	r0, #2

	if (le.conn_interval == obsv_hop_interval) {
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
    619e:	61ab      	str	r3, [r5, #24]
			hop_direct_channel = 2404;
    61a0:	f640 1364 	movw	r3, #2404	; 0x964
    61a4:	81ab      	strh	r3, [r5, #12]
			hop_mode = HOP_DIRECT;
    61a6:	2304      	movs	r3, #4
    61a8:	72ab      	strb	r3, [r5, #10]
			do_hop = 1;
			le_promisc_state(2, &le.conn_interval, 2);
    61aa:	3122      	adds	r1, #34	; 0x22
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
    61ac:	2301      	movs	r3, #1
			le_promisc_state(2, &le.conn_interval, 2);
    61ae:	4602      	mov	r2, r0
		++le_promisc.consec_intervals;
		if (le_promisc.consec_intervals == 5) {
			packet_cb = promisc_recover_hop_increment;
			hop_direct_channel = 2404;
			hop_mode = HOP_DIRECT;
			do_hop = 1;
    61b0:	72eb      	strb	r3, [r5, #11]
			le_promisc_state(2, &le.conn_interval, 2);
    61b2:	f7ff ff2d 	bl	6010 <le_promisc_state>
    61b6:	e003      	b.n	61c0 <promisc_recover_hop_interval+0x94>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    61b8:	844b      	strh	r3, [r1, #34]	; 0x22
		le_promisc.consec_intervals = 0;
    61ba:	2300      	movs	r3, #0
    61bc:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
	}

	prev_clk = cur_clk;
    61c0:	63ac      	str	r4, [r5, #56]	; 0x38
    61c2:	bd38      	pop	{r3, r4, r5, pc}
    61c4:	1000124c 	.word	0x1000124c
    61c8:	40004008 	.word	0x40004008
    61cc:	10000a24 	.word	0x10000a24
    61d0:	10001290 	.word	0x10001290
    61d4:	00070ea4 	.word	0x00070ea4
    61d8:	10000448 	.word	0x10000448
    61dc:	00006049 	.word	0x00006049

000061e0 <promisc_follow_cb>:
}

void promisc_follow_cb(u8 *packet) {
    61e0:	b538      	push	{r3, r4, r5, lr}
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    61e2:	4d18      	ldr	r5, [pc, #96]	; (6244 <promisc_follow_cb+0x64>)
	}

	prev_clk = cur_clk;
}

void promisc_follow_cb(u8 *packet) {
    61e4:	4601      	mov	r1, r0
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    61e6:	696b      	ldr	r3, [r5, #20]
    61e8:	bb53      	cbnz	r3, 6240 <promisc_follow_cb+0x60>
    61ea:	7903      	ldrb	r3, [r0, #4]
    61ec:	2b01      	cmp	r3, #1
    61ee:	d127      	bne.n	6240 <promisc_follow_cb+0x60>
    61f0:	7944      	ldrb	r4, [r0, #5]
    61f2:	bb2c      	cbnz	r4, 6240 <promisc_follow_cb+0x60>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    61f4:	79cb      	ldrb	r3, [r1, #7]
    61f6:	7a00      	ldrb	r0, [r0, #8]
    61f8:	021b      	lsls	r3, r3, #8
    61fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    61fe:	7988      	ldrb	r0, [r1, #6]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    6200:	2202      	movs	r2, #2
    6202:	4318      	orrs	r0, r3
    6204:	3104      	adds	r1, #4
    6206:	f000 fddf 	bl	6dc8 <btle_reverse_crc>
    620a:	4623      	mov	r3, r4
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    620c:	4622      	mov	r2, r4

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    620e:	60e8      	str	r0, [r5, #12]
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    6210:	fa20 f102 	lsr.w	r1, r0, r2
    6214:	f1c2 0417 	rsb	r4, r2, #23
    6218:	f001 0101 	and.w	r1, r1, #1
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    621c:	3201      	adds	r2, #1
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    621e:	40a1      	lsls	r1, r4
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    6220:	2a18      	cmp	r2, #24
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    6222:	ea43 0301 	orr.w	r3, r3, r1
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    6226:	d1f3      	bne.n	6210 <promisc_follow_cb+0x30>
    6228:	612b      	str	r3, [r5, #16]
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
		packet_cb = promisc_recover_hop_interval;
    622a:	4a07      	ldr	r2, [pc, #28]	; (6248 <promisc_follow_cb+0x68>)
    622c:	4b07      	ldr	r3, [pc, #28]	; (624c <promisc_follow_cb+0x6c>)
		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    622e:	2001      	movs	r0, #1
		packet_cb = promisc_recover_hop_interval;
    6230:	619a      	str	r2, [r3, #24]
		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    6232:	6168      	str	r0, [r5, #20]
		packet_cb = promisc_recover_hop_interval;
		le_promisc_state(1, &le.crc_init, 3);
    6234:	4906      	ldr	r1, [pc, #24]	; (6250 <promisc_follow_cb+0x70>)
    6236:	2203      	movs	r2, #3
	}
}
    6238:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		for (i = 0; i < 24; ++i)
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
		packet_cb = promisc_recover_hop_interval;
		le_promisc_state(1, &le.crc_init, 3);
    623c:	f7ff bee8 	b.w	6010 <le_promisc_state>
    6240:	bd38      	pop	{r3, r4, r5, pc}
    6242:	bf00      	nop
    6244:	10000448 	.word	0x10000448
    6248:	0000612d 	.word	0x0000612d
    624c:	10000a24 	.word	0x10000a24
    6250:	10000454 	.word	0x10000454

00006254 <see_aa>:
	}
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    6254:	b530      	push	{r4, r5, lr}
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    6256:	2200      	movs	r2, #0
		if (le_promisc.active_aa[i].aa == aa) {
    6258:	4b12      	ldr	r3, [pc, #72]	; (62a4 <see_aa+0x50>)
    625a:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
    625e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    6262:	4284      	cmp	r4, r0
    6264:	d103      	bne.n	626e <see_aa+0x1a>
			++le_promisc.active_aa[i].count;
    6266:	684b      	ldr	r3, [r1, #4]
    6268:	3301      	adds	r3, #1
    626a:	604b      	str	r3, [r1, #4]
			return;
    626c:	bd30      	pop	{r4, r5, pc}
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    626e:	3201      	adds	r2, #1
    6270:	2a20      	cmp	r2, #32
    6272:	d1f1      	bne.n	6258 <see_aa+0x4>
    6274:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6278:	460c      	mov	r4, r1
    627a:	2200      	movs	r2, #0
    627c:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
		if (le_promisc.active_aa[i].count < max || max < 0) {
    6280:	686d      	ldr	r5, [r5, #4]
    6282:	42a5      	cmp	r5, r4
    6284:	db01      	blt.n	628a <see_aa+0x36>
    6286:	2c00      	cmp	r4, #0
    6288:	da01      	bge.n	628e <see_aa+0x3a>
    628a:	4611      	mov	r1, r2
    628c:	462c      	mov	r4, r5
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    628e:	3201      	adds	r2, #1
    6290:	2a20      	cmp	r2, #32
    6292:	d1f3      	bne.n	627c <see_aa+0x28>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    6294:	f843 0031 	str.w	r0, [r3, r1, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    6298:	2201      	movs	r2, #1
    629a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    629e:	605a      	str	r2, [r3, #4]
    62a0:	bd30      	pop	{r4, r5, pc}
    62a2:	bf00      	nop
    62a4:	10001290 	.word	0x10001290

000062a8 <cb_le_promisc>:
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    62a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    62ac:	b094      	sub	sp, #80	; 0x50
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    62ae:	2100      	movs	r1, #0
	le_promisc.active_aa[killme].aa = aa;
	le_promisc.active_aa[killme].count = 1;
}

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    62b0:	4604      	mov	r4, r0
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    62b2:	2240      	movs	r2, #64	; 0x40
    62b4:	a804      	add	r0, sp, #16
    62b6:	f7fd ff9f 	bl	41f8 <memset>
    62ba:	2301      	movs	r3, #1
    62bc:	f88d 3010 	strb.w	r3, [sp, #16]
    62c0:	f88d 3020 	strb.w	r3, [sp, #32]
    62c4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    62c8:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
    62cc:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    62d0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    62d4:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    62d8:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    62dc:	2700      	movs	r7, #0
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel)];
    62de:	4d58      	ldr	r5, [pc, #352]	; (6440 <cb_le_promisc+0x198>)
    62e0:	4e58      	ldr	r6, [pc, #352]	; (6444 <cb_le_promisc+0x19c>)
    62e2:	8828      	ldrh	r0, [r5, #0]
    62e4:	b280      	uxth	r0, r0
    62e6:	f000 fd13 	bl	6d10 <btle_channel_index>
    62ea:	5c33      	ldrb	r3, [r6, r0]

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    62ec:	2100      	movs	r1, #0
			desired[i][j] ^= whitening[idx];
    62ee:	aa04      	add	r2, sp, #16
    62f0:	443a      	add	r2, r7
    62f2:	18f0      	adds	r0, r6, r3
    62f4:	f812 e001 	ldrb.w	lr, [r2, r1]
    62f8:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    62fc:	3301      	adds	r3, #1
	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
			desired[i][j] ^= whitening[idx];
    62fe:	ea8e 0000 	eor.w	r0, lr, r0
    6302:	5450      	strb	r0, [r2, r1]
			idx = (idx + 1) % sizeof(whitening);
    6304:	227f      	movs	r2, #127	; 0x7f
    6306:	fbb3 f2f2 	udiv	r2, r3, r2

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    630a:	3101      	adds	r1, #1
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    630c:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6310:	2910      	cmp	r1, #16
			desired[i][j] ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
    6312:	eba3 0302 	sub.w	r3, r3, r2

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    6316:	d1ea      	bne.n	62ee <cb_le_promisc+0x46>
    6318:	3710      	adds	r7, #16
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    631a:	2f40      	cmp	r7, #64	; 0x40
    631c:	d1df      	bne.n	62de <cb_le_promisc+0x36>
    631e:	2720      	movs	r7, #32
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
    6320:	46ee      	mov	lr, sp
    6322:	4b49      	ldr	r3, [pc, #292]	; (6448 <cb_le_promisc+0x1a0>)
    6324:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6326:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    632a:	2200      	movs	r2, #0
    632c:	ab04      	add	r3, sp, #16
    632e:	eb03 1102 	add.w	r1, r3, r2, lsl #4
    6332:	2300      	movs	r3, #0
    6334:	19e0      	adds	r0, r4, r7
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
				if (unpacked[i+k] != desired[j][k]) {
    6336:	f810 c003 	ldrb.w	ip, [r0, r3]
    633a:	5cc8      	ldrb	r0, [r1, r3]
    633c:	4584      	cmp	ip, r0
    633e:	d003      	beq.n	6348 <cb_le_promisc+0xa0>
					ok[j] = 0;
    6340:	2300      	movs	r3, #0
    6342:	f84e 3022 	str.w	r3, [lr, r2, lsl #2]
					break;
    6346:	e002      	b.n	634e <cb_le_promisc+0xa6>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    6348:	3301      	adds	r3, #1
    634a:	2b10      	cmp	r3, #16
    634c:	d1f2      	bne.n	6334 <cb_le_promisc+0x8c>
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    634e:	3201      	adds	r2, #1
    6350:	2a04      	cmp	r2, #4
    6352:	d1eb      	bne.n	632c <cb_le_promisc+0x84>
    6354:	2300      	movs	r3, #0
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
			if (ok[j]) {
    6356:	f85e 2023 	ldr.w	r2, [lr, r3, lsl #2]
    635a:	b91a      	cbnz	r2, 6364 <cb_le_promisc+0xbc>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    635c:	3301      	adds	r3, #1
    635e:	2b04      	cmp	r3, #4
    6360:	d1f9      	bne.n	6356 <cb_le_promisc+0xae>
    6362:	e049      	b.n	63f8 <cb_le_promisc+0x150>
		// skip if no match
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel)];
    6364:	8828      	ldrh	r0, [r5, #0]
    6366:	b280      	uxth	r0, r0
    6368:	f000 fcd2 	bl	6d10 <btle_channel_index>
    636c:	5c31      	ldrb	r1, [r6, r0]
		for (j = 0; j < 4+3+3; ++j) {
    636e:	2200      	movs	r2, #0
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    6370:	f04f 0c00 	mov.w	ip, #0
    6374:	46e6      	mov	lr, ip
    6376:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
    637a:	eb0e 0308 	add.w	r3, lr, r8
    637e:	4423      	add	r3, r4
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
    6380:	2a03      	cmp	r2, #3
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
    6382:	f813 3c20 	ldrb.w	r3, [r3, #-32]
				if (j >= 4) { // unwhiten data bytes
    6386:	dd0a      	ble.n	639e <cb_le_promisc+0xf6>
					bit ^= whitening[idx];
    6388:	1870      	adds	r0, r6, r1
    638a:	f890 0028 	ldrb.w	r0, [r0, #40]	; 0x28
					idx = (idx + 1) % sizeof(whitening);
    638e:	3101      	adds	r1, #1
			for (k = 0; k < 8; k++) {
				int offset = k + (j * 8) + i - 32;
				if (offset >= DMA_SIZE*8*2) break;
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
    6390:	4043      	eors	r3, r0
					idx = (idx + 1) % sizeof(whitening);
    6392:	207f      	movs	r0, #127	; 0x7f
    6394:	fbb1 f0f0 	udiv	r0, r1, r0
    6398:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
    639c:	1a09      	subs	r1, r1, r0
				}
				byte |= bit << k;
    639e:	fa03 f30e 	lsl.w	r3, r3, lr

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    63a2:	f10e 0e01 	add.w	lr, lr, #1
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
    63a6:	ea43 030c 	orr.w	r3, r3, ip

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    63aa:	f1be 0f08 	cmp.w	lr, #8
				int bit = unpacked[offset];
				if (j >= 4) { // unwhiten data bytes
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
    63ae:	fa5f fc83 	uxtb.w	ip, r3

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    63b2:	d1e2      	bne.n	637a <cb_le_promisc+0xd2>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    63b4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 6460 <cb_le_promisc+0x1b8>
    63b8:	f8d8 3000 	ldr.w	r3, [r8]
    63bc:	f803 c002 	strb.w	ip, [r3, r2]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel)];
		for (j = 0; j < 4+3+3; ++j) {
    63c0:	3201      	adds	r2, #1
    63c2:	2a0a      	cmp	r2, #10
    63c4:	d1d4      	bne.n	6370 <cb_le_promisc+0xc8>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    63c6:	f8d8 3000 	ldr.w	r3, [r8]
    63ca:	78db      	ldrb	r3, [r3, #3]
				 (idle_rxbuf[2] << 16) |
    63cc:	f8d8 2000 	ldr.w	r2, [r8]
    63d0:	7892      	ldrb	r2, [r2, #2]
				 (idle_rxbuf[1] <<  8) |
    63d2:	f8d8 1000 	ldr.w	r1, [r8]
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    63d6:	0412      	lsls	r2, r2, #16
				 (idle_rxbuf[1] <<  8) |
    63d8:	7848      	ldrb	r0, [r1, #1]
				 (idle_rxbuf[0]);
    63da:	f8d8 1000 	ldr.w	r1, [r8]
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    63de:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    63e2:	7809      	ldrb	r1, [r1, #0]
    63e4:	430b      	orrs	r3, r1
		see_aa(aa);
    63e6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    63ea:	f7ff ff33 	bl	6254 <see_aa>

		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    63ee:	f8d8 1000 	ldr.w	r1, [r8]
    63f2:	2001      	movs	r0, #1
    63f4:	f7fe f864 	bl	44c0 <enqueue>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    63f8:	3701      	adds	r7, #1
    63fa:	f5b7 7f3c 	cmp.w	r7, #752	; 0x2f0
    63fe:	d18f      	bne.n	6320 <cb_le_promisc+0x78>
    6400:	2300      	movs	r3, #0
    6402:	4a12      	ldr	r2, [pc, #72]	; (644c <cb_le_promisc+0x1a4>)
    6404:	eb02 01c3 	add.w	r1, r2, r3, lsl #3

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
    6408:	6849      	ldr	r1, [r1, #4]
    640a:	2903      	cmp	r1, #3
    640c:	dd11      	ble.n	6432 <cb_le_promisc+0x18a>
			le_set_access_address(le_promisc.active_aa[i].aa);
    640e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    6412:	f7fe f8a1 	bl	4558 <le_set_access_address>
			data_cb = cb_follow_le;
    6416:	4b0e      	ldr	r3, [pc, #56]	; (6450 <cb_le_promisc+0x1a8>)
    6418:	4a0e      	ldr	r2, [pc, #56]	; (6454 <cb_le_promisc+0x1ac>)
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    641a:	2400      	movs	r4, #0

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
    641c:	62da      	str	r2, [r3, #44]	; 0x2c
			packet_cb = promisc_follow_cb;
    641e:	4a0e      	ldr	r2, [pc, #56]	; (6458 <cb_le_promisc+0x1b0>)
			le.crc_verify = 0;
			le_promisc_state(0, &le.access_address, 4);
    6420:	4620      	mov	r0, r4
	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
    6422:	619a      	str	r2, [r3, #24]
			le.crc_verify = 0;
			le_promisc_state(0, &le.access_address, 4);
    6424:	490d      	ldr	r1, [pc, #52]	; (645c <cb_le_promisc+0x1b4>)
    6426:	2204      	movs	r2, #4
	for (i = 0; i < AA_LIST_SIZE; ++i) {
		if (le_promisc.active_aa[i].count > 3) {
			le_set_access_address(le_promisc.active_aa[i].aa);
			data_cb = cb_follow_le;
			packet_cb = promisc_follow_cb;
			le.crc_verify = 0;
    6428:	616c      	str	r4, [r5, #20]
			le_promisc_state(0, &le.access_address, 4);
    642a:	f7ff fdf1 	bl	6010 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    642e:	4620      	mov	r0, r4
    6430:	e003      	b.n	643a <cb_le_promisc+0x192>
		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    6432:	3301      	adds	r3, #1
    6434:	2b20      	cmp	r3, #32
    6436:	d1e4      	bne.n	6402 <cb_le_promisc+0x15a>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    6438:	2001      	movs	r0, #1
}
    643a:	b014      	add	sp, #80	; 0x50
    643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6440:	10000448 	.word	0x10000448
    6444:	0000a558 	.word	0x0000a558
    6448:	0000adf0 	.word	0x0000adf0
    644c:	10001290 	.word	0x10001290
    6450:	10000a24 	.word	0x10000a24
    6454:	00004621 	.word	0x00004621
    6458:	000061e1 	.word	0x000061e1
    645c:	1000044c 	.word	0x1000044c
    6460:	100013a8 	.word	0x100013a8

00006464 <bt_promisc_le>:

void bt_promisc_le() {
    6464:	b538      	push	{r3, r4, r5, lr}
	while (requested_mode == MODE_BT_PROMISC_LE) {
    6466:	4c16      	ldr	r4, [pc, #88]	; (64c0 <bt_promisc_le+0x5c>)
    6468:	7ca3      	ldrb	r3, [r4, #18]
    646a:	2b0a      	cmp	r3, #10
    646c:	d126      	bne.n	64bc <bt_promisc_le+0x58>
		reset_le_promisc();

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    646e:	4d15      	ldr	r5, [pc, #84]	; (64c4 <bt_promisc_le+0x60>)
	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
		reset_le_promisc();
    6470:	f7ff faf4 	bl	5a5c <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    6474:	882b      	ldrh	r3, [r5, #0]
    6476:	07db      	lsls	r3, r3, #31
			channel = 2440;
    6478:	bf44      	itt	mi
    647a:	f640 1388 	movwmi	r3, #2440	; 0x988
    647e:	802b      	strhmi	r3, [r5, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    6480:	6cab      	ldr	r3, [r5, #72]	; 0x48
    6482:	b94b      	cbnz	r3, 6498 <bt_promisc_le+0x34>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
    6484:	4b0f      	ldr	r3, [pc, #60]	; (64c4 <bt_promisc_le+0x60>)
    6486:	8818      	ldrh	r0, [r3, #0]
    6488:	b280      	uxth	r0, r0
    648a:	f000 fea1 	bl	71d0 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    648e:	4b0e      	ldr	r3, [pc, #56]	; (64c8 <bt_promisc_le+0x64>)
			bt_generic_le(MODE_BT_PROMISC_LE);
    6490:	200a      	movs	r0, #10

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set(channel);
			data_cb = cb_le_promisc;
    6492:	62e3      	str	r3, [r4, #44]	; 0x2c
			bt_generic_le(MODE_BT_PROMISC_LE);
    6494:	f7ff faf2 	bl	5a7c <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    6498:	7ca4      	ldrb	r4, [r4, #18]
    649a:	b2e4      	uxtb	r4, r4
    649c:	2c0a      	cmp	r4, #10
    649e:	d10d      	bne.n	64bc <bt_promisc_le+0x58>
			break;

		le_promisc_state(0, &le.access_address, 4);
    64a0:	2000      	movs	r0, #0
    64a2:	490a      	ldr	r1, [pc, #40]	; (64cc <bt_promisc_le+0x68>)
    64a4:	2204      	movs	r2, #4
    64a6:	f7ff fdb3 	bl	6010 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    64aa:	4a09      	ldr	r2, [pc, #36]	; (64d0 <bt_promisc_le+0x6c>)
    64ac:	4b04      	ldr	r3, [pc, #16]	; (64c0 <bt_promisc_le+0x5c>)
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
    64ae:	4620      	mov	r0, r4
		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
			break;

		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
    64b0:	619a      	str	r2, [r3, #24]
		le.crc_verify = 0;
    64b2:	2300      	movs	r3, #0
    64b4:	616b      	str	r3, [r5, #20]
		bt_le_sync(MODE_BT_PROMISC_LE);
    64b6:	f7ff fbd3 	bl	5c60 <bt_le_sync>
    64ba:	e7d4      	b.n	6466 <bt_promisc_le+0x2>
    64bc:	bd38      	pop	{r3, r4, r5, pc}
    64be:	bf00      	nop
    64c0:	10000a24 	.word	0x10000a24
    64c4:	10000448 	.word	0x10000448
    64c8:	000062a9 	.word	0x000062a9
    64cc:	1000044c 	.word	0x1000044c
    64d0:	000061e1 	.word	0x000061e1

000064d4 <bt_slave_le>:
	}
}

void bt_slave_le() {
    64d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    64d6:	466a      	mov	r2, sp
    64d8:	466c      	mov	r4, sp
    64da:	4b24      	ldr	r3, [pc, #144]	; (656c <bt_slave_le+0x98>)
    64dc:	f103 0608 	add.w	r6, r3, #8
    64e0:	4615      	mov	r5, r2
    64e2:	6818      	ldr	r0, [r3, #0]
    64e4:	6859      	ldr	r1, [r3, #4]
    64e6:	3308      	adds	r3, #8
    64e8:	c503      	stmia	r5!, {r0, r1}
    64ea:	42b3      	cmp	r3, r6
    64ec:	462a      	mov	r2, r5
    64ee:	d1f7      	bne.n	64e0 <bt_slave_le+0xc>
    64f0:	6818      	ldr	r0, [r3, #0]
    64f2:	889b      	ldrh	r3, [r3, #4]
    64f4:	6028      	str	r0, [r5, #0]
    64f6:	80ab      	strh	r3, [r5, #4]
    64f8:	f10d 0201 	add.w	r2, sp, #1
    64fc:	2305      	movs	r3, #5

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
		adv_ind[i+2] = slave_mac_address[5-i];
    64fe:	491c      	ldr	r1, [pc, #112]	; (6570 <bt_slave_le+0x9c>)
    6500:	5c59      	ldrb	r1, [r3, r1]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    6502:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
		adv_ind[i+2] = slave_mac_address[5-i];
    6506:	f802 1f01 	strb.w	r1, [r2, #1]!
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    650a:	d2f8      	bcs.n	64fe <bt_slave_le+0x2a>
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    650c:	4b19      	ldr	r3, [pc, #100]	; (6574 <bt_slave_le+0xa0>)
    650e:	4621      	mov	r1, r4
    6510:	6918      	ldr	r0, [r3, #16]
    6512:	220b      	movs	r2, #11
    6514:	f000 fc3b 	bl	6d8e <btle_calc_crc>
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    6518:	0a03      	lsrs	r3, r0, #8
	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    651a:	f88d 000b 	strb.w	r0, [sp, #11]
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    651e:	0c00      	lsrs	r0, r0, #16
	for (i = 0; i < 6; ++i)
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    6520:	f88d 300c 	strb.w	r3, [sp, #12]
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    6524:	f88d 000d 	strb.w	r0, [sp, #13]

	clkn_start();
    6528:	f000 feee 	bl	7308 <clkn_start>

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    652c:	4b12      	ldr	r3, [pc, #72]	; (6578 <bt_slave_le+0xa4>)
    652e:	7c9b      	ldrb	r3, [r3, #18]
    6530:	2b0c      	cmp	r3, #12
    6532:	d119      	bne.n	6568 <bt_slave_le+0x94>
		ICER0 = ICER0_ICE_USB;
    6534:	4b11      	ldr	r3, [pc, #68]	; (657c <bt_slave_le+0xa8>)
    6536:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
		ICER0 = ICER0_ICE_DMA;
    653a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000

	clkn_start();

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
		ICER0 = ICER0_ICE_USB;
    653e:	601e      	str	r6, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    6540:	4622      	mov	r2, r4
	clkn_start();

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
    6542:	601d      	str	r5, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    6544:	480e      	ldr	r0, [pc, #56]	; (6580 <bt_slave_le+0xac>)
    6546:	210e      	movs	r1, #14
    6548:	f7fe fe8e 	bl	5268 <le_transmit>
		ISER0 = ISER0_ISE_USB;
    654c:	4b0d      	ldr	r3, [pc, #52]	; (6584 <bt_slave_le+0xb0>)
 * Sleep (busy wait) for 'millis' milliseconds
 * Needs clkn. Be sure to call clkn_init() before using it.
 */
static void msleep(uint32_t millis)
{
	uint32_t now = (clkn & 0xffffff);
    654e:	4a0e      	ldr	r2, [pc, #56]	; (6588 <bt_slave_le+0xb4>)
	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
		ICER0 = ICER0_ICE_USB;
		ICER0 = ICER0_ICE_DMA;
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
		ISER0 = ISER0_ISE_USB;
    6550:	601e      	str	r6, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    6552:	601d      	str	r5, [r3, #0]
 * Sleep (busy wait) for 'millis' milliseconds
 * Needs clkn. Be sure to call clkn_init() before using it.
 */
static void msleep(uint32_t millis)
{
	uint32_t now = (clkn & 0xffffff);
    6554:	6813      	ldr	r3, [r2, #0]
    6556:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	uint32_t stop_at = now + millis * 10000 / 3125; // millis -> clkn ticks
    655a:	3320      	adds	r3, #32
	// handle clkn overflow
	if (stop_at >= ((uint32_t)1<<28)) {
		stop_at -= ((uint32_t)1<<28);
		while ((clkn & 0xffffff) >= now || (clkn & 0xffffff) < stop_at);
	} else {
		while ((clkn & 0xffffff) < stop_at);
    655c:	6811      	ldr	r1, [r2, #0]
    655e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    6562:	4299      	cmp	r1, r3
    6564:	d3fa      	bcc.n	655c <bt_slave_le+0x88>
    6566:	e7e1      	b.n	652c <bt_slave_le+0x58>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(10);// sleep in miliseconds
	}
}
    6568:	b004      	add	sp, #16
    656a:	bd70      	pop	{r4, r5, r6, pc}
    656c:	0000ae00 	.word	0x0000ae00
    6570:	10000a44 	.word	0x10000a44
    6574:	10000448 	.word	0x10000448
    6578:	10000a24 	.word	0x10000a24
    657c:	e000e180 	.word	0xe000e180
    6580:	8e89bed6 	.word	0x8e89bed6
    6584:	e000e100 	.word	0xe000e100
    6588:	1000124c 	.word	0x1000124c

0000658c <rx_generic_sync>:

void rx_generic_sync(void) {
    658c:	b510      	push	{r4, lr}
    658e:	b08a      	sub	sp, #40	; 0x28
	u16 reg_val;

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
    6590:	202d      	movs	r0, #45	; 0x2d
    6592:	f002 fe8b 	bl	92ac <cc2400_get>
	buf[0] = (reg_val >> 8) & 0xFF;
    6596:	0a03      	lsrs	r3, r0, #8
	buf[1] = reg_val & 0xFF;
    6598:	f88d 0005 	strb.w	r0, [sp, #5]
	reg_val = cc2400_get(SYNCL);
    659c:	202c      	movs	r0, #44	; 0x2c

	/* Put syncword at start of buffer
	 * DGS: fix this later, we don't know number of syncword bytes, etc
	 */
	reg_val = cc2400_get(SYNCH);
	buf[0] = (reg_val >> 8) & 0xFF;
    659e:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = reg_val & 0xFF;
	reg_val = cc2400_get(SYNCL);
    65a2:	f002 fe83 	bl	92ac <cc2400_get>
	buf[2] = (reg_val >> 8) & 0xFF;
    65a6:	0a03      	lsrs	r3, r0, #8
    65a8:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = reg_val & 0xFF;
    65ac:	f88d 0007 	strb.w	r0, [sp, #7]

	usb_queue_init();
    65b0:	f000 fd20 	bl	6ff4 <usb_queue_init>
	clkn_start();
    65b4:	f000 fea8 	bl	7308 <clkn_start>

	while (!(cc2400_status() & XOSC16M_STABLE));
    65b8:	f002 ff22 	bl	9400 <cc2400_status>
    65bc:	0641      	lsls	r1, r0, #25
    65be:	d5fb      	bpl.n	65b8 <rx_generic_sync+0x2c>
	cc2400_strobe(SFSON);
    65c0:	2061      	movs	r0, #97	; 0x61
    65c2:	f002 ff24 	bl	940e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    65c6:	f002 ff1b 	bl	9400 <cc2400_status>
    65ca:	0742      	lsls	r2, r0, #29
    65cc:	d5fb      	bpl.n	65c6 <rx_generic_sync+0x3a>
	RXLED_SET;
    65ce:	4b15      	ldr	r3, [pc, #84]	; (6624 <rx_generic_sync+0x98>)
    65d0:	2210      	movs	r2, #16
    65d2:	461c      	mov	r4, r3
    65d4:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    65d6:	4a14      	ldr	r2, [pc, #80]	; (6628 <rx_generic_sync+0x9c>)
    65d8:	2180      	movs	r1, #128	; 0x80
    65da:	6011      	str	r1, [r2, #0]
		HGM_SET;
    65dc:	f44f 7180 	mov.w	r1, #256	; 0x100
    65e0:	6011      	str	r1, [r2, #0]
#endif
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    65e2:	200e      	movs	r0, #14
    65e4:	f002 fe62 	bl	92ac <cc2400_get>
    65e8:	f000 001f 	and.w	r0, r0, #31
    65ec:	280f      	cmp	r0, #15
    65ee:	d1f8      	bne.n	65e2 <rx_generic_sync+0x56>
		cc2400_strobe(SRX);
    65f0:	2062      	movs	r0, #98	; 0x62
    65f2:	f002 ff0c 	bl	940e <cc2400_strobe>
		USRLED_CLR;
    65f6:	4b0d      	ldr	r3, [pc, #52]	; (662c <rx_generic_sync+0xa0>)
    65f8:	2202      	movs	r2, #2
    65fa:	601a      	str	r2, [r3, #0]
		while (!(cc2400_status() & SYNC_RECEIVED));
    65fc:	f002 ff00 	bl	9400 <cc2400_status>
    6600:	06c3      	lsls	r3, r0, #27
    6602:	d5fb      	bpl.n	65fc <rx_generic_sync+0x70>
		USRLED_SET;
    6604:	2302      	movs	r3, #2
    6606:	6023      	str	r3, [r4, #0]

		cc2400_fifo_read(len, buf+4);
    6608:	a902      	add	r1, sp, #8
    660a:	2020      	movs	r0, #32
    660c:	f002 feae 	bl	936c <cc2400_fifo_read>
		enqueue(BR_PACKET, buf);
    6610:	a901      	add	r1, sp, #4
    6612:	2000      	movs	r0, #0
    6614:	f7fd ff54 	bl	44c0 <enqueue>
		handle_usb(clkn);
    6618:	4b05      	ldr	r3, [pc, #20]	; (6630 <rx_generic_sync+0xa4>)
    661a:	6818      	ldr	r0, [r3, #0]
    661c:	f000 fd4c 	bl	70b8 <handle_usb>
	}
    6620:	e7df      	b.n	65e2 <rx_generic_sync+0x56>
    6622:	bf00      	nop
    6624:	2009c038 	.word	0x2009c038
    6628:	2009c058 	.word	0x2009c058
    662c:	2009c03c 	.word	0x2009c03c
    6630:	1000124c 	.word	0x1000124c

00006634 <rx_generic>:
}

void rx_generic(void) {
    6634:	b508      	push	{r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
    6636:	2020      	movs	r0, #32
    6638:	f002 fe38 	bl	92ac <cc2400_get>
    663c:	b108      	cbz	r0, 6642 <rx_generic+0xe>
		rx_generic_sync();
    663e:	f7ff ffa5 	bl	658c <rx_generic_sync>
	} else {
		modulation = MOD_NONE;
    6642:	4b03      	ldr	r3, [pc, #12]	; (6650 <rx_generic+0x1c>)
    6644:	2203      	movs	r2, #3
    6646:	701a      	strb	r2, [r3, #0]
		bt_stream_rx();
	}
}
    6648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	// Check for packet mode
	if(cc2400_get(GRMDM) && 0x0400) {
		rx_generic_sync();
	} else {
		modulation = MOD_NONE;
		bt_stream_rx();
    664c:	f7fe bff0 	b.w	5630 <bt_stream_rx>
    6650:	10000a24 	.word	0x10000a24

00006654 <tx_generic>:
	}
}

void tx_generic(void) {
    6654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u16 synch, syncl;
	u8 prev_mode = mode;
    6658:	4d35      	ldr	r5, [pc, #212]	; (6730 <tx_generic+0xdc>)

	mode = MODE_TX_GENERIC;
    665a:	2310      	movs	r3, #16

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    665c:	202d      	movs	r0, #45	; 0x2d
	}
}

void tx_generic(void) {
	u16 synch, syncl;
	u8 prev_mode = mode;
    665e:	7c6e      	ldrb	r6, [r5, #17]

	mode = MODE_TX_GENERIC;
    6660:	746b      	strb	r3, [r5, #17]

	// Save existing syncword
	synch = cc2400_get(SYNCH);
    6662:	f002 fe23 	bl	92ac <cc2400_get>
    6666:	4680      	mov	r8, r0
	syncl = cc2400_get(SYNCL);
    6668:	202c      	movs	r0, #44	; 0x2c
    666a:	f002 fe1f 	bl	92ac <cc2400_get>

	cc2400_set(SYNCH, tx_pkt.synch);
    666e:	4c31      	ldr	r4, [pc, #196]	; (6734 <tx_generic+0xe0>)

	mode = MODE_TX_GENERIC;

	// Save existing syncword
	synch = cc2400_get(SYNCH);
	syncl = cc2400_get(SYNCL);
    6670:	4607      	mov	r7, r0

	cc2400_set(SYNCH, tx_pkt.synch);
    6672:	8821      	ldrh	r1, [r4, #0]
    6674:	202d      	movs	r0, #45	; 0x2d
    6676:	f002 fe22 	bl	92be <cc2400_set>
	cc2400_set(SYNCL, tx_pkt.syncl);
    667a:	202c      	movs	r0, #44	; 0x2c
    667c:	8861      	ldrh	r1, [r4, #2]
    667e:	f002 fe1e 	bl	92be <cc2400_set>
	cc2400_set(MDMCTRL, 0x0057);
    6682:	2003      	movs	r0, #3
    6684:	2157      	movs	r1, #87	; 0x57
    6686:	f002 fe1a 	bl	92be <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    668a:	2014      	movs	r0, #20
    668c:	f241 314b 	movw	r1, #4939	; 0x134b
    6690:	f002 fe15 	bl	92be <cc2400_set>
	cc2400_set(GRMDM, 0x0f61);
    6694:	2020      	movs	r0, #32
    6696:	f640 7161 	movw	r1, #3937	; 0xf61
    669a:	f002 fe10 	bl	92be <cc2400_set>
	cc2400_set(FSDIV, tx_pkt.channel);
    669e:	2002      	movs	r0, #2
    66a0:	88a1      	ldrh	r1, [r4, #4]
    66a2:	f002 fe0c 	bl	92be <cc2400_set>
	cc2400_set(FREND, tx_pkt.pa_level);
    66a6:	2005      	movs	r0, #5
    66a8:	79e1      	ldrb	r1, [r4, #7]
	}
}

void tx_generic(void) {
	u16 synch, syncl;
	u8 prev_mode = mode;
    66aa:	b2f6      	uxtb	r6, r6
	cc2400_set(SYNCL, tx_pkt.syncl);
	cc2400_set(MDMCTRL, 0x0057);
	cc2400_set(MDMTST0, 0x134b);
	cc2400_set(GRMDM, 0x0f61);
	cc2400_set(FSDIV, tx_pkt.channel);
	cc2400_set(FREND, tx_pkt.pa_level);
    66ac:	f002 fe07 	bl	92be <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    66b0:	f002 fea6 	bl	9400 <cc2400_status>
    66b4:	0641      	lsls	r1, r0, #25
    66b6:	d5fb      	bpl.n	66b0 <tx_generic+0x5c>
	cc2400_strobe(SFSON);
    66b8:	2061      	movs	r0, #97	; 0x61
    66ba:	f002 fea8 	bl	940e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    66be:	f002 fe9f 	bl	9400 <cc2400_status>
    66c2:	0742      	lsls	r2, r0, #29
    66c4:	d5fb      	bpl.n	66be <tx_generic+0x6a>
	TXLED_SET;
    66c6:	4b1c      	ldr	r3, [pc, #112]	; (6738 <tx_generic+0xe4>)
    66c8:	f44f 7280 	mov.w	r2, #256	; 0x100
    66cc:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    66ce:	2280      	movs	r2, #128	; 0x80
    66d0:	621a      	str	r2, [r3, #32]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    66d2:	200e      	movs	r0, #14
    66d4:	f002 fdea 	bl	92ac <cc2400_get>
    66d8:	f000 001f 	and.w	r0, r0, #31
    66dc:	280f      	cmp	r0, #15
    66de:	d1f8      	bne.n	66d2 <tx_generic+0x7e>

	cc2400_fifo_write(tx_pkt.length, tx_pkt.data);
    66e0:	79a0      	ldrb	r0, [r4, #6]
    66e2:	4916      	ldr	r1, [pc, #88]	; (673c <tx_generic+0xe8>)
    66e4:	f002 fdfe 	bl	92e4 <cc2400_fifo_write>
	cc2400_strobe(STX);
    66e8:	2063      	movs	r0, #99	; 0x63
    66ea:	f002 fe90 	bl	940e <cc2400_strobe>

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    66ee:	200e      	movs	r0, #14
    66f0:	f002 fddc 	bl	92ac <cc2400_get>
    66f4:	f000 001f 	and.w	r0, r0, #31
    66f8:	280f      	cmp	r0, #15
    66fa:	d1f8      	bne.n	66ee <tx_generic+0x9a>
	TXLED_CLR;
    66fc:	4b10      	ldr	r3, [pc, #64]	; (6740 <tx_generic+0xec>)
    66fe:	f44f 7280 	mov.w	r2, #256	; 0x100
    6702:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    6704:	2064      	movs	r0, #100	; 0x64
    6706:	f002 fe82 	bl	940e <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    670a:	f002 fe79 	bl	9400 <cc2400_status>
    670e:	0743      	lsls	r3, r0, #29
    6710:	d4fb      	bmi.n	670a <tx_generic+0xb6>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    6712:	4b0c      	ldr	r3, [pc, #48]	; (6744 <tx_generic+0xf0>)
    6714:	2280      	movs	r2, #128	; 0x80
    6716:	601a      	str	r2, [r3, #0]
#endif

	// Restore state
	cc2400_set(SYNCH, synch);
    6718:	202d      	movs	r0, #45	; 0x2d
    671a:	4641      	mov	r1, r8
    671c:	f002 fdcf 	bl	92be <cc2400_set>
	cc2400_set(SYNCL, syncl);
    6720:	202c      	movs	r0, #44	; 0x2c
    6722:	4639      	mov	r1, r7
    6724:	f002 fdcb 	bl	92be <cc2400_set>
	requested_mode = prev_mode;
    6728:	74ae      	strb	r6, [r5, #18]
    672a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    672e:	bf00      	nop
    6730:	10000a24 	.word	0x10000a24
    6734:	10001250 	.word	0x10001250
    6738:	2009c038 	.word	0x2009c038
    673c:	10001258 	.word	0x10001258
    6740:	2009c03c 	.word	0x2009c03c
    6744:	2009c05c 	.word	0x2009c05c

00006748 <specan>:
}

/* spectrum analysis */
void specan()
{
    6748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    674c:	b08e      	sub	sp, #56	; 0x38
	u16 f;
	u8 i = 0;
	u8 buf[DMA_SIZE];

	RXLED_SET;
    674e:	4b3d      	ldr	r3, [pc, #244]	; (6844 <specan+0xfc>)
    6750:	2210      	movs	r2, #16
    6752:	601a      	str	r2, [r3, #0]

	usb_queue_init();
    6754:	f000 fc4e 	bl	6ff4 <usb_queue_init>
	clkn_start();
    6758:	f000 fdd6 	bl	7308 <clkn_start>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    675c:	4b3a      	ldr	r3, [pc, #232]	; (6848 <specan+0x100>)
    675e:	2280      	movs	r2, #128	; 0x80
    6760:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    6762:	2012      	movs	r0, #18
    6764:	f642 3122 	movw	r1, #11042	; 0x2b22
    6768:	f002 fda9 	bl	92be <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    676c:	2014      	movs	r0, #20
    676e:	f241 314b 	movw	r1, #4939	; 0x134b
    6772:	f002 fda4 	bl	92be <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    6776:	2020      	movs	r0, #32
    6778:	f240 1101 	movw	r1, #257	; 0x101
    677c:	f002 fd9f 	bl	92be <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    6780:	2003      	movs	r0, #3
    6782:	2129      	movs	r1, #41	; 0x29
    6784:	f002 fd9b 	bl	92be <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    6788:	f002 fe3a 	bl	9400 <cc2400_status>
    678c:	0641      	lsls	r1, r0, #25
    678e:	d5fb      	bpl.n	6788 <specan+0x40>
	while ((cc2400_status() & FS_LOCK));
    6790:	f002 fe36 	bl	9400 <cc2400_status>
    6794:	f000 0004 	and.w	r0, r0, #4
    6798:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    679c:	2800      	cmp	r0, #0
    679e:	d1f7      	bne.n	6790 <specan+0x48>

	while (requested_mode == MODE_SPECAN) {
    67a0:	4b2a      	ldr	r3, [pc, #168]	; (684c <specan+0x104>)
    67a2:	7c9b      	ldrb	r3, [r3, #18]
    67a4:	2b04      	cmp	r3, #4
    67a6:	d147      	bne.n	6838 <specan+0xf0>
		for (f = low_freq; f < high_freq + 1; f++) {
    67a8:	4b29      	ldr	r3, [pc, #164]	; (6850 <specan+0x108>)
    67aa:	4698      	mov	r8, r3
    67ac:	f8b3 5054 	ldrh.w	r5, [r3, #84]	; 0x54
    67b0:	b2ad      	uxth	r5, r5
    67b2:	f8b8 3056 	ldrh.w	r3, [r8, #86]	; 0x56
    67b6:	b29b      	uxth	r3, r3
    67b8:	42ab      	cmp	r3, r5
    67ba:	dbf1      	blt.n	67a0 <specan+0x58>
    67bc:	1e69      	subs	r1, r5, #1
			cc2400_set(FSDIV, f - 1);
    67be:	2002      	movs	r0, #2
    67c0:	b289      	uxth	r1, r1
    67c2:	f002 fd7c 	bl	92be <cc2400_set>
			cc2400_strobe(SFSON);
    67c6:	2061      	movs	r0, #97	; 0x61
    67c8:	f002 fe21 	bl	940e <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    67cc:	f002 fe18 	bl	9400 <cc2400_status>
    67d0:	0742      	lsls	r2, r0, #29
    67d2:	d5fb      	bpl.n	67cc <specan+0x84>
			cc2400_strobe(SRX);
    67d4:	2062      	movs	r0, #98	; 0x62
    67d6:	f002 fe1a 	bl	940e <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    67da:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    67de:	9300      	str	r3, [sp, #0]
    67e0:	9e00      	ldr	r6, [sp, #0]
    67e2:	3e01      	subs	r6, #1
    67e4:	9600      	str	r6, [sp, #0]
    67e6:	2e00      	cmp	r6, #0
    67e8:	d1fa      	bne.n	67e0 <specan+0x98>
			buf[3 * i] = (f >> 8) & 0xFF;
    67ea:	eb04 0744 	add.w	r7, r4, r4, lsl #1
    67ee:	ab0e      	add	r3, sp, #56	; 0x38
    67f0:	441f      	add	r7, r3
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    67f2:	2006      	movs	r0, #6
			while (!(cc2400_status() & FS_LOCK));
			cc2400_strobe(SRX);

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
    67f4:	0a2b      	lsrs	r3, r5, #8
    67f6:	f807 3c34 	strb.w	r3, [r7, #-52]
			buf[(3 * i) + 1] = f  & 0xFF;
    67fa:	f807 5c33 	strb.w	r5, [r7, #-51]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    67fe:	f002 fd55 	bl	92ac <cc2400_get>
			i++;
    6802:	3401      	adds	r4, #1
    6804:	b2e4      	uxtb	r4, r4

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    6806:	0a00      	lsrs	r0, r0, #8
			i++;
			if (i == 16) {
    6808:	2c10      	cmp	r4, #16

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
			buf[3 * i] = (f >> 8) & 0xFF;
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    680a:	f807 0c32 	strb.w	r0, [r7, #-50]
			i++;
			if (i == 16) {
    680e:	d109      	bne.n	6824 <specan+0xdc>
				enqueue(SPECAN, buf);
    6810:	2004      	movs	r0, #4
    6812:	eb0d 0100 	add.w	r1, sp, r0
    6816:	f7fd fe53 	bl	44c0 <enqueue>
				i = 0;

				handle_usb(clkn);
    681a:	4b0e      	ldr	r3, [pc, #56]	; (6854 <specan+0x10c>)
			buf[(3 * i) + 1] = f  & 0xFF;
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
			i++;
			if (i == 16) {
				enqueue(SPECAN, buf);
				i = 0;
    681c:	4634      	mov	r4, r6

				handle_usb(clkn);
    681e:	6818      	ldr	r0, [r3, #0]
    6820:	f000 fc4a 	bl	70b8 <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    6824:	2064      	movs	r0, #100	; 0x64
    6826:	f002 fdf2 	bl	940e <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    682a:	f002 fde9 	bl	9400 <cc2400_status>
    682e:	0743      	lsls	r3, r0, #29
    6830:	d4fb      	bmi.n	682a <specan+0xe2>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    6832:	3501      	adds	r5, #1
    6834:	b2ad      	uxth	r5, r5
    6836:	e7bc      	b.n	67b2 <specan+0x6a>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	RXLED_CLR;
    6838:	4b07      	ldr	r3, [pc, #28]	; (6858 <specan+0x110>)
    683a:	2210      	movs	r2, #16
    683c:	601a      	str	r2, [r3, #0]
}
    683e:	b00e      	add	sp, #56	; 0x38
    6840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6844:	2009c038 	.word	0x2009c038
    6848:	2009c058 	.word	0x2009c058
    684c:	10000a24 	.word	0x10000a24
    6850:	10000448 	.word	0x10000448
    6854:	1000124c 	.word	0x1000124c
    6858:	2009c03c 	.word	0x2009c03c

0000685c <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    685c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    685e:	4b44      	ldr	r3, [pc, #272]	; (6970 <led_specan+0x114>)
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6860:	2280      	movs	r2, #128	; 0x80
/* LED based spectrum analysis */
void led_specan()
{
	int8_t lvl;
	u8 i = 0;
	u16 channels[3] = {2412, 2437, 2462};
    6862:	6818      	ldr	r0, [r3, #0]
    6864:	889b      	ldrh	r3, [r3, #4]
    6866:	9002      	str	r0, [sp, #8]
    6868:	f8ad 300c 	strh.w	r3, [sp, #12]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    686c:	4b41      	ldr	r3, [pc, #260]	; (6974 <led_specan+0x118>)
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    686e:	2012      	movs	r0, #18
	u16 channels[3] = {2412, 2437, 2462};
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6870:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    6872:	f642 3122 	movw	r1, #11042	; 0x2b22
    6876:	f002 fd22 	bl	92be <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    687a:	2014      	movs	r0, #20
    687c:	f241 314b 	movw	r1, #4939	; 0x134b
    6880:	f002 fd1d 	bl	92be <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    6884:	2020      	movs	r0, #32
    6886:	f240 1101 	movw	r1, #257	; 0x101
    688a:	f002 fd18 	bl	92be <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    688e:	2003      	movs	r0, #3
    6890:	2129      	movs	r1, #41	; 0x29
    6892:	f002 fd14 	bl	92be <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    6896:	2006      	movs	r0, #6
    6898:	21f1      	movs	r1, #241	; 0xf1
    689a:	f002 fd10 	bl	92be <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    689e:	f002 fdaf 	bl	9400 <cc2400_status>
    68a2:	0641      	lsls	r1, r0, #25
    68a4:	d5fb      	bpl.n	689e <led_specan+0x42>
	while ((cc2400_status() & FS_LOCK));
    68a6:	f002 fdab 	bl	9400 <cc2400_status>
    68aa:	f000 0004 	and.w	r0, r0, #4
    68ae:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    68b2:	2800      	cmp	r0, #0
    68b4:	d1f7      	bne.n	68a6 <led_specan+0x4a>

	while (requested_mode == MODE_LED_SPECAN) {
    68b6:	4b30      	ldr	r3, [pc, #192]	; (6978 <led_specan+0x11c>)
    68b8:	7c9b      	ldrb	r3, [r3, #18]
    68ba:	2b07      	cmp	r3, #7
    68bc:	d156      	bne.n	696c <led_specan+0x110>
		cc2400_set(FSDIV, channels[i] - 1);
    68be:	ab04      	add	r3, sp, #16
    68c0:	eb03 0344 	add.w	r3, r3, r4, lsl #1
    68c4:	f833 1c08 	ldrh.w	r1, [r3, #-8]
    68c8:	2002      	movs	r0, #2
    68ca:	3901      	subs	r1, #1
    68cc:	b289      	uxth	r1, r1
    68ce:	f002 fcf6 	bl	92be <cc2400_set>
		cc2400_strobe(SFSON);
    68d2:	2061      	movs	r0, #97	; 0x61
    68d4:	f002 fd9b 	bl	940e <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    68d8:	f002 fd92 	bl	9400 <cc2400_status>
    68dc:	0742      	lsls	r2, r0, #29
    68de:	d5fb      	bpl.n	68d8 <led_specan+0x7c>
		cc2400_strobe(SRX);
    68e0:	2062      	movs	r0, #98	; 0x62
    68e2:	f002 fd94 	bl	940e <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    68e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    68ea:	9301      	str	r3, [sp, #4]
    68ec:	9b01      	ldr	r3, [sp, #4]
    68ee:	3b01      	subs	r3, #1
    68f0:	9301      	str	r3, [sp, #4]
    68f2:	2b00      	cmp	r3, #0
    68f4:	d1fa      	bne.n	68ec <led_specan+0x90>
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
    68f6:	2006      	movs	r0, #6
    68f8:	f002 fcd8 	bl	92ac <cc2400_get>
		if (lvl > rssi_threshold) {
    68fc:	4b1f      	ldr	r3, [pc, #124]	; (697c <led_specan+0x120>)
    68fe:	f340 2007 	sbfx	r0, r0, #8, #8
    6902:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    6906:	b25b      	sxtb	r3, r3
    6908:	4298      	cmp	r0, r3
    690a:	dd0c      	ble.n	6926 <led_specan+0xca>
			switch (i) {
    690c:	2c01      	cmp	r4, #1
    690e:	d007      	beq.n	6920 <led_specan+0xc4>
    6910:	d303      	bcc.n	691a <led_specan+0xbe>
    6912:	2c02      	cmp	r4, #2
    6914:	d116      	bne.n	6944 <led_specan+0xe8>
					break;
				case 1:
					RXLED_SET;
					break;
				case 2:
					USRLED_SET;
    6916:	4b1a      	ldr	r3, [pc, #104]	; (6980 <led_specan+0x124>)
    6918:	e013      	b.n	6942 <led_specan+0xe6>
		volatile u32 j = 500; while (--j); //FIXME crude delay
		lvl = (int8_t)((cc2400_get(RSSI) >> 8) & 0xff);
		if (lvl > rssi_threshold) {
			switch (i) {
				case 0:
					TXLED_SET;
    691a:	f44f 7280 	mov.w	r2, #256	; 0x100
    691e:	e000      	b.n	6922 <led_specan+0xc6>
					break;
				case 1:
					RXLED_SET;
    6920:	2210      	movs	r2, #16
    6922:	4b17      	ldr	r3, [pc, #92]	; (6980 <led_specan+0x124>)
    6924:	e00b      	b.n	693e <led_specan+0xe2>
					USRLED_SET;
					break;
			}
		}
		else {
			switch (i) {
    6926:	2c01      	cmp	r4, #1
    6928:	d007      	beq.n	693a <led_specan+0xde>
    692a:	d303      	bcc.n	6934 <led_specan+0xd8>
    692c:	2c02      	cmp	r4, #2
    692e:	d109      	bne.n	6944 <led_specan+0xe8>
					break;
				case 1:
					RXLED_CLR;
					break;
				case 2:
					USRLED_CLR;
    6930:	4b14      	ldr	r3, [pc, #80]	; (6984 <led_specan+0x128>)
    6932:	e006      	b.n	6942 <led_specan+0xe6>
			}
		}
		else {
			switch (i) {
				case 0:
					TXLED_CLR;
    6934:	f44f 7280 	mov.w	r2, #256	; 0x100
    6938:	e000      	b.n	693c <led_specan+0xe0>
					break;
				case 1:
					RXLED_CLR;
    693a:	2210      	movs	r2, #16
    693c:	4b11      	ldr	r3, [pc, #68]	; (6984 <led_specan+0x128>)
    693e:	601a      	str	r2, [r3, #0]
					break;
    6940:	e000      	b.n	6944 <led_specan+0xe8>
				case 2:
					USRLED_CLR;
    6942:	601c      	str	r4, [r3, #0]
					break;
			}
		}

		i = (i+1) % 3;
    6944:	3401      	adds	r4, #1
    6946:	2303      	movs	r3, #3
    6948:	fb94 f3f3 	sdiv	r3, r4, r3
    694c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6950:	1ae4      	subs	r4, r4, r3

		handle_usb(clkn);
    6952:	4b0d      	ldr	r3, [pc, #52]	; (6988 <led_specan+0x12c>)
					USRLED_CLR;
					break;
			}
		}

		i = (i+1) % 3;
    6954:	b2e4      	uxtb	r4, r4

		handle_usb(clkn);
    6956:	6818      	ldr	r0, [r3, #0]
    6958:	f000 fbae 	bl	70b8 <handle_usb>

		cc2400_strobe(SRFOFF);
    695c:	2064      	movs	r0, #100	; 0x64
    695e:	f002 fd56 	bl	940e <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    6962:	f002 fd4d 	bl	9400 <cc2400_status>
    6966:	0743      	lsls	r3, r0, #29
    6968:	d4fb      	bmi.n	6962 <led_specan+0x106>
    696a:	e7a4      	b.n	68b6 <led_specan+0x5a>
	}
}
    696c:	b004      	add	sp, #16
    696e:	bd10      	pop	{r4, pc}
    6970:	0000ae0e 	.word	0x0000ae0e
    6974:	2009c058 	.word	0x2009c058
    6978:	10000a24 	.word	0x10000a24
    697c:	10000448 	.word	0x10000448
    6980:	2009c038 	.word	0x2009c038
    6984:	2009c03c 	.word	0x2009c03c
    6988:	1000124c 	.word	0x1000124c

0000698c <main>:

int main()
{
    698c:	b508      	push	{r3, lr}
	ubertooth_init();
    698e:	f002 fdf9 	bl	9584 <ubertooth_init>
	clkn_init();
    6992:	f000 fcbf 	bl	7314 <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    6996:	4838      	ldr	r0, [pc, #224]	; (6a78 <main+0xec>)
    6998:	f000 fb06 	bl	6fa8 <ubertooth_usb_init>
	cc2400_idle();
    699c:	f7fd fde8 	bl	4570 <cc2400_idle>
	dma_poweron();
    69a0:	f000 fcd6 	bl	7350 <dma_poweron>

	debug_uart_init(0);
    69a4:	2000      	movs	r0, #0
    69a6:	f001 ffe3 	bl	8970 <debug_uart_init>
	debug_printf("\n\n****UBERTOOTH BOOT****\n%s\n", compile_info);
    69aa:	4834      	ldr	r0, [pc, #208]	; (6a7c <main+0xf0>)
    69ac:	4934      	ldr	r1, [pc, #208]	; (6a80 <main+0xf4>)
    69ae:	f002 f83b 	bl	8a28 <debug_printf>

	while (1) {
		handle_usb(clkn);
    69b2:	4b34      	ldr	r3, [pc, #208]	; (6a84 <main+0xf8>)
		if(requested_mode != mode) {
    69b4:	4c34      	ldr	r4, [pc, #208]	; (6a88 <main+0xfc>)

	debug_uart_init(0);
	debug_printf("\n\n****UBERTOOTH BOOT****\n%s\n", compile_info);

	while (1) {
		handle_usb(clkn);
    69b6:	6818      	ldr	r0, [r3, #0]
    69b8:	f000 fb7e 	bl	70b8 <handle_usb>
		if(requested_mode != mode) {
    69bc:	7ca2      	ldrb	r2, [r4, #18]
    69be:	7c63      	ldrb	r3, [r4, #17]
    69c0:	429a      	cmp	r2, r3
    69c2:	d0f6      	beq.n	69b2 <main+0x26>
			switch (requested_mode) {
    69c4:	7ca3      	ldrb	r3, [r4, #18]
    69c6:	2b10      	cmp	r3, #16
    69c8:	d8f3      	bhi.n	69b2 <main+0x26>
    69ca:	e8df f003 	tbb	[pc, r3]
    69ce:	1151      	.short	0x1151
    69d0:	2f3d2816 	.word	0x2f3d2816
    69d4:	1d1b4037 	.word	0x1d1b4037
    69d8:	43250922 	.word	0x43250922
    69dc:	490f      	.short	0x490f
    69de:	4e          	.byte	0x4e
    69df:	00          	.byte	0x00
				case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    69e0:	2001      	movs	r0, #1
    69e2:	f002 fb93 	bl	910c <wait>
					reset();
    69e6:	f002 fdd7 	bl	9598 <reset>
					break;
    69ea:	e7e2      	b.n	69b2 <main+0x26>
				case MODE_AFH:
					mode = MODE_AFH;
    69ec:	230e      	movs	r3, #14
    69ee:	e000      	b.n	69f2 <main+0x66>
					bt_stream_rx();
					break;
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    69f0:	2301      	movs	r3, #1
    69f2:	7463      	strb	r3, [r4, #17]
					bt_stream_rx();
    69f4:	f7fe fe1c 	bl	5630 <bt_stream_rx>
					break;
    69f8:	e7db      	b.n	69b2 <main+0x26>
				case MODE_TX_SYMBOLS:
					mode = MODE_TX_SYMBOLS;
    69fa:	2302      	movs	r3, #2
    69fc:	7463      	strb	r3, [r4, #17]
					br_transmit();
    69fe:	f7fe fec7 	bl	5790 <br_transmit>
					break;
    6a02:	e7d6      	b.n	69b2 <main+0x26>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    6a04:	2308      	movs	r3, #8
    6a06:	e7f4      	b.n	69f2 <main+0x66>
					bt_stream_rx();
					break;
				case MODE_BT_FOLLOW_LE:
					mode = MODE_BT_FOLLOW_LE;
    6a08:	2309      	movs	r3, #9
    6a0a:	7463      	strb	r3, [r4, #17]
	}
}

void le_phy_main(void);
void bt_follow_le() {
	le_phy_main();
    6a0c:	f001 f8ce 	bl	7bac <le_phy_main>
    6a10:	e7cf      	b.n	69b2 <main+0x26>
				case MODE_BT_FOLLOW_LE:
					mode = MODE_BT_FOLLOW_LE;
					bt_follow_le();
					break;
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    6a12:	f7ff fd27 	bl	6464 <bt_promisc_le>
					break;
    6a16:	e7cc      	b.n	69b2 <main+0x26>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    6a18:	f7ff fd5c 	bl	64d4 <bt_slave_le>
					break;
    6a1c:	e7c9      	b.n	69b2 <main+0x26>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    6a1e:	2303      	movs	r3, #3
					cc2400_txtest(&modulation, &channel);
    6a20:	4819      	ldr	r0, [pc, #100]	; (6a88 <main+0xfc>)
    6a22:	491a      	ldr	r1, [pc, #104]	; (6a8c <main+0x100>)
					break;
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
					break;
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    6a24:	7463      	strb	r3, [r4, #17]
					cc2400_txtest(&modulation, &channel);
    6a26:	f001 fcf9 	bl	841c <cc2400_txtest>
					break;
    6a2a:	e7c2      	b.n	69b2 <main+0x26>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    6a2c:	2305      	movs	r3, #5
					cc2400_rangetest(&channel);
    6a2e:	4817      	ldr	r0, [pc, #92]	; (6a8c <main+0x100>)
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
					cc2400_txtest(&modulation, &channel);
					break;
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    6a30:	7463      	strb	r3, [r4, #17]
					cc2400_rangetest(&channel);
    6a32:	f001 fae9 	bl	8008 <cc2400_rangetest>
					requested_mode = MODE_IDLE;
    6a36:	2300      	movs	r3, #0
    6a38:	74a3      	strb	r3, [r4, #18]
					break;
    6a3a:	e7ba      	b.n	69b2 <main+0x26>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    6a3c:	2306      	movs	r3, #6
					cc2400_repeater(&channel);
    6a3e:	4813      	ldr	r0, [pc, #76]	; (6a8c <main+0x100>)
					mode = MODE_RANGE_TEST;
					cc2400_rangetest(&channel);
					requested_mode = MODE_IDLE;
					break;
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    6a40:	7463      	strb	r3, [r4, #17]
					cc2400_repeater(&channel);
    6a42:	f001 fc2f 	bl	82a4 <cc2400_repeater>
					break;
    6a46:	e7b4      	b.n	69b2 <main+0x26>
				case MODE_SPECAN:
					specan();
    6a48:	f7ff fe7e 	bl	6748 <specan>
					break;
    6a4c:	e7b1      	b.n	69b2 <main+0x26>
				case MODE_LED_SPECAN:
					led_specan();
    6a4e:	f7ff ff05 	bl	685c <led_specan>
					break;
    6a52:	e7ae      	b.n	69b2 <main+0x26>
				case MODE_EGO:
					mode = MODE_EGO;
    6a54:	230d      	movs	r3, #13
    6a56:	7463      	strb	r3, [r4, #17]
					ego_main(ego_mode);
    6a58:	7d20      	ldrb	r0, [r4, #20]
    6a5a:	f001 ff4b 	bl	88f4 <ego_main>
					break;
    6a5e:	e7a8      	b.n	69b2 <main+0x26>
				case MODE_RX_GENERIC:
					mode = MODE_RX_GENERIC;
    6a60:	230f      	movs	r3, #15
    6a62:	7463      	strb	r3, [r4, #17]
					rx_generic();
    6a64:	f7ff fde6 	bl	6634 <rx_generic>
					break;
    6a68:	e7a3      	b.n	69b2 <main+0x26>
				case MODE_TX_GENERIC:
					tx_generic();
    6a6a:	f7ff fdf3 	bl	6654 <tx_generic>
					break;
    6a6e:	e7a0      	b.n	69b2 <main+0x26>
				case MODE_IDLE:
					cc2400_idle();
    6a70:	f7fd fd7e 	bl	4570 <cc2400_idle>
					break;
    6a74:	e79d      	b.n	69b2 <main+0x26>
    6a76:	bf00      	nop
    6a78:	00004899 	.word	0x00004899
    6a7c:	0000ae1f 	.word	0x0000ae1f
    6a80:	0000a5ff 	.word	0x0000a5ff
    6a84:	1000124c 	.word	0x1000124c
    6a88:	10000a24 	.word	0x10000a24
    6a8c:	10000448 	.word	0x10000448

00006a90 <precalc>:
	return i;
}

/* do all of the one time precalculation */
void precalc(void)
{
    6a90:	b5f0      	push	{r4, r5, r6, r7, lr}
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    6a92:	4b44      	ldr	r3, [pc, #272]	; (6ba4 <precalc+0x114>)
	syncword = 0;
    6a94:	4a44      	ldr	r2, [pc, #272]	; (6ba8 <precalc+0x118>)
    6a96:	2000      	movs	r0, #0
    6a98:	2100      	movs	r1, #0
/* do all of the one time precalculation */
void precalc(void)
{
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    6a9a:	681b      	ldr	r3, [r3, #0]
	syncword = 0;
    6a9c:	e9c2 0100 	strd	r0, r1, [r2]
    6aa0:	2200      	movs	r2, #0
    6aa2:	0055      	lsls	r5, r2, #1

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
    6aa4:	214f      	movs	r1, #79	; 0x4f
    6aa6:	fb95 f4f1 	sdiv	r4, r5, r1
    6aaa:	fb01 5114 	mls	r1, r1, r4, r5
    6aae:	483f      	ldr	r0, [pc, #252]	; (6bac <precalc+0x11c>)
    6ab0:	5411      	strb	r1, [r2, r0]
    6ab2:	3201      	adds	r2, #1
	u32 address;
	address = target.address & 0xffffffff;
	syncword = 0;

	/* populate frequency register bank*/
	for (i = 0; i < NUM_BREDR_CHANNELS; i++)
    6ab4:	2a4f      	cmp	r2, #79	; 0x4f
    6ab6:	d1f4      	bne.n	6aa2 <precalc+0x12>
		bank[i] = ((i * 2) % NUM_BREDR_CHANNELS);
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
    6ab8:	4a3d      	ldr	r2, [pc, #244]	; (6bb0 <precalc+0x120>)
    6aba:	f3c3 51c4 	ubfx	r1, r3, #23, #5
    6abe:	7011      	strb	r1, [r2, #0]
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    6ac0:	f3c3 1507 	ubfx	r5, r3, #4, #8
    6ac4:	f3c3 04c7 	ubfx	r4, r3, #3, #8
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
    6ac8:	4a3a      	ldr	r2, [pc, #232]	; (6bb4 <precalc+0x124>)
    6aca:	f3c3 41c3 	ubfx	r1, r3, #19, #4
	c1 = ((address >> 4) & 0x10) +
    6ace:	f005 0710 	and.w	r7, r5, #16
    6ad2:	f004 0608 	and.w	r6, r4, #8
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
    6ad6:	7011      	strb	r1, [r2, #0]
	c1 = ((address >> 4) & 0x10) +
    6ad8:	443e      	add	r6, r7
    6ada:	f3c3 0187 	ubfx	r1, r3, #2, #8
    6ade:	f003 0e01 	and.w	lr, r3, #1
    6ae2:	f3c3 0247 	ubfx	r2, r3, #1, #8
    6ae6:	4476      	add	r6, lr
    6ae8:	f001 0704 	and.w	r7, r1, #4
    6aec:	4437      	add	r7, r6
    6aee:	f002 0602 	and.w	r6, r2, #2
    6af2:	443e      	add	r6, r7
    6af4:	4f30      	ldr	r7, [pc, #192]	; (6bb8 <precalc+0x128>)
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    6af6:	f005 0508 	and.w	r5, r5, #8


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    6afa:	703e      	strb	r6, [r7, #0]
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
    6afc:	4e2f      	ldr	r6, [pc, #188]	; (6bbc <precalc+0x12c>)
    6afe:	f3c3 2788 	ubfx	r7, r3, #10, #9
    6b02:	8037      	strh	r7, [r6, #0]
	e = ((address >> 7) & 0x40) +
		((address >> 6) & 0x20) +
    6b04:	099e      	lsrs	r6, r3, #6
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    6b06:	f006 0720 	and.w	r7, r6, #32
    6b0a:	09de      	lsrs	r6, r3, #7
    6b0c:	f006 0640 	and.w	r6, r6, #64	; 0x40
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
    6b10:	095b      	lsrs	r3, r3, #5
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    6b12:	443e      	add	r6, r7
    6b14:	f003 0310 	and.w	r3, r3, #16
    6b18:	4433      	add	r3, r6
    6b1a:	442b      	add	r3, r5
    6b1c:	f004 0404 	and.w	r4, r4, #4
    6b20:	4423      	add	r3, r4
    6b22:	f001 0102 	and.w	r1, r1, #2
    6b26:	4419      	add	r1, r3
    6b28:	f002 0201 	and.w	r2, r2, #1
    6b2c:	4b24      	ldr	r3, [pc, #144]	; (6bc0 <precalc+0x130>)
    6b2e:	440a      	add	r2, r1
    6b30:	701a      	strb	r2, [r3, #0]
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
    6b32:	4b24      	ldr	r3, [pc, #144]	; (6bc4 <precalc+0x134>)
    6b34:	781b      	ldrb	r3, [r3, #0]
    6b36:	b39b      	cbz	r3, 6ba0 <precalc+0x110>
    6b38:	2200      	movs	r2, #0
    6b3a:	4613      	mov	r3, r2
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    6b3c:	4922      	ldr	r1, [pc, #136]	; (6bc8 <precalc+0x138>)
    6b3e:	2500      	movs	r5, #0
    6b40:	5c54      	ldrb	r4, [r2, r1]
    6b42:	f04f 0e00 	mov.w	lr, #0

/* count the number of 1 bits in a uint64_t */
static uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    6b46:	ea54 0705 	orrs.w	r7, r4, r5
    6b4a:	fa5f f68e 	uxtb.w	r6, lr
    6b4e:	f10e 0e01 	add.w	lr, lr, #1
    6b52:	d006      	beq.n	6b62 <precalc+0xd2>
		n &= n - 1;
    6b54:	f114 36ff 	adds.w	r6, r4, #4294967295	; 0xffffffff
    6b58:	f145 37ff 	adc.w	r7, r5, #4294967295	; 0xffffffff
    6b5c:	4034      	ands	r4, r6
    6b5e:	403d      	ands	r5, r7
    6b60:	e7f1      	b.n	6b46 <precalc+0xb6>
    6b62:	3201      	adds	r2, #1
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
    6b64:	4433      	add	r3, r6
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    6b66:	2a0a      	cmp	r2, #10
			used_channels += count_bits((uint64_t) afh_map[i]);
    6b68:	b2db      	uxtb	r3, r3
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    6b6a:	d1e7      	bne.n	6b3c <precalc+0xac>
    6b6c:	4a17      	ldr	r2, [pc, #92]	; (6bcc <precalc+0x13c>)
    6b6e:	7013      	strb	r3, [r2, #0]
    6b70:	2300      	movs	r3, #0
    6b72:	461c      	mov	r4, r3
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
			chan = (i * 2) % NUM_BREDR_CHANNELS;
    6b74:	254f      	movs	r5, #79	; 0x4f
    6b76:	fb93 f2f5 	sdiv	r2, r3, r5
    6b7a:	fb05 3212 	mls	r2, r5, r2, r3
    6b7e:	b2d6      	uxtb	r6, r2
			if(afh_map[chan/8] & (0x1 << (chan % 8)))
    6b80:	08f5      	lsrs	r5, r6, #3
    6b82:	5d4d      	ldrb	r5, [r1, r5]
    6b84:	f002 0207 	and.w	r2, r2, #7
    6b88:	fa45 f202 	asr.w	r2, r5, r2
    6b8c:	07d2      	lsls	r2, r2, #31
				bank[j++] = chan;
    6b8e:	bf48      	it	mi
    6b90:	1c62      	addmi	r2, r4, #1
    6b92:	f103 0302 	add.w	r3, r3, #2
    6b96:	bf44      	itt	mi
    6b98:	5506      	strbmi	r6, [r0, r4]
    6b9a:	b2d4      	uxtbmi	r4, r2
	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < NUM_BREDR_CHANNELS; i++) {
    6b9c:	2b9e      	cmp	r3, #158	; 0x9e
    6b9e:	d1e9      	bne.n	6b74 <precalc+0xe4>
    6ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ba2:	bf00      	nop
    6ba4:	10001748 	.word	0x10001748
    6ba8:	100013a0 	.word	0x100013a0
    6bac:	100017ad 	.word	0x100017ad
    6bb0:	100017ab 	.word	0x100017ab
    6bb4:	10001758 	.word	0x10001758
    6bb8:	100017ac 	.word	0x100017ac
    6bbc:	1000175a 	.word	0x1000175a
    6bc0:	100017fc 	.word	0x100017fc
    6bc4:	100016cf 	.word	0x100016cf
    6bc8:	10001233 	.word	0x10001233
    6bcc:	10001231 	.word	0x10001231

00006bd0 <next_hop>:

	return output;
}

u16 next_hop(u32 clock)
{
    6bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bd2:	b087      	sub	sp, #28
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    6bd4:	f3c0 04d8 	ubfx	r4, r0, #3, #25
	f = base_f % 79;
    6bd8:	234f      	movs	r3, #79	; 0x4f
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    6bda:	f024 040f 	bic.w	r4, r4, #15
	f = base_f % 79;
    6bde:	fbb4 f2f3 	udiv	r2, r4, r3
    6be2:	fb03 4212 	mls	r2, r3, r2, r4
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6be6:	4b40      	ldr	r3, [pc, #256]	; (6ce8 <next_hop+0x118>)
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
    6be8:	f3c0 0640 	ubfx	r6, r0, #1, #1
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6bec:	781b      	ldrb	r3, [r3, #0]

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
    6bee:	0171      	lsls	r1, r6, #5
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    6bf0:	ea83 4310 	eor.w	r3, r3, r0, lsr #16
    6bf4:	f003 031f 	and.w	r3, r3, #31

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
    6bf8:	b28d      	uxth	r5, r1
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6bfa:	1b89      	subs	r1, r1, r6
    6bfc:	4059      	eors	r1, r3
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    6bfe:	4b3b      	ldr	r3, [pc, #236]	; (6cec <next_hop+0x11c>)
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6c00:	4e3b      	ldr	r6, [pc, #236]	; (6cf0 <next_hop+0x120>)
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    6c02:	781b      	ldrb	r3, [r3, #0]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6c04:	7836      	ldrb	r6, [r6, #0]
	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
    6c06:	ea83 5350 	eor.w	r3, r3, r0, lsr #21
	d = (d1 ^ (clock >> 7)) & 0x1ff;
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6c0a:	eb03 0390 	add.w	r3, r3, r0, lsr #2
    6c0e:	4073      	eors	r3, r6
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    6c10:	4e38      	ldr	r6, [pc, #224]	; (6cf4 <next_hop+0x124>)
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
	f = base_f % 79;

	perm = perm5(
    6c12:	b2c9      	uxtb	r1, r1
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    6c14:	8836      	ldrh	r6, [r6, #0]

/* 5 bit permutation */
static u8 perm5(u8 z, u8 p_high, u16 p_low)
{
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    6c16:	f003 031f 	and.w	r3, r3, #31
	y1 = (clock >> 1) & 0x01;
	y2 = y1 << 5;
	a = (a1 ^ (clock >> 21)) & 0x1f;
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    6c1a:	ea86 10d0 	eor.w	r0, r6, r0, lsr #7
static u8 perm5(u8 z, u8 p_high, u16 p_low)
{
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
	p_high &= 0x1f;
	p_low &= 0x1ff;
    6c1e:	f3c0 0008 	ubfx	r0, r0, #0, #9
	u8 tmp, output, z_bit[5], p[14];
	static const u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    6c22:	2600      	movs	r6, #0
		p[i] = (p_low >> i) & 0x01;
    6c24:	fa40 fe06 	asr.w	lr, r0, r6
    6c28:	af02      	add	r7, sp, #8
    6c2a:	f00e 0e01 	and.w	lr, lr, #1
    6c2e:	f806 e007 	strb.w	lr, [r6, r7]
	u8 tmp, output, z_bit[5], p[14];
	static const u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    6c32:	3601      	adds	r6, #1
    6c34:	2e09      	cmp	r6, #9
    6c36:	d1f5      	bne.n	6c24 <next_hop+0x54>
    6c38:	2000      	movs	r0, #0
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;
    6c3a:	b24e      	sxtb	r6, r1
    6c3c:	eb07 0e00 	add.w	lr, r7, r0
    6c40:	4106      	asrs	r6, r0
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    6c42:	3001      	adds	r0, #1
		p[i+9] = (p_high >> i) & 0x01;
    6c44:	f006 0601 	and.w	r6, r6, #1
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    6c48:	2805      	cmp	r0, #5
		p[i+9] = (p_high >> i) & 0x01;
    6c4a:	f88e 6009 	strb.w	r6, [lr, #9]
	static const u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    6c4e:	d1f4      	bne.n	6c3a <next_hop+0x6a>
    6c50:	2100      	movs	r1, #0
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;
    6c52:	fa43 f001 	asr.w	r0, r3, r1
    6c56:	f000 0001 	and.w	r0, r0, #1
    6c5a:	f80d 0001 	strb.w	r0, [sp, r1]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    6c5e:	3101      	adds	r1, #1
    6c60:	2905      	cmp	r1, #5
    6c62:	d1f6      	bne.n	6c52 <next_hop+0x82>
    6c64:	210d      	movs	r1, #13
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    6c66:	5c7b      	ldrb	r3, [r7, r1]
    6c68:	b183      	cbz	r3, 6c8c <next_hop+0xbc>
			tmp = z_bit[index1[i]];
    6c6a:	4b23      	ldr	r3, [pc, #140]	; (6cf8 <next_hop+0x128>)
    6c6c:	ae06      	add	r6, sp, #24
    6c6e:	5cc8      	ldrb	r0, [r1, r3]
			z_bit[index1[i]] = z_bit[index2[i]];
    6c70:	330e      	adds	r3, #14
    6c72:	5ccb      	ldrb	r3, [r1, r3]
    6c74:	f10d 0e18 	add.w	lr, sp, #24

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
			tmp = z_bit[index1[i]];
    6c78:	4430      	add	r0, r6
			z_bit[index1[i]] = z_bit[index2[i]];
    6c7a:	4473      	add	r3, lr

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
			tmp = z_bit[index1[i]];
    6c7c:	f810 6c18 	ldrb.w	r6, [r0, #-24]
			z_bit[index1[i]] = z_bit[index2[i]];
    6c80:	f813 ec18 	ldrb.w	lr, [r3, #-24]
    6c84:	f800 ec18 	strb.w	lr, [r0, #-24]
			z_bit[index2[i]] = tmp;
    6c88:	f803 6c18 	strb.w	r6, [r3, #-24]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    6c8c:	f111 31ff 	adds.w	r1, r1, #4294967295	; 0xffffffff
    6c90:	d2e9      	bcs.n	6c66 <next_hop+0x96>
    6c92:	2300      	movs	r3, #0
    6c94:	4619      	mov	r1, r3
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
		output += z_bit[i] << i;
    6c96:	f81d 0001 	ldrb.w	r0, [sp, r1]
    6c9a:	4088      	lsls	r0, r1
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    6c9c:	3101      	adds	r1, #1
		output += z_bit[i] << i;
    6c9e:	4403      	add	r3, r0
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    6ca0:	2905      	cmp	r1, #5
		output += z_bit[i] << i;
    6ca2:	b2db      	uxtb	r3, r3
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    6ca4:	d1f7      	bne.n	6c96 <next_hop+0xc6>
	perm = perm5(
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % NUM_BREDR_CHANNELS];
    6ca6:	4915      	ldr	r1, [pc, #84]	; (6cfc <next_hop+0x12c>)
    6ca8:	204f      	movs	r0, #79	; 0x4f
    6caa:	7809      	ldrb	r1, [r1, #0]
    6cac:	4419      	add	r1, r3
    6cae:	18ab      	adds	r3, r5, r2
    6cb0:	440b      	add	r3, r1
    6cb2:	fbb3 f2f0 	udiv	r2, r3, r0
    6cb6:	fb00 3312 	mls	r3, r0, r2, r3
    6cba:	4a11      	ldr	r2, [pc, #68]	; (6d00 <next_hop+0x130>)
    6cbc:	5cd0      	ldrb	r0, [r2, r3]
	if(afh_enabled) {
    6cbe:	4b11      	ldr	r3, [pc, #68]	; (6d04 <next_hop+0x134>)
    6cc0:	781b      	ldrb	r3, [r3, #0]
    6cc2:	b16b      	cbz	r3, 6ce0 <next_hop+0x110>
		f_dash = base_f % used_channels;
    6cc4:	4b10      	ldr	r3, [pc, #64]	; (6d08 <next_hop+0x138>)
    6cc6:	781b      	ldrb	r3, [r3, #0]
    6cc8:	fbb4 f2f3 	udiv	r2, r4, r3
    6ccc:	fb03 4412 	mls	r4, r3, r2, r4
    6cd0:	4425      	add	r5, r4
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    6cd2:	440d      	add	r5, r1
    6cd4:	fbb5 f4f3 	udiv	r4, r5, r3
    6cd8:	fb03 5514 	mls	r5, r3, r4, r5
    6cdc:	4b0b      	ldr	r3, [pc, #44]	; (6d0c <next_hop+0x13c>)
    6cde:	5d58      	ldrb	r0, [r3, r5]
	}
	return (2402 + next_channel);

}
    6ce0:	f600 1062 	addw	r0, r0, #2402	; 0x962
    6ce4:	b007      	add	sp, #28
    6ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ce8:	100017ac 	.word	0x100017ac
    6cec:	100017ab 	.word	0x100017ab
    6cf0:	10001758 	.word	0x10001758
    6cf4:	1000175a 	.word	0x1000175a
    6cf8:	0000ae3c 	.word	0x0000ae3c
    6cfc:	100017fc 	.word	0x100017fc
    6d00:	100017ad 	.word	0x100017ad
    6d04:	100016cf 	.word	0x100016cf
    6d08:	10001231 	.word	0x10001231
    6d0c:	1000175c 	.word	0x1000175c

00006d10 <btle_channel_index>:

// calculate channel index from physical channel
// channel is in range [2402, 2480]
uint8_t btle_channel_index(uint16_t channel) {
	uint8_t idx;
	channel = (channel - 2402) / 2;
    6d10:	2302      	movs	r3, #2
    6d12:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
    6d16:	fb90 f0f3 	sdiv	r0, r0, r3
    6d1a:	b283      	uxth	r3, r0
	if (channel == 0)
    6d1c:	b153      	cbz	r3, 6d34 <btle_channel_index+0x24>
		idx = 37;
	else if (channel < 12)
    6d1e:	2b0b      	cmp	r3, #11
    6d20:	d801      	bhi.n	6d26 <btle_channel_index+0x16>
		idx = channel - 1;
    6d22:	3801      	subs	r0, #1
    6d24:	e004      	b.n	6d30 <btle_channel_index+0x20>
	else if (channel == 12)
    6d26:	2b0c      	cmp	r3, #12
    6d28:	d006      	beq.n	6d38 <btle_channel_index+0x28>
		idx = 38;
	else if (channel < 39)
    6d2a:	2b26      	cmp	r3, #38	; 0x26
    6d2c:	d806      	bhi.n	6d3c <btle_channel_index+0x2c>
		idx = channel - 2;
    6d2e:	3802      	subs	r0, #2
    6d30:	b2c0      	uxtb	r0, r0
    6d32:	4770      	bx	lr
// channel is in range [2402, 2480]
uint8_t btle_channel_index(uint16_t channel) {
	uint8_t idx;
	channel = (channel - 2402) / 2;
	if (channel == 0)
		idx = 37;
    6d34:	2025      	movs	r0, #37	; 0x25
    6d36:	4770      	bx	lr
	else if (channel < 12)
		idx = channel - 1;
	else if (channel == 12)
		idx = 38;
    6d38:	2026      	movs	r0, #38	; 0x26
    6d3a:	4770      	bx	lr
	else if (channel < 39)
		idx = channel - 2;
	else
		idx = 39;
    6d3c:	2027      	movs	r0, #39	; 0x27
	return idx;
}
    6d3e:	4770      	bx	lr

00006d40 <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
	u16 phys;
	if (idx < 11)
    6d40:	280a      	cmp	r0, #10
    6d42:	d803      	bhi.n	6d4c <btle_channel_index_to_phys+0xc>
		phys = 2404 + 2 * idx;
    6d44:	0040      	lsls	r0, r0, #1
    6d46:	f600 1064 	addw	r0, r0, #2404	; 0x964
    6d4a:	4770      	bx	lr
	else if (idx < 37)
    6d4c:	2824      	cmp	r0, #36	; 0x24
    6d4e:	d803      	bhi.n	6d58 <btle_channel_index_to_phys+0x18>
		phys = 2428 + 2 * (idx - 11);
    6d50:	0040      	lsls	r0, r0, #1
    6d52:	f600 1066 	addw	r0, r0, #2406	; 0x966
    6d56:	4770      	bx	lr
	else if (idx == 37)
    6d58:	2825      	cmp	r0, #37	; 0x25
    6d5a:	d006      	beq.n	6d6a <btle_channel_index_to_phys+0x2a>
		phys = 2402;
	else if (idx == 38)
    6d5c:	2826      	cmp	r0, #38	; 0x26
		phys = 2426;
	else
		phys = 2480;
    6d5e:	f640 107a 	movw	r0, #2426	; 0x97a
    6d62:	bf18      	it	ne
    6d64:	f44f 601b 	movne.w	r0, #2480	; 0x9b0
    6d68:	4770      	bx	lr
	if (idx < 11)
		phys = 2404 + 2 * idx;
	else if (idx < 37)
		phys = 2428 + 2 * (idx - 11);
	else if (idx == 37)
		phys = 2402;
    6d6a:	f640 1062 	movw	r0, #2402	; 0x962
	else if (idx == 38)
		phys = 2426;
	else
		phys = 2480;
	return phys;
}
    6d6e:	4770      	bx	lr

00006d70 <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    6d70:	b538      	push	{r3, r4, r5, lr}
    6d72:	4604      	mov	r4, r0
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    6d74:	7d45      	ldrb	r5, [r0, #21]
    6d76:	4628      	mov	r0, r5
    6d78:	f7ff ffe2 	bl	6d40 <btle_channel_index_to_phys>
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    6d7c:	7da3      	ldrb	r3, [r4, #22]
    6d7e:	2125      	movs	r1, #37	; 0x25
    6d80:	442b      	add	r3, r5
    6d82:	fb93 f2f1 	sdiv	r2, r3, r1
    6d86:	fb01 3312 	mls	r3, r1, r2, r3
    6d8a:	7563      	strb	r3, [r4, #21]
	return phys;
}
    6d8c:	bd38      	pop	{r3, r4, r5, pc}

00006d8e <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    6d8e:	b570      	push	{r4, r5, r6, lr}
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    6d90:	460b      	mov	r3, r1
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
    6d92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6d96:	1a5c      	subs	r4, r3, r1
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    6d98:	4294      	cmp	r4, r2
    6d9a:	da14      	bge.n	6dc6 <btle_calc_crc+0x38>
		u8 cur = data[i];
    6d9c:	f813 5b01 	ldrb.w	r5, [r3], #1
    6da0:	2408      	movs	r4, #8
		for (j = 0; j < 8; ++j) {
			int next_bit = (state ^ cur) & 1;
    6da2:	ea85 0600 	eor.w	r6, r5, r0
			cur >>= 1;
			state >>= 1;
			if (next_bit) {
    6da6:	f016 0f01 	tst.w	r6, #1
    6daa:	ea4f 0050 	mov.w	r0, r0, lsr #1
				state |= 1 << 23;
    6dae:	bf1e      	ittt	ne
    6db0:	f440 0000 	orrne.w	r0, r0, #8388608	; 0x800000
				state ^= lfsr_mask;
    6db4:	f480 00b4 	eorne.w	r0, r0, #5898240	; 0x5a0000
    6db8:	f480 40c0 	eorne.w	r0, r0, #24576	; 0x6000
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    6dbc:	3c01      	subs	r4, #1
			int next_bit = (state ^ cur) & 1;
			cur >>= 1;
			state >>= 1;
			if (next_bit) {
    6dbe:	ea4f 0555 	mov.w	r5, r5, lsr #1
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    6dc2:	d1ee      	bne.n	6da2 <btle_calc_crc+0x14>
    6dc4:	e7e7      	b.n	6d96 <btle_calc_crc+0x8>
			}
		}
	}

	return state;
}
    6dc6:	bd70      	pop	{r4, r5, r6, pc}

00006dc8 <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    6dc8:	b570      	push	{r4, r5, r6, lr}
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    6dca:	3a01      	subs	r2, #1
    6dcc:	2a00      	cmp	r2, #0
    6dce:	db14      	blt.n	6dfa <btle_reverse_crc+0x32>
		u8 cur = data[i];
    6dd0:	5c8e      	ldrb	r6, [r1, r2]
    6dd2:	2407      	movs	r4, #7
		for (j = 0; j < 8; ++j) {
			int top_bit = state >> 23;
    6dd4:	0dc5      	lsrs	r5, r0, #23
			state = (state << 1) & 0xffffff;
    6dd6:	0040      	lsls	r0, r0, #1
    6dd8:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    6ddc:	fa46 f004 	asr.w	r0, r6, r4
    6de0:	f000 0001 	and.w	r0, r0, #1
    6de4:	4068      	eors	r0, r5
    6de6:	4318      	orrs	r0, r3
			if (top_bit)
    6de8:	b11d      	cbz	r5, 6df2 <btle_reverse_crc+0x2a>
				state ^= lfsr_mask;
    6dea:	f480 0034 	eor.w	r0, r0, #11796480	; 0xb40000
    6dee:	f480 4040 	eor.w	r0, r0, #49152	; 0xc000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    6df2:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
    6df6:	d2ed      	bcs.n	6dd4 <btle_reverse_crc+0xc>
    6df8:	e7e7      	b.n	6dca <btle_reverse_crc+0x2>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    6dfa:	2300      	movs	r3, #0
    6dfc:	4619      	mov	r1, r3
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
		ret |= ((state >> i) & 1) << (23 - i);
    6dfe:	fa20 f203 	lsr.w	r2, r0, r3
    6e02:	f1c3 0417 	rsb	r4, r3, #23
    6e06:	f002 0201 	and.w	r2, r2, #1
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    6e0a:	3301      	adds	r3, #1
		ret |= ((state >> i) & 1) << (23 - i);
    6e0c:	40a2      	lsls	r2, r4
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    6e0e:	2b18      	cmp	r3, #24
		ret |= ((state >> i) & 1) << (23 - i);
    6e10:	ea41 0102 	orr.w	r1, r1, r2
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    6e14:	d1f3      	bne.n	6dfe <btle_reverse_crc+0x36>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
}
    6e16:	4608      	mov	r0, r1
    6e18:	bd70      	pop	{r4, r5, r6, pc}
    6e1a:	0000      	movs	r0, r0

00006e1c <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    6e1c:	b530      	push	{r4, r5, lr}
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    6e1e:	460c      	mov	r4, r1
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    6e20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    6e24:	1a63      	subs	r3, r4, r1
	for (i = 0; i < len; ++i) {
    6e26:	4293      	cmp	r3, r2
    6e28:	da09      	bge.n	6e3e <btle_crcgen_lut+0x22>
		key = data[i] ^ (state & 0xff);
    6e2a:	f814 3b01 	ldrb.w	r3, [r4], #1
		state = (state >> 8) ^ btle_crc_lut[key];
    6e2e:	4d04      	ldr	r5, [pc, #16]	; (6e40 <btle_crcgen_lut+0x24>)
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
		key = data[i] ^ (state & 0xff);
    6e30:	4043      	eors	r3, r0
		state = (state >> 8) ^ btle_crc_lut[key];
    6e32:	b2db      	uxtb	r3, r3
    6e34:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    6e38:	ea83 2010 	eor.w	r0, r3, r0, lsr #8
    6e3c:	e7f2      	b.n	6e24 <btle_crcgen_lut+0x8>
	}
	return state;
}
    6e3e:	bd30      	pop	{r4, r5, pc}
    6e40:	100004a4 	.word	0x100004a4

00006e44 <le_dewhiten>:
/*
 * Dewhiten and reverse the bit order of a buffer in place.
 * Channel is a physical channel in the range [2402, 2480]
 * TODO convert this to use whitening word
 */
void le_dewhiten(uint8_t *data, unsigned size, unsigned channel) {
    6e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e46:	4606      	mov	r6, r0
	unsigned i, j, bit;
	unsigned idx = whitening_index[btle_channel_index(channel)];
    6e48:	b290      	uxth	r0, r2
/*
 * Dewhiten and reverse the bit order of a buffer in place.
 * Channel is a physical channel in the range [2402, 2480]
 * TODO convert this to use whitening word
 */
void le_dewhiten(uint8_t *data, unsigned size, unsigned channel) {
    6e4a:	460c      	mov	r4, r1
	unsigned i, j, bit;
	unsigned idx = whitening_index[btle_channel_index(channel)];
    6e4c:	f7ff ff60 	bl	6d10 <btle_channel_index>
    6e50:	4b14      	ldr	r3, [pc, #80]	; (6ea4 <le_dewhiten+0x60>)
    6e52:	1931      	adds	r1, r6, r4
    6e54:	5c1d      	ldrb	r5, [r3, r0]
    6e56:	469e      	mov	lr, r3
    6e58:	4630      	mov	r0, r6

	for (i = 0; i < size; ++i) {
    6e5a:	4288      	cmp	r0, r1
    6e5c:	d020      	beq.n	6ea0 <le_dewhiten+0x5c>
		uint8_t out = 0;
		for (j = 0; j < 8; ++j) {
			bit = (data[i] >> (7-j)) & 1;
    6e5e:	2700      	movs	r7, #0
    6e60:	463e      	mov	r6, r7
    6e62:	f890 c000 	ldrb.w	ip, [r0]
			bit ^= whitening[idx];
    6e66:	eb0e 0205 	add.w	r2, lr, r5
    6e6a:	f892 4028 	ldrb.w	r4, [r2, #40]	; 0x28
			idx = (idx + 1) % sizeof(whitening);
    6e6e:	3501      	adds	r5, #1
    6e70:	227f      	movs	r2, #127	; 0x7f
    6e72:	fbb5 f2f2 	udiv	r2, r5, r2
    6e76:	f1c6 0307 	rsb	r3, r6, #7
	unsigned idx = whitening_index[btle_channel_index(channel)];

	for (i = 0; i < size; ++i) {
		uint8_t out = 0;
		for (j = 0; j < 8; ++j) {
			bit = (data[i] >> (7-j)) & 1;
    6e7a:	fa4c f303 	asr.w	r3, ip, r3
    6e7e:	f003 0301 	and.w	r3, r3, #1
			bit ^= whitening[idx];
    6e82:	4063      	eors	r3, r4
			idx = (idx + 1) % sizeof(whitening);
    6e84:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
    6e88:	1aad      	subs	r5, r5, r2
			out |= bit << j;
    6e8a:	fa03 f206 	lsl.w	r2, r3, r6
	unsigned i, j, bit;
	unsigned idx = whitening_index[btle_channel_index(channel)];

	for (i = 0; i < size; ++i) {
		uint8_t out = 0;
		for (j = 0; j < 8; ++j) {
    6e8e:	3601      	adds	r6, #1
			bit = (data[i] >> (7-j)) & 1;
			bit ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
			out |= bit << j;
    6e90:	ea47 0302 	orr.w	r3, r7, r2
	unsigned i, j, bit;
	unsigned idx = whitening_index[btle_channel_index(channel)];

	for (i = 0; i < size; ++i) {
		uint8_t out = 0;
		for (j = 0; j < 8; ++j) {
    6e94:	2e08      	cmp	r6, #8
			bit = (data[i] >> (7-j)) & 1;
			bit ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
			out |= bit << j;
    6e96:	b2df      	uxtb	r7, r3
	unsigned i, j, bit;
	unsigned idx = whitening_index[btle_channel_index(channel)];

	for (i = 0; i < size; ++i) {
		uint8_t out = 0;
		for (j = 0; j < 8; ++j) {
    6e98:	d1e5      	bne.n	6e66 <le_dewhiten+0x22>
			bit = (data[i] >> (7-j)) & 1;
			bit ^= whitening[idx];
			idx = (idx + 1) % sizeof(whitening);
			out |= bit << j;
		}
		data[i] = out;
    6e9a:	f800 7b01 	strb.w	r7, [r0], #1
    6e9e:	e7dc      	b.n	6e5a <le_dewhiten+0x16>
    6ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ea2:	bf00      	nop
    6ea4:	0000ae58 	.word	0x0000ae58

00006ea8 <le_parse_channel_map>:
}

/*
 * Parse a channel map and populate the le_channel_remapping_t struct.
 */
void le_parse_channel_map(uint8_t *channel_map, le_channel_remapping_t *remapping) {
    6ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6eaa:	4605      	mov	r5, r0
    6eac:	460c      	mov	r4, r1
	unsigned i, j, byte;
	unsigned idx = 0;

	memset(remapping, 0, sizeof(*remapping));
    6eae:	4608      	mov	r0, r1
    6eb0:	22c0      	movs	r2, #192	; 0xc0
    6eb2:	2100      	movs	r1, #0
    6eb4:	f7fd f9a0 	bl	41f8 <memset>
    6eb8:	1e68      	subs	r0, r5, #1
/*
 * Parse a channel map and populate the le_channel_remapping_t struct.
 */
void le_parse_channel_map(uint8_t *channel_map, le_channel_remapping_t *remapping) {
	unsigned i, j, byte;
	unsigned idx = 0;
    6eba:	2300      	movs	r3, #0
    6ebc:	3504      	adds	r5, #4

	memset(remapping, 0, sizeof(*remapping));

	for (i = 0; i < 5; ++i) {
		byte = channel_map[i];
    6ebe:	f810 2f01 	ldrb.w	r2, [r0, #1]!
    6ec2:	f103 0608 	add.w	r6, r3, #8
		for (j = 0; j < 8; ++j) {
			if (byte & 1) {
    6ec6:	f012 0101 	ands.w	r1, r2, #1
				remapping->channel_in_use[idx] = 1;
    6eca:	bf1d      	ittte	ne
    6ecc:	2101      	movne	r1, #1
    6ece:	f844 1023 	strne.w	r1, [r4, r3, lsl #2]
				remapping->remapping_index[remapping->total_channels] = idx;
    6ed2:	f8d4 10bc 	ldrne.w	r1, [r4, #188]	; 0xbc
				++remapping->total_channels;
			} else {
				remapping->channel_in_use[idx] = 0;
    6ed6:	f844 1023 	streq.w	r1, [r4, r3, lsl #2]
	for (i = 0; i < 5; ++i) {
		byte = channel_map[i];
		for (j = 0; j < 8; ++j) {
			if (byte & 1) {
				remapping->channel_in_use[idx] = 1;
				remapping->remapping_index[remapping->total_channels] = idx;
    6eda:	bf1e      	ittt	ne
    6edc:	1867      	addne	r7, r4, r1
    6ede:	f887 3094 	strbne.w	r3, [r7, #148]	; 0x94
				++remapping->total_channels;
    6ee2:	3101      	addne	r1, #1
				remapping->channel_in_use[idx] = 0;
			}

			byte >>= 1;

			++idx;
    6ee4:	f103 0301 	add.w	r3, r3, #1
		byte = channel_map[i];
		for (j = 0; j < 8; ++j) {
			if (byte & 1) {
				remapping->channel_in_use[idx] = 1;
				remapping->remapping_index[remapping->total_channels] = idx;
				++remapping->total_channels;
    6ee8:	bf18      	it	ne
    6eea:	f8c4 10bc 	strne.w	r1, [r4, #188]	; 0xbc
			}

			byte >>= 1;

			++idx;
			if (idx == 37)
    6eee:	2b25      	cmp	r3, #37	; 0x25
				++remapping->total_channels;
			} else {
				remapping->channel_in_use[idx] = 0;
			}

			byte >>= 1;
    6ef0:	ea4f 0252 	mov.w	r2, r2, lsr #1

			++idx;
			if (idx == 37)
    6ef4:	d002      	beq.n	6efc <le_parse_channel_map+0x54>

	memset(remapping, 0, sizeof(*remapping));

	for (i = 0; i < 5; ++i) {
		byte = channel_map[i];
		for (j = 0; j < 8; ++j) {
    6ef6:	42b3      	cmp	r3, r6
    6ef8:	d1e5      	bne.n	6ec6 <le_parse_channel_map+0x1e>
    6efa:	e000      	b.n	6efe <le_parse_channel_map+0x56>
    6efc:	461e      	mov	r6, r3
	unsigned i, j, byte;
	unsigned idx = 0;

	memset(remapping, 0, sizeof(*remapping));

	for (i = 0; i < 5; ++i) {
    6efe:	42a8      	cmp	r0, r5
    6f00:	d001      	beq.n	6f06 <le_parse_channel_map+0x5e>
    6f02:	4633      	mov	r3, r6
    6f04:	e7db      	b.n	6ebe <le_parse_channel_map+0x16>
			++idx;
			if (idx == 37)
				break;
		}
	}
}
    6f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006f08 <le_map_channel>:

/*
 * Map a channel index to a used index given a remapping struct.
 */
uint8_t le_map_channel(uint8_t channel_idx, le_channel_remapping_t *remapping) {
	if (remapping->channel_in_use[channel_idx])
    6f08:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
    6f0c:	b943      	cbnz	r3, 6f20 <le_map_channel+0x18>
		return channel_idx;
	else
		return remapping->remapping_index[channel_idx % remapping->total_channels];
    6f0e:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    6f12:	fbb0 f3f2 	udiv	r3, r0, r2
    6f16:	fb02 0013 	mls	r0, r2, r3, r0
    6f1a:	4401      	add	r1, r0
    6f1c:	f891 0094 	ldrb.w	r0, [r1, #148]	; 0x94
}
    6f20:	4770      	bx	lr
    6f22:	0000      	movs	r0, r0

00006f24 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    6f24:	b513      	push	{r0, r1, r4, lr}
    6f26:	460b      	mov	r3, r1
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    6f28:	8841      	ldrh	r1, [r0, #2]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    6f2a:	6812      	ldr	r2, [r2, #0]
VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    6f2c:	f8ad 1004 	strh.w	r1, [sp, #4]
    6f30:	8881      	ldrh	r1, [r0, #4]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    6f32:	7840      	ldrb	r0, [r0, #1]
VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    6f34:	f8ad 1006 	strh.w	r1, [sp, #6]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    6f38:	4904      	ldr	r1, [pc, #16]	; (6f4c <usb_vendor_request_handler+0x28>)
    6f3a:	680c      	ldr	r4, [r1, #0]
    6f3c:	a901      	add	r1, sp, #4
    6f3e:	47a0      	blx	r4
	return (BOOL) (rv==1);
}
    6f40:	1e43      	subs	r3, r0, #1
    6f42:	4258      	negs	r0, r3
    6f44:	4158      	adcs	r0, r3
    6f46:	b002      	add	sp, #8
    6f48:	bd10      	pop	{r4, pc}
    6f4a:	bf00      	nop
    6f4c:	10003904 	.word	0x10003904

00006f50 <set_serial_descriptor>:


void set_serial_descriptor(u8 *descriptors) {
    6f50:	b510      	push	{r4, lr}
    6f52:	b086      	sub	sp, #24
    6f54:	4604      	mov	r4, r0
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
    6f56:	4669      	mov	r1, sp
    6f58:	a801      	add	r0, sp, #4
    6f5a:	f002 fb55 	bl	9608 <get_device_serial>
	if(buf[0] == 0) { /* IAP success */
    6f5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    6f62:	b9f3      	cbnz	r3, 6fa2 <set_serial_descriptor+0x52>
    6f64:	4620      	mov	r0, r4
    6f66:	f10d 0105 	add.w	r1, sp, #5
    6f6a:	3440      	adds	r4, #64	; 0x40
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
    6f6c:	f811 3b01 	ldrb.w	r3, [r1], #1
    6f70:	3004      	adds	r0, #4
    6f72:	091a      	lsrs	r2, r3, #4
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6f74:	2a09      	cmp	r2, #9
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
    6f76:	f003 030f 	and.w	r3, r3, #15
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6f7a:	bf8c      	ite	hi
    6f7c:	3257      	addhi	r2, #87	; 0x57
    6f7e:	3230      	addls	r2, #48	; 0x30
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6f80:	2b09      	cmp	r3, #9
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6f82:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
			desc[1+ i * 4] = 0;
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6f86:	bf88      	it	hi
    6f88:	3357      	addhi	r3, #87	; 0x57
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[1+ i * 4] = 0;
    6f8a:	f04f 0200 	mov.w	r2, #0
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6f8e:	bf98      	it	ls
    6f90:	3330      	addls	r3, #48	; 0x30
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
			nibble  = (buf[i+1]>>4) & 0xF;
			desc[i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[1+ i * 4] = 0;
    6f92:	f880 2079 	strb.w	r2, [r0, #121]	; 0x79
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
    6f96:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
			desc[3 + i * 4] = 0;
    6f9a:	f880 207b 	strb.w	r2, [r0, #123]	; 0x7b
	u8 buf[17], *desc, nibble;
	int len, i;
	get_device_serial(buf, &len);
	if(buf[0] == 0) { /* IAP success */
		desc = descriptors + USB_SERIAL_OFFSET;
		for(i=0; i<16; i++) {
    6f9e:	42a0      	cmp	r0, r4
    6fa0:	d1e4      	bne.n	6f6c <set_serial_descriptor+0x1c>
			nibble = buf[i+1]&0xF;
			desc[2 + i * 4] = (nibble > 9) ? ('a' + nibble - 10) : ('0' + nibble);
			desc[3 + i * 4] = 0;
		}
	}
}
    6fa2:	b006      	add	sp, #24
    6fa4:	bd10      	pop	{r4, pc}
    6fa6:	0000      	movs	r0, r0

00006fa8 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    6fa8:	b538      	push	{r3, r4, r5, lr}
    6faa:	4605      	mov	r5, r0
	// initialise stack
	USBInit();

	set_serial_descriptor(abDescriptors);
    6fac:	4c0c      	ldr	r4, [pc, #48]	; (6fe0 <ubertooth_usb_init+0x38>)
}

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
	// initialise stack
	USBInit();
    6fae:	f002 fc07 	bl	97c0 <USBInit>

	set_serial_descriptor(abDescriptors);
    6fb2:	4620      	mov	r0, r4
    6fb4:	f7ff ffcc 	bl	6f50 <set_serial_descriptor>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    6fb8:	4620      	mov	r0, r4
    6fba:	f002 fe41 	bl	9c40 <USBRegisterDescriptors>

	// Request handler
	v_req_handler = vendor_req_handler;
    6fbe:	4b09      	ldr	r3, [pc, #36]	; (6fe4 <ubertooth_usb_init+0x3c>)

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    6fc0:	4a09      	ldr	r2, [pc, #36]	; (6fe8 <ubertooth_usb_init+0x40>)
    6fc2:	2002      	movs	r0, #2
    6fc4:	4909      	ldr	r1, [pc, #36]	; (6fec <ubertooth_usb_init+0x44>)
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);

	// Request handler
	v_req_handler = vendor_req_handler;
    6fc6:	601d      	str	r5, [r3, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    6fc8:	f002 fbf0 	bl	97ac <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    6fcc:	4908      	ldr	r1, [pc, #32]	; (6ff0 <ubertooth_usb_init+0x48>)
    6fce:	20ff      	movs	r0, #255	; 0xff
    6fd0:	f002 fe20 	bl	9c14 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    6fd4:	2001      	movs	r0, #1
    6fd6:	f002 fc8a 	bl	98ee <USBHwConnect>

	return 0;
}
    6fda:	2000      	movs	r0, #0
    6fdc:	bd38      	pop	{r3, r4, r5, pc}
    6fde:	bf00      	nop
    6fe0:	100008a4 	.word	0x100008a4
    6fe4:	10003904 	.word	0x10003904
    6fe8:	10003800 	.word	0x10003800
    6fec:	00006f25 	.word	0x00006f25
    6ff0:	0000aeff 	.word	0x0000aeff

00006ff4 <usb_queue_init>:
volatile u32 head = 0;
volatile u32 tail = 0;

void usb_queue_init(void)
{
	head = 0;
    6ff4:	4b04      	ldr	r3, [pc, #16]	; (7008 <usb_queue_init+0x14>)
    6ff6:	2100      	movs	r1, #0
	tail = 0;
	memset(fifo, 0, sizeof(fifo));
    6ff8:	4804      	ldr	r0, [pc, #16]	; (700c <usb_queue_init+0x18>)
    6ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
volatile u32 head = 0;
volatile u32 tail = 0;

void usb_queue_init(void)
{
	head = 0;
    6ffe:	6019      	str	r1, [r3, #0]
	tail = 0;
    7000:	6059      	str	r1, [r3, #4]
	memset(fifo, 0, sizeof(fifo));
    7002:	f7fd b8f9 	b.w	41f8 <memset>
    7006:	bf00      	nop
    7008:	10000a60 	.word	0x10000a60
    700c:	10001800 	.word	0x10001800

00007010 <usb_enqueue>:
}

usb_pkt_rx *usb_enqueue(void)
{
	u8 h = head & 0x7F;
    7010:	4b0a      	ldr	r3, [pc, #40]	; (703c <usb_enqueue+0x2c>)
    7012:	6819      	ldr	r1, [r3, #0]
	u8 t = tail & 0x7F;
    7014:	6858      	ldr	r0, [r3, #4]
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
    7016:	f001 017f 	and.w	r1, r1, #127	; 0x7f
}

usb_pkt_rx *usb_enqueue(void)
{
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;
    701a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 n = (t + 1) & 0x7F;
    701e:	1c42      	adds	r2, r0, #1

	/* fail if queue is full */
	if (h == n) {
    7020:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7024:	4291      	cmp	r1, r2
		return NULL;
	}

	++tail;
    7026:	bf1f      	itttt	ne
    7028:	685a      	ldrne	r2, [r3, #4]
    702a:	3201      	addne	r2, #1
    702c:	605a      	strne	r2, [r3, #4]
	return &fifo[t];
    702e:	4b04      	ldrne	r3, [pc, #16]	; (7040 <usb_enqueue+0x30>)
    7030:	bf14      	ite	ne
    7032:	eb03 1080 	addne.w	r0, r3, r0, lsl #6
	u8 t = tail & 0x7F;
	u8 n = (t + 1) & 0x7F;

	/* fail if queue is full */
	if (h == n) {
		return NULL;
    7036:	2000      	moveq	r0, #0
	}

	++tail;
	return &fifo[t];

}
    7038:	4770      	bx	lr
    703a:	bf00      	nop
    703c:	10000a60 	.word	0x10000a60
    7040:	10001800 	.word	0x10001800

00007044 <dequeue>:

usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    7044:	4b08      	ldr	r3, [pc, #32]	; (7068 <dequeue+0x24>)
    7046:	6818      	ldr	r0, [r3, #0]
	u8 t = tail & 0x7F;
    7048:	685a      	ldr	r2, [r3, #4]

}

usb_pkt_rx *dequeue(void)
{
	u8 h = head & 0x7F;
    704a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
    704e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7052:	4290      	cmp	r0, r2
		return NULL;
	}

	++head;
    7054:	bf1f      	itttt	ne
    7056:	681a      	ldrne	r2, [r3, #0]
    7058:	3201      	addne	r2, #1
    705a:	601a      	strne	r2, [r3, #0]
	return &fifo[h];
    705c:	4b03      	ldrne	r3, [pc, #12]	; (706c <dequeue+0x28>)
    705e:	bf14      	ite	ne
    7060:	eb03 1080 	addne.w	r0, r3, r0, lsl #6
	u8 h = head & 0x7F;
	u8 t = tail & 0x7F;

	/* fail if queue is empty */
	if (h == t) {
		return NULL;
    7064:	2000      	moveq	r0, #0
	}

	++head;
	return &fifo[h];
}
    7066:	4770      	bx	lr
    7068:	10000a60 	.word	0x10000a60
    706c:	10001800 	.word	0x10001800

00007070 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    7070:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7072:	4605      	mov	r5, r0
	usb_pkt_rx *pkt = dequeue();
    7074:	f7ff ffe6 	bl	7044 <dequeue>
    7078:	4b0d      	ldr	r3, [pc, #52]	; (70b0 <dequeue_send+0x40>)
	if (pkt != NULL) {
    707a:	4604      	mov	r4, r0
    707c:	b138      	cbz	r0, 708e <dequeue_send+0x1e>
		last_usb_pkt = clkn;
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    707e:	2082      	movs	r0, #130	; 0x82
    7080:	4621      	mov	r1, r4
    7082:	2240      	movs	r2, #64	; 0x40

int dequeue_send(u32 clkn)
{
	usb_pkt_rx *pkt = dequeue();
	if (pkt != NULL) {
		last_usb_pkt = clkn;
    7084:	609d      	str	r5, [r3, #8]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    7086:	f002 fc63 	bl	9950 <USBHwEPWrite>
		return 1;
    708a:	2001      	movs	r0, #1
    708c:	e00e      	b.n	70ac <dequeue_send+0x3c>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    708e:	689a      	ldr	r2, [r3, #8]
    7090:	4908      	ldr	r1, [pc, #32]	; (70b4 <dequeue_send+0x44>)
    7092:	1aaa      	subs	r2, r5, r2
    7094:	428a      	cmp	r2, r1
    7096:	d908      	bls.n	70aa <dequeue_send+0x3a>
			u8 pkt_type = KEEP_ALIVE;
    7098:	2203      	movs	r2, #3
    709a:	a902      	add	r1, sp, #8
    709c:	f801 2d01 	strb.w	r2, [r1, #-1]!
			last_usb_pkt = clkn;
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    70a0:	2082      	movs	r0, #130	; 0x82
    70a2:	2201      	movs	r2, #1
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
		return 1;
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
			u8 pkt_type = KEEP_ALIVE;
			last_usb_pkt = clkn;
    70a4:	609d      	str	r5, [r3, #8]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    70a6:	f002 fc53 	bl	9950 <USBHwEPWrite>
		}
		return 0;
    70aa:	4620      	mov	r0, r4
	}
}
    70ac:	b003      	add	sp, #12
    70ae:	bd30      	pop	{r4, r5, pc}
    70b0:	10000a60 	.word	0x10000a60
    70b4:	00061a80 	.word	0x00061a80

000070b8 <handle_usb>:

void handle_usb(u32 clkn)
{
    70b8:	b538      	push	{r3, r4, r5, lr}
    70ba:	4604      	mov	r4, r0
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    70bc:	2082      	movs	r0, #130	; 0x82
    70be:	f002 fc21 	bl	9904 <USBHwEPGetStatus>
	if (!(epstat & EPSTAT_B1FULL)) {
    70c2:	0682      	lsls	r2, r0, #26
void handle_usb(u32 clkn)
{
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    70c4:	4605      	mov	r5, r0
	if (!(epstat & EPSTAT_B1FULL)) {
    70c6:	d402      	bmi.n	70ce <handle_usb+0x16>
		dequeue_send(clkn);
    70c8:	4620      	mov	r0, r4
    70ca:	f7ff ffd1 	bl	7070 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    70ce:	066b      	lsls	r3, r5, #25
    70d0:	d402      	bmi.n	70d8 <handle_usb+0x20>
		dequeue_send(clkn);
    70d2:	4620      	mov	r0, r4
    70d4:	f7ff ffcc 	bl	7070 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
}
    70d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	if (!(epstat & EPSTAT_B2FULL)) {
		dequeue_send(clkn);
	}

	/* polled "interrupt" */
	USBHwISR();
    70dc:	f002 bca8 	b.w	9a30 <USBHwISR>

000070e0 <rssi_reset>:

int32_t rssi_sum;
int16_t rssi_iir[79] = {0};

void rssi_reset(void)
{
    70e0:	b508      	push	{r3, lr}
	memset(rssi_iir, 0, sizeof(rssi_iir));
    70e2:	229e      	movs	r2, #158	; 0x9e
    70e4:	4807      	ldr	r0, [pc, #28]	; (7104 <rssi_reset+0x24>)
    70e6:	2100      	movs	r1, #0
    70e8:	f7fd f886 	bl	41f8 <memset>

	rssi_count = 0;
    70ec:	4a06      	ldr	r2, [pc, #24]	; (7108 <rssi_reset+0x28>)
    70ee:	2300      	movs	r3, #0
    70f0:	7013      	strb	r3, [r2, #0]
	rssi_sum = 0;
    70f2:	4a06      	ldr	r2, [pc, #24]	; (710c <rssi_reset+0x2c>)
    70f4:	6013      	str	r3, [r2, #0]
	rssi_max = INT8_MIN;
    70f6:	4b06      	ldr	r3, [pc, #24]	; (7110 <rssi_reset+0x30>)
    70f8:	2280      	movs	r2, #128	; 0x80
    70fa:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    70fc:	4b05      	ldr	r3, [pc, #20]	; (7114 <rssi_reset+0x34>)
    70fe:	227f      	movs	r2, #127	; 0x7f
    7100:	701a      	strb	r2, [r3, #0]
    7102:	bd08      	pop	{r3, pc}
    7104:	10000a6c 	.word	0x10000a6c
    7108:	100016ce 	.word	0x100016ce
    710c:	10003908 	.word	0x10003908
    7110:	10001230 	.word	0x10001230
    7114:	10001232 	.word	0x10001232

00007118 <rssi_add>:
}

void rssi_add(int8_t v)
{
	rssi_max = (v > rssi_max) ? v : rssi_max;
    7118:	4a0b      	ldr	r2, [pc, #44]	; (7148 <rssi_add+0x30>)
    711a:	f992 3000 	ldrsb.w	r3, [r2]
    711e:	4283      	cmp	r3, r0
    7120:	bfb8      	it	lt
    7122:	4603      	movlt	r3, r0
    7124:	7013      	strb	r3, [r2, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    7126:	4a09      	ldr	r2, [pc, #36]	; (714c <rssi_add+0x34>)
    7128:	f992 3000 	ldrsb.w	r3, [r2]
    712c:	4283      	cmp	r3, r0
    712e:	bfa8      	it	ge
    7130:	4603      	movge	r3, r0
    7132:	7013      	strb	r3, [r2, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    7134:	4a06      	ldr	r2, [pc, #24]	; (7150 <rssi_add+0x38>)
    7136:	6813      	ldr	r3, [r2, #0]
    7138:	eb03 2300 	add.w	r3, r3, r0, lsl #8
    713c:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    713e:	4a05      	ldr	r2, [pc, #20]	; (7154 <rssi_add+0x3c>)
    7140:	7813      	ldrb	r3, [r2, #0]
    7142:	3301      	adds	r3, #1
    7144:	7013      	strb	r3, [r2, #0]
    7146:	4770      	bx	lr
    7148:	10001230 	.word	0x10001230
    714c:	10001232 	.word	0x10001232
    7150:	10003908 	.word	0x10003908
    7154:	100016ce 	.word	0x100016ce

00007158 <rssi_iir_update>:
}

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
void rssi_iir_update(uint16_t channel)
{
    7158:	b510      	push	{r4, lr}
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    715a:	f640 1362 	movw	r3, #2402	; 0x962
    715e:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    7162:	bf38      	it	cc
    7164:	4618      	movcc	r0, r3

	int i = channel - 2402;

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    7166:	4b0d      	ldr	r3, [pc, #52]	; (719c <rssi_iir_update+0x44>)
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;

	int i = channel - 2402;
    7168:	f6a0 1062 	subw	r0, r0, #2402	; 0x962

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    716c:	781b      	ldrb	r3, [r3, #0]
    716e:	b123      	cbz	r3, 717a <rssi_iir_update+0x22>
		avg = (rssi_sum  + 128) / rssi_count;
    7170:	4a0b      	ldr	r2, [pc, #44]	; (71a0 <rssi_iir_update+0x48>)
    7172:	6812      	ldr	r2, [r2, #0]
    7174:	3280      	adds	r2, #128	; 0x80
    7176:	fb92 f3f3 	sdiv	r3, r2, r3
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    717a:	490a      	ldr	r1, [pc, #40]	; (71a4 <rssi_iir_update+0x4c>)
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    717c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	// IIR using scaled int math (x256)
	if (rssi_count != 0)
		avg = (rssi_sum  + 128) / rssi_count;
	else
		avg = 0; // really an error
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    7180:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    7184:	24fd      	movs	r4, #253	; 0xfd
    7186:	fb04 3302 	mla	r3, r4, r2, r3
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    718a:	f44f 7280 	mov.w	r2, #256	; 0x100
    718e:	3380      	adds	r3, #128	; 0x80
    7190:	fb93 f3f2 	sdiv	r3, r3, r2
    7194:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
    7198:	bd10      	pop	{r4, pc}
    719a:	bf00      	nop
    719c:	100016ce 	.word	0x100016ce
    71a0:	10003908 	.word	0x10003908
    71a4:	10000a6c 	.word	0x10000a6c

000071a8 <rssi_get_avg>:
int8_t rssi_get_avg(uint16_t channel)
{
	/* Use array to track 79 Bluetooth channels, or just first slot
	 * of array if the frequency is not a valid Bluetooth channel. */
	if ( channel < 2402 || channel < 2480 )
		channel = 2402;
    71a8:	f640 1362 	movw	r3, #2402	; 0x962
    71ac:	f5b0 6f1b 	cmp.w	r0, #2480	; 0x9b0
    71b0:	bf38      	it	cc
    71b2:	4618      	movcc	r0, r3

	return (rssi_iir[channel-2402] + 128) / 256;
    71b4:	4b05      	ldr	r3, [pc, #20]	; (71cc <rssi_get_avg+0x24>)
    71b6:	f6a0 1062 	subw	r0, r0, #2402	; 0x962
    71ba:	f933 0010 	ldrsh.w	r0, [r3, r0, lsl #1]
    71be:	f44f 7380 	mov.w	r3, #256	; 0x100
    71c2:	3080      	adds	r0, #128	; 0x80
    71c4:	fb90 f0f3 	sdiv	r0, r0, r3
}
    71c8:	b240      	sxtb	r0, r0
    71ca:	4770      	bx	lr
    71cc:	10000a6c 	.word	0x10000a6c

000071d0 <cs_threshold_calc_and_set>:
	cs_threshold_cur = level;
	cs_no_squelch = (level <= -120);
}

void cs_threshold_calc_and_set(uint16_t channel)
{
    71d0:	b538      	push	{r3, r4, r5, lr}

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if (cs_threshold_req > 0) {
    71d2:	4d15      	ldr	r5, [pc, #84]	; (7228 <cs_threshold_calc_and_set+0x58>)
    71d4:	782c      	ldrb	r4, [r5, #0]
    71d6:	b263      	sxtb	r3, r4
    71d8:	2b00      	cmp	r3, #0
    71da:	dd05      	ble.n	71e8 <cs_threshold_calc_and_set+0x18>
		int8_t rssi = rssi_get_avg(channel);
    71dc:	f7ff ffe4 	bl	71a8 <rssi_get_avg>
    71e0:	782c      	ldrb	r4, [r5, #0]
    71e2:	3c36      	subs	r4, #54	; 0x36
		level = rssi - 54 + cs_threshold_req;
    71e4:	4420      	add	r0, r4
    71e6:	b2c4      	uxtb	r4, r0
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, cs_samples_t samples)
{
	level = level < -120 ? -120 : level;
    71e8:	b264      	sxtb	r4, r4
	level = level > -20 ? -20 : level;
    71ea:	f06f 0077 	mvn.w	r0, #119	; 0x77
    71ee:	4284      	cmp	r4, r0
    71f0:	bfb8      	it	lt
    71f2:	4604      	movlt	r4, r0
    71f4:	f06f 0313 	mvn.w	r3, #19
    71f8:	429c      	cmp	r4, r3
    71fa:	bfa8      	it	ge
    71fc:	461c      	movge	r4, r3
    71fe:	b2e4      	uxtb	r4, r4
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | ((uint8_t)samples&3));
    7200:	f104 0138 	add.w	r1, r4, #56	; 0x38
    7204:	f041 0103 	orr.w	r1, r1, #3
    7208:	2006      	movs	r0, #6
    720a:	b2c9      	uxtb	r1, r1
    720c:	f002 f857 	bl	92be <cc2400_set>
	cs_threshold_cur = level;
    7210:	4b06      	ldr	r3, [pc, #24]	; (722c <cs_threshold_calc_and_set+0x5c>)
    7212:	701c      	strb	r4, [r3, #0]
	cs_no_squelch = (level <= -120);
    7214:	b264      	sxtb	r4, r4
    7216:	f114 0f77 	cmn.w	r4, #119	; 0x77
    721a:	4b05      	ldr	r3, [pc, #20]	; (7230 <cs_threshold_calc_and_set+0x60>)
    721c:	bfac      	ite	ge
    721e:	2400      	movge	r4, #0
    7220:	2401      	movlt	r4, #1
    7222:	701c      	strb	r4, [r3, #0]
    7224:	bd38      	pop	{r3, r4, r5, pc}
    7226:	bf00      	nop
    7228:	100016d0 	.word	0x100016d0
    722c:	10001744 	.word	0x10001744
    7230:	10001398 	.word	0x10001398

00007234 <cs_trigger_enable>:
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
void cs_trigger_enable(void)
{
	cs_trigger = 0;
    7234:	4b07      	ldr	r3, [pc, #28]	; (7254 <cs_trigger_enable+0x20>)
    7236:	2200      	movs	r2, #0
    7238:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    723a:	4b07      	ldr	r3, [pc, #28]	; (7258 <cs_trigger_enable+0x24>)
    723c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    7240:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    7242:	4b06      	ldr	r3, [pc, #24]	; (725c <cs_trigger_enable+0x28>)
    7244:	2204      	movs	r2, #4
    7246:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    7248:	4a05      	ldr	r2, [pc, #20]	; (7260 <cs_trigger_enable+0x2c>)
    724a:	6813      	ldr	r3, [r2, #0]
    724c:	f043 0304 	orr.w	r3, r3, #4
    7250:	6013      	str	r3, [r2, #0]
    7252:	4770      	bx	lr
    7254:	10001745 	.word	0x10001745
    7258:	e000e100 	.word	0xe000e100
    725c:	400280ac 	.word	0x400280ac
    7260:	400280b4 	.word	0x400280b4

00007264 <cs_trigger_disable>:
}

void cs_trigger_disable(void)
{
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    7264:	4a07      	ldr	r2, [pc, #28]	; (7284 <cs_trigger_disable+0x20>)
    7266:	6813      	ldr	r3, [r2, #0]
    7268:	f023 0304 	bic.w	r3, r3, #4
    726c:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    726e:	4b06      	ldr	r3, [pc, #24]	; (7288 <cs_trigger_disable+0x24>)
    7270:	2204      	movs	r2, #4
    7272:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    7274:	4b05      	ldr	r3, [pc, #20]	; (728c <cs_trigger_disable+0x28>)
    7276:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    727a:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    727c:	4b04      	ldr	r3, [pc, #16]	; (7290 <cs_trigger_disable+0x2c>)
    727e:	2200      	movs	r2, #0
    7280:	701a      	strb	r2, [r3, #0]
    7282:	4770      	bx	lr
    7284:	400280b4 	.word	0x400280b4
    7288:	400280ac 	.word	0x400280ac
    728c:	e000e180 	.word	0xe000e180
    7290:	10001745 	.word	0x10001745

00007294 <cs_reset>:
}

void cs_reset(void)
{
    7294:	b508      	push	{r3, lr}
	cs_trigger_disable();
    7296:	f7ff ffe5 	bl	7264 <cs_trigger_disable>

	cs_no_squelch = 0;
    729a:	4b04      	ldr	r3, [pc, #16]	; (72ac <cs_reset+0x18>)
    729c:	2200      	movs	r2, #0
    729e:	701a      	strb	r2, [r3, #0]
	cs_threshold_req=CS_THRESHOLD_DEFAULT;
    72a0:	4a03      	ldr	r2, [pc, #12]	; (72b0 <cs_reset+0x1c>)
    72a2:	2388      	movs	r3, #136	; 0x88
    72a4:	7013      	strb	r3, [r2, #0]
	cs_threshold_cur=CS_THRESHOLD_DEFAULT;
    72a6:	4a03      	ldr	r2, [pc, #12]	; (72b4 <cs_reset+0x20>)
    72a8:	7013      	strb	r3, [r2, #0]
    72aa:	bd08      	pop	{r3, pc}
    72ac:	10001398 	.word	0x10001398
    72b0:	100016d0 	.word	0x100016d0
    72b4:	10001744 	.word	0x10001744

000072b8 <clkn_stop>:
#include "ubertooth.h"

void clkn_stop()
{
	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    72b8:	4b0a      	ldr	r3, [pc, #40]	; (72e4 <clkn_stop+0x2c>)
    72ba:	2202      	movs	r2, #2
    72bc:	601a      	str	r2, [r3, #0]

	clkn = 0;
    72be:	4a0a      	ldr	r2, [pc, #40]	; (72e8 <clkn_stop+0x30>)
    72c0:	2300      	movs	r3, #0
    72c2:	6013      	str	r3, [r2, #0]
	last_hop = 0;
    72c4:	4a09      	ldr	r2, [pc, #36]	; (72ec <clkn_stop+0x34>)
    72c6:	6013      	str	r3, [r2, #0]

	clkn_offset = 0;
    72c8:	4a09      	ldr	r2, [pc, #36]	; (72f0 <clkn_stop+0x38>)
    72ca:	6013      	str	r3, [r2, #0]
	clk100ns_offset = 0;
    72cc:	4a09      	ldr	r2, [pc, #36]	; (72f4 <clkn_stop+0x3c>)
    72ce:	8013      	strh	r3, [r2, #0]

	clk_drift_ppm = 0;
    72d0:	4a09      	ldr	r2, [pc, #36]	; (72f8 <clkn_stop+0x40>)
    72d2:	8013      	strh	r3, [r2, #0]
	clk_drift_correction = 0;
    72d4:	4a09      	ldr	r2, [pc, #36]	; (72fc <clkn_stop+0x44>)
    72d6:	8013      	strh	r3, [r2, #0]

	clkn_last_drift_fix = 0;
    72d8:	4a09      	ldr	r2, [pc, #36]	; (7300 <clkn_stop+0x48>)
    72da:	6013      	str	r3, [r2, #0]
	clkn_next_drift_fix = 0;
    72dc:	4a09      	ldr	r2, [pc, #36]	; (7304 <clkn_stop+0x4c>)
    72de:	6013      	str	r3, [r2, #0]
    72e0:	4770      	bx	lr
    72e2:	bf00      	nop
    72e4:	40004004 	.word	0x40004004
    72e8:	1000124c 	.word	0x1000124c
    72ec:	10001228 	.word	0x10001228
    72f0:	10001240 	.word	0x10001240
    72f4:	1000139a 	.word	0x1000139a
    72f8:	100016cc 	.word	0x100016cc
    72fc:	10001248 	.word	0x10001248
    7300:	10001244 	.word	0x10001244
    7304:	10001704 	.word	0x10001704

00007308 <clkn_start>:
}

void clkn_start()
{
	/* start timer */
	T0TCR = TCR_Counter_Enable;
    7308:	4b01      	ldr	r3, [pc, #4]	; (7310 <clkn_start+0x8>)
    730a:	2201      	movs	r2, #1
    730c:	601a      	str	r2, [r3, #0]
    730e:	4770      	bx	lr
    7310:	40004004 	.word	0x40004004

00007314 <clkn_init>:
}

void clkn_init()
{
    7314:	b508      	push	{r3, lr}
	 * Because these are reset defaults, we're assuming TIMER0 is powered on
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	clkn_stop();
    7316:	f7ff ffcf 	bl	72b8 <clkn_stop>
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    731a:	4b06      	ldr	r3, [pc, #24]	; (7334 <clkn_init+0x20>)
    731c:	2204      	movs	r2, #4
    731e:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    7320:	f640 4234 	movw	r2, #3124	; 0xc34
    7324:	60da      	str	r2, [r3, #12]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    7326:	2203      	movs	r2, #3
    7328:	609a      	str	r2, [r3, #8]
	ISER0 = ISER0_ISE_TIMER0;
    732a:	4b03      	ldr	r3, [pc, #12]	; (7338 <clkn_init+0x24>)
    732c:	2202      	movs	r2, #2
    732e:	601a      	str	r2, [r3, #0]
    7330:	bd08      	pop	{r3, pc}
    7332:	bf00      	nop
    7334:	4000400c 	.word	0x4000400c
    7338:	e000e100 	.word	0xe000e100

0000733c <clkn_disable>:
}

// totally disable clkn and timer0
void clkn_disable(void) {
    733c:	b508      	push	{r3, lr}
	clkn_stop();
    733e:	f7ff ffbb 	bl	72b8 <clkn_stop>
	ICER0 = ICER0_ICE_TIMER0;
    7342:	4b02      	ldr	r3, [pc, #8]	; (734c <clkn_disable+0x10>)
    7344:	2202      	movs	r2, #2
    7346:	601a      	str	r2, [r3, #0]
    7348:	bd08      	pop	{r3, pc}
    734a:	bf00      	nop
    734c:	e000e180 	.word	0xe000e180

00007350 <dma_poweron>:
dma_lli le_dma_lli[11]; // 11 x 4 bytes


void dma_poweron(void) {
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 616
	PCONP |= PCONP_PCGPDMA;
    7350:	4a11      	ldr	r2, [pc, #68]	; (7398 <dma_poweron+0x48>)
    7352:	6813      	ldr	r3, [r2, #0]
    7354:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    7358:	6013      	str	r3, [r2, #0]

	// enable DMA interrupts
	ISER0 = ISER0_ISE_DMA;
    735a:	4b10      	ldr	r3, [pc, #64]	; (739c <dma_poweron+0x4c>)
    735c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7360:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    7362:	4a0f      	ldr	r2, [pc, #60]	; (73a0 <dma_poweron+0x50>)
    7364:	2300      	movs	r3, #0
    7366:	6013      	str	r3, [r2, #0]
	DMACC1Config = 0;
    7368:	6213      	str	r3, [r2, #32]
	DMACC2Config = 0;
    736a:	6413      	str	r3, [r2, #64]	; 0x40
	DMACC3Config = 0;
    736c:	6613      	str	r3, [r2, #96]	; 0x60
	DMACC4Config = 0;
    736e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMACC5Config = 0;
    7372:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	DMACC6Config = 0;
    7376:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
	DMACC7Config = 0;
    737a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	DMACIntTCClear = 0xFF;
    737e:	23ff      	movs	r3, #255	; 0xff
    7380:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
    7384:	6013      	str	r3, [r2, #0]
	DMACIntErrClr = 0xFF;
    7386:	6093      	str	r3, [r2, #8]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    7388:	4b06      	ldr	r3, [pc, #24]	; (73a4 <dma_poweron+0x54>)
    738a:	2201      	movs	r2, #1
    738c:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    738e:	681a      	ldr	r2, [r3, #0]
    7390:	07d2      	lsls	r2, r2, #31
    7392:	d5fc      	bpl.n	738e <dma_poweron+0x3e>
}
    7394:	4770      	bx	lr
    7396:	bf00      	nop
    7398:	400fc0c4 	.word	0x400fc0c4
    739c:	e000e100 	.word	0xe000e100
    73a0:	50004110 	.word	0x50004110
    73a4:	50004030 	.word	0x50004030

000073a8 <dma_init_rx_symbols>:
void dma_clear_interrupts(unsigned channel) {
	DMACIntTCClear = 1 << channel;
	DMACIntErrClr  = 1 << channel;
}

void dma_init_rx_symbols(void) {
    73a8:	b530      	push	{r4, r5, lr}

	PCONP &= ~PCONP_PCGPDMA;
}

void dma_clear_interrupts(unsigned channel) {
	DMACIntTCClear = 1 << channel;
    73aa:	4a14      	ldr	r2, [pc, #80]	; (73fc <dma_init_rx_symbols+0x54>)
    73ac:	2301      	movs	r3, #1
    73ae:	6013      	str	r3, [r2, #0]

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
	rx_dma_lli1.control = (DMA_SIZE) |
    73b0:	4813      	ldr	r0, [pc, #76]	; (7400 <dma_init_rx_symbols+0x58>)
	PCONP &= ~PCONP_PCGPDMA;
}

void dma_clear_interrupts(unsigned channel) {
	DMACIntTCClear = 1 << channel;
	DMACIntErrClr  = 1 << channel;
    73b2:	6093      	str	r3, [r2, #8]

void dma_init_rx_symbols(void) {
	dma_clear_interrupts(0);

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    73b4:	4c13      	ldr	r4, [pc, #76]	; (7404 <dma_init_rx_symbols+0x5c>)
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    73b6:	4b14      	ldr	r3, [pc, #80]	; (7408 <dma_init_rx_symbols+0x60>)

void dma_init_rx_symbols(void) {
	dma_clear_interrupts(0);

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    73b8:	4a14      	ldr	r2, [pc, #80]	; (740c <dma_init_rx_symbols+0x64>)
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    73ba:	4915      	ldr	r1, [pc, #84]	; (7410 <dma_init_rx_symbols+0x68>)

void dma_init_rx_symbols(void) {
	dma_clear_interrupts(0);

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
    73bc:	6014      	str	r4, [r2, #0]
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
    73be:	6093      	str	r3, [r2, #8]
void dma_init_rx_symbols(void) {
	dma_clear_interrupts(0);

	/* DMA linked lists */
	rx_dma_lli1.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli1.dest = (uint32_t)&rxbuf1[0];
    73c0:	6051      	str	r1, [r2, #4]
	rx_dma_lli1.next_lli = (uint32_t)&rx_dma_lli2;
	rx_dma_lli1.control = (DMA_SIZE) |
    73c2:	60d0      	str	r0, [r2, #12]
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
    73c4:	609a      	str	r2, [r3, #8]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    73c6:	4d13      	ldr	r5, [pc, #76]	; (7414 <dma_init_rx_symbols+0x6c>)
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* configure DMA channel 0 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    73c8:	4a13      	ldr	r2, [pc, #76]	; (7418 <dma_init_rx_symbols+0x70>)
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
    73ca:	605d      	str	r5, [r3, #4]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (uint32_t)&(DIO_SSP_DR);
    73cc:	601c      	str	r4, [r3, #0]
	rx_dma_lli2.dest = (uint32_t)&rxbuf2[0];
	rx_dma_lli2.next_lli = (uint32_t)&rx_dma_lli1;
	rx_dma_lli2.control = (DMA_SIZE) |
    73ce:	60d8      	str	r0, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* configure DMA channel 0 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    73d0:	6014      	str	r4, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    73d2:	6051      	str	r1, [r2, #4]
	DMACC0LLI = rx_dma_lli1.next_lli;
    73d4:	6093      	str	r3, [r2, #8]
	DMACC0Control = rx_dma_lli1.control;
	DMACC0Config = DIO_SSP_SRC
    73d6:	f24d 0206 	movw	r2, #53254	; 0xd006

	/* configure DMA channel 0 */
	DMACC0SrcAddr = rx_dma_lli1.src;
	DMACC0DestAddr = rx_dma_lli1.dest;
	DMACC0LLI = rx_dma_lli1.next_lli;
	DMACC0Control = rx_dma_lli1.control;
    73da:	4b10      	ldr	r3, [pc, #64]	; (741c <dma_init_rx_symbols+0x74>)
    73dc:	6018      	str	r0, [r3, #0]
	DMACC0Config = DIO_SSP_SRC
	               | (0x2 << 11)       /* peripheral to memory */
	               | DMACCxConfig_IE   /* allow error interrupts */
	               | DMACCxConfig_ITC; /* allow terminal count interrupts */

	rx_tc = 0;
    73de:	4810      	ldr	r0, [pc, #64]	; (7420 <dma_init_rx_symbols+0x78>)
	/* configure DMA channel 0 */
	DMACC0SrcAddr = rx_dma_lli1.src;
	DMACC0DestAddr = rx_dma_lli1.dest;
	DMACC0LLI = rx_dma_lli1.next_lli;
	DMACC0Control = rx_dma_lli1.control;
	DMACC0Config = DIO_SSP_SRC
    73e0:	605a      	str	r2, [r3, #4]
	               | (0x2 << 11)       /* peripheral to memory */
	               | DMACCxConfig_IE   /* allow error interrupts */
	               | DMACCxConfig_ITC; /* allow terminal count interrupts */

	rx_tc = 0;
    73e2:	2200      	movs	r2, #0
    73e4:	6002      	str	r2, [r0, #0]
	rx_err = 0;
    73e6:	480f      	ldr	r0, [pc, #60]	; (7424 <dma_init_rx_symbols+0x7c>)
    73e8:	6002      	str	r2, [r0, #0]

	active_rxbuf = &rxbuf1[0];
    73ea:	4a0f      	ldr	r2, [pc, #60]	; (7428 <dma_init_rx_symbols+0x80>)
    73ec:	6011      	str	r1, [r2, #0]
	idle_rxbuf = &rxbuf2[0];
    73ee:	4a0f      	ldr	r2, [pc, #60]	; (742c <dma_init_rx_symbols+0x84>)
    73f0:	6015      	str	r5, [r2, #0]

	// enable channel
	DMACC0Config |= 1;
    73f2:	685a      	ldr	r2, [r3, #4]
    73f4:	f042 0201 	orr.w	r2, r2, #1
    73f8:	605a      	str	r2, [r3, #4]
	/* configure DMA channel 0 */
	DMACC0SrcAddr = rx_dma_lli1.src;
	DMACC0DestAddr = rx_dma_lli1.dest;
	DMACC0LLI = rx_dma_lli1.next_lli;
	DMACC0Control = rx_dma_lli1.control;
	DMACC0Config = DIO_SSP_SRC
    73fa:	bd30      	pop	{r4, r5, pc}
    73fc:	50004008 	.word	0x50004008
    7400:	88009032 	.word	0x88009032
    7404:	40030008 	.word	0x40030008
    7408:	100039bc 	.word	0x100039bc
    740c:	100039cc 	.word	0x100039cc
    7410:	1000170d 	.word	0x1000170d
    7414:	100016d1 	.word	0x100016d1
    7418:	50004100 	.word	0x50004100
    741c:	5000410c 	.word	0x5000410c
    7420:	1000122c 	.word	0x1000122c
    7424:	10001740 	.word	0x10001740
    7428:	1000128c 	.word	0x1000128c
    742c:	100013a8 	.word	0x100013a8

00007430 <dma_init_le>:

	PCONP &= ~PCONP_PCGPDMA;
}

void dma_clear_interrupts(unsigned channel) {
	DMACIntTCClear = 1 << channel;
    7430:	4a15      	ldr	r2, [pc, #84]	; (7488 <dma_init_le+0x58>)
    7432:	2301      	movs	r3, #1
    7434:	6013      	str	r3, [r2, #0]
	DMACIntErrClr  = 1 << channel;
    7436:	6093      	str	r3, [r2, #8]
    7438:	4b14      	ldr	r3, [pc, #80]	; (748c <dma_init_le+0x5c>)
void dma_init_le(void) {
	int i;

	dma_clear_interrupts(0);

	for (i = 0; i < 11; ++i) {
    743a:	2200      	movs	r2, #0
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    743c:	4914      	ldr	r1, [pc, #80]	; (7490 <dma_init_le+0x60>)
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
    743e:	2a0a      	cmp	r2, #10
	int i;

	dma_clear_interrupts(0);

	for (i = 0; i < 11; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7440:	f843 1c10 	str.w	r1, [r3, #-16]
    7444:	4913      	ldr	r1, [pc, #76]	; (7494 <dma_init_le+0x64>)
    7446:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
    744a:	f843 1c0c 	str.w	r1, [r3, #-12]
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
    744e:	bf14      	ite	ne
    7450:	4619      	movne	r1, r3
    7452:	2100      	moveq	r1, #0
    7454:	f843 1c08 	str.w	r1, [r3, #-8]
void dma_init_le(void) {
	int i;

	dma_clear_interrupts(0);

	for (i = 0; i < 11; ++i) {
    7458:	3201      	adds	r2, #1
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    745a:	490f      	ldr	r1, [pc, #60]	; (7498 <dma_init_le+0x68>)
void dma_init_le(void) {
	int i;

	dma_clear_interrupts(0);

	for (i = 0; i < 11; ++i) {
    745c:	2a0b      	cmp	r2, #11
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&rxbuf1[4 * i];
		le_dma_lli[i].next_lli = i < 10 ? (uint32_t)&le_dma_lli[i+1] : 0;
		le_dma_lli[i].control = 4 |
    745e:	f843 1c04 	str.w	r1, [r3, #-4]
    7462:	f103 0310 	add.w	r3, r3, #16
void dma_init_le(void) {
	int i;

	dma_clear_interrupts(0);

	for (i = 0; i < 11; ++i) {
    7466:	d1e9      	bne.n	743c <dma_init_le+0xc>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    7468:	4b0c      	ldr	r3, [pc, #48]	; (749c <dma_init_le+0x6c>)
    746a:	4a0d      	ldr	r2, [pc, #52]	; (74a0 <dma_init_le+0x70>)
    746c:	6819      	ldr	r1, [r3, #0]
    746e:	6011      	str	r1, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    7470:	6859      	ldr	r1, [r3, #4]
    7472:	6051      	str	r1, [r2, #4]
	DMACC0LLI = le_dma_lli[0].next_lli;
    7474:	6899      	ldr	r1, [r3, #8]
    7476:	6091      	str	r1, [r2, #8]
	DMACC0Control = le_dma_lli[0].control;
    7478:	68da      	ldr	r2, [r3, #12]
    747a:	4b0a      	ldr	r3, [pc, #40]	; (74a4 <dma_init_le+0x74>)
    747c:	601a      	str	r2, [r3, #0]
	DMACC0Config =
    747e:	f24d 0206 	movw	r2, #53254	; 0xd006
    7482:	605a      	str	r2, [r3, #4]
    7484:	4770      	bx	lr
    7486:	bf00      	nop
    7488:	50004008 	.word	0x50004008
    748c:	1000391c 	.word	0x1000391c
    7490:	40030008 	.word	0x40030008
    7494:	1000170d 	.word	0x1000170d
    7498:	88001004 	.word	0x88001004
    749c:	1000390c 	.word	0x1000390c
    74a0:	50004100 	.word	0x50004100
    74a4:	5000410c 	.word	0x5000410c

000074a8 <dio_ssp_start>:
}

void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    74a8:	4b0b      	ldr	r3, [pc, #44]	; (74d8 <dio_ssp_start+0x30>)

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    74aa:	490c      	ldr	r1, [pc, #48]	; (74dc <dio_ssp_start+0x34>)
}

void dio_ssp_start()
{
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    74ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    74b0:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    74b2:	680b      	ldr	r3, [r1, #0]
    74b4:	f043 0301 	orr.w	r3, r3, #1
    74b8:	600b      	str	r3, [r1, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    74ba:	f851 3c20 	ldr.w	r3, [r1, #-32]
    74be:	f043 0302 	orr.w	r3, r3, #2
    74c2:	f841 3c20 	str.w	r3, [r1, #-32]

	// enable channel
	DMACC0Config |= 1;
    74c6:	4906      	ldr	r1, [pc, #24]	; (74e0 <dio_ssp_start+0x38>)
    74c8:	680b      	ldr	r3, [r1, #0]
    74ca:	f043 0301 	orr.w	r3, r3, #1
    74ce:	600b      	str	r3, [r1, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    74d0:	4b04      	ldr	r3, [pc, #16]	; (74e4 <dio_ssp_start+0x3c>)
    74d2:	601a      	str	r2, [r3, #0]
    74d4:	4770      	bx	lr
    74d6:	bf00      	nop
    74d8:	2009c098 	.word	0x2009c098
    74dc:	40030024 	.word	0x40030024
    74e0:	50004110 	.word	0x50004110
    74e4:	2009c09c 	.word	0x2009c09c

000074e8 <dio_ssp_stop>:
}

void dio_ssp_stop()
{
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    74e8:	4b0b      	ldr	r3, [pc, #44]	; (7518 <dio_ssp_stop+0x30>)
    74ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    74ee:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP ; disable DMA channel
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    74f0:	4a0a      	ldr	r2, [pc, #40]	; (751c <dio_ssp_stop+0x34>)
    74f2:	6813      	ldr	r3, [r2, #0]
    74f4:	f023 0301 	bic.w	r3, r3, #1
    74f8:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    74fa:	f852 3c20 	ldr.w	r3, [r2, #-32]
    74fe:	f023 0302 	bic.w	r3, r3, #2
    7502:	f842 3c20 	str.w	r3, [r2, #-32]
	DMACC0Config = 0;
    7506:	4b06      	ldr	r3, [pc, #24]	; (7520 <dio_ssp_stop+0x38>)
    7508:	2200      	movs	r2, #0
    750a:	601a      	str	r2, [r3, #0]

	PCONP &= ~PCONP_PCGPDMA;
}

void dma_clear_interrupts(unsigned channel) {
	DMACIntTCClear = 1 << channel;
    750c:	4a05      	ldr	r2, [pc, #20]	; (7524 <dio_ssp_stop+0x3c>)
    750e:	2301      	movs	r3, #1
    7510:	6013      	str	r3, [r2, #0]
	DMACIntErrClr  = 1 << channel;
    7512:	6093      	str	r3, [r2, #8]
    7514:	4770      	bx	lr
    7516:	bf00      	nop
    7518:	2009c098 	.word	0x2009c098
    751c:	40030024 	.word	0x40030024
    7520:	50004110 	.word	0x50004110
    7524:	50004008 	.word	0x50004008

00007528 <le_dma_init>:
			DMACIntErrClr = (1 << 0);
		}
	}
}

static void le_dma_init(void) {
    7528:	b530      	push	{r4, r5, lr}
		uint32_t control;
	} dma_lli;
	static dma_lli le_dma_lli[2];

	for (i = 0; i < 2; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    752a:	4b0c      	ldr	r3, [pc, #48]	; (755c <le_dma_init+0x34>)
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    752c:	490c      	ldr	r1, [pc, #48]	; (7560 <le_dma_init+0x38>)
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
		le_dma_lli[i].control = 1 |
    752e:	4a0d      	ldr	r2, [pc, #52]	; (7564 <le_dma_init+0x3c>)
		uint32_t control;
	} dma_lli;
	static dma_lli le_dma_lli[2];

	for (i = 0; i < 2; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7530:	480d      	ldr	r0, [pc, #52]	; (7568 <le_dma_init+0x40>)
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
    7532:	f103 0410 	add.w	r4, r3, #16
	} dma_lli;
	static dma_lli le_dma_lli[2];

	for (i = 0; i < 2; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    7536:	1c4d      	adds	r5, r1, #1
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
		le_dma_lli[i].control = 1 |
    7538:	60da      	str	r2, [r3, #12]
		uint32_t control;
	} dma_lli;
	static dma_lli le_dma_lli[2];

	for (i = 0; i < 2; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    753a:	6018      	str	r0, [r3, #0]
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    753c:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
    753e:	609c      	str	r4, [r3, #8]
		uint32_t control;
	} dma_lli;
	static dma_lli le_dma_lli[2];

	for (i = 0; i < 2; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
    7540:	6118      	str	r0, [r3, #16]
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
		le_dma_lli[i].control = 1 |
    7542:	61da      	str	r2, [r3, #28]
	} dma_lli;
	static dma_lli le_dma_lli[2];

	for (i = 0; i < 2; ++i) {
		le_dma_lli[i].src = (uint32_t)&(DIO_SSP_DR);
		le_dma_lli[i].dest = (uint32_t)&le_dma_dest[i];
    7544:	615d      	str	r5, [r3, #20]
		le_dma_lli[i].next_lli = (uint32_t)&le_dma_lli[1-i]; // two elements pointing back at each other
    7546:	619b      	str	r3, [r3, #24]
				(0 << 21) |        // destination width 8 bits
				DMACCxControl_I;   // terminal count interrupt enable
	}

	// configure DMA channel 0
	DMACC0SrcAddr = le_dma_lli[0].src;
    7548:	4b08      	ldr	r3, [pc, #32]	; (756c <le_dma_init+0x44>)
    754a:	6018      	str	r0, [r3, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    754c:	6059      	str	r1, [r3, #4]
	DMACC0LLI = le_dma_lli[0].next_lli;
    754e:	609c      	str	r4, [r3, #8]
	DMACC0Control = le_dma_lli[0].control;
    7550:	60da      	str	r2, [r3, #12]
	DMACC0Config =
    7552:	f24d 0206 	movw	r2, #53254	; 0xd006
    7556:	611a      	str	r2, [r3, #16]
    7558:	bd30      	pop	{r4, r5, pc}
    755a:	bf00      	nop
    755c:	10000b0c 	.word	0x10000b0c
    7560:	10003a1c 	.word	0x10003a1c
    7564:	80000001 	.word	0x80000001
    7568:	40030008 	.word	0x40030008
    756c:	50004100 	.word	0x50004100

00007570 <timer1_set_match>:
	// clear interrupt handler
	ICER0 = ICER0_ICE_TIMER1;
}

static void timer1_set_match(uint32_t match) {
	T1MR0 = match;
    7570:	4b03      	ldr	r3, [pc, #12]	; (7580 <timer1_set_match+0x10>)
	T1MCR |= TMCR_MR0I;
    7572:	4a04      	ldr	r2, [pc, #16]	; (7584 <timer1_set_match+0x14>)
	// clear interrupt handler
	ICER0 = ICER0_ICE_TIMER1;
}

static void timer1_set_match(uint32_t match) {
	T1MR0 = match;
    7574:	6018      	str	r0, [r3, #0]
	T1MCR |= TMCR_MR0I;
    7576:	6813      	ldr	r3, [r2, #0]
    7578:	f043 0301 	orr.w	r3, r3, #1
    757c:	6013      	str	r3, [r2, #0]
    757e:	4770      	bx	lr
    7580:	40008018 	.word	0x40008018
    7584:	40008014 	.word	0x40008014

00007588 <timer1_wait_fs_lock>:
static void timer1_clear_match(void) {
	T1MCR &= ~TMCR_MR0I;
}

static void timer1_wait_fs_lock(void) {
	T1MR2 = NOW + USEC(3);
    7588:	4b05      	ldr	r3, [pc, #20]	; (75a0 <timer1_wait_fs_lock+0x18>)
    758a:	4a06      	ldr	r2, [pc, #24]	; (75a4 <timer1_wait_fs_lock+0x1c>)
    758c:	681b      	ldr	r3, [r3, #0]
    758e:	331e      	adds	r3, #30
    7590:	6013      	str	r3, [r2, #0]
	T1MCR |= TMCR_MR2I;
    7592:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    7596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    759a:	f842 3c0c 	str.w	r3, [r2, #-12]
    759e:	4770      	bx	lr
    75a0:	40008008 	.word	0x40008008
    75a4:	40008020 	.word	0x40008020

000075a8 <extract_field>:
	f->status = 0;

	return 1;
}

static unsigned extract_field(le_rx_t *buf, size_t offset, unsigned size) {
    75a8:	b570      	push	{r4, r5, r6, lr}
    75aa:	4605      	mov	r5, r0
	unsigned i, ret = 0;
    75ac:	2000      	movs	r0, #0

	// this could just be replaced by memcpy... right?
	for (i = 0; i < size; ++i)
    75ae:	4603      	mov	r3, r0
    75b0:	4293      	cmp	r3, r2
    75b2:	d006      	beq.n	75c2 <extract_field+0x1a>
    75b4:	186c      	adds	r4, r5, r1
		ret |= buf->data[offset + i] << (i*8);
    75b6:	5ce4      	ldrb	r4, [r4, r3]
    75b8:	00de      	lsls	r6, r3, #3
    75ba:	40b4      	lsls	r4, r6
    75bc:	4320      	orrs	r0, r4

static unsigned extract_field(le_rx_t *buf, size_t offset, unsigned size) {
	unsigned i, ret = 0;

	// this could just be replaced by memcpy... right?
	for (i = 0; i < size; ++i)
    75be:	3301      	adds	r3, #1
    75c0:	e7f6      	b.n	75b0 <extract_field+0x8>
		ret |= buf->data[offset + i] << (i*8);

	return ret;
}
    75c2:	bd70      	pop	{r4, r5, r6, pc}

000075c4 <bd_addr_cmp>:
		}
	}
}

// compare a BD addr against target with mask
static int bd_addr_cmp(uint8_t *bd_addr) {
    75c4:	b510      	push	{r4, lr}
    75c6:	4a08      	ldr	r2, [pc, #32]	; (75e8 <bd_addr_cmp+0x24>)
    75c8:	1e43      	subs	r3, r0, #1
    75ca:	3005      	adds	r0, #5
	unsigned i;
	for (i = 0; i < 6; ++i)
		if ((bd_addr[i] & le.target_mask[i]) != le.target[i])
    75cc:	79d4      	ldrb	r4, [r2, #7]
    75ce:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    75d2:	4021      	ands	r1, r4
    75d4:	f812 4f01 	ldrb.w	r4, [r2, #1]!
    75d8:	428c      	cmp	r4, r1
    75da:	d103      	bne.n	75e4 <bd_addr_cmp+0x20>
}

// compare a BD addr against target with mask
static int bd_addr_cmp(uint8_t *bd_addr) {
	unsigned i;
	for (i = 0; i < 6; ++i)
    75dc:	4283      	cmp	r3, r0
    75de:	d1f5      	bne.n	75cc <bd_addr_cmp+0x8>
		if ((bd_addr[i] & le.target_mask[i]) != le.target[i])
			return 0;
	return 1;
    75e0:	2001      	movs	r0, #1
    75e2:	bd10      	pop	{r4, pc}
// compare a BD addr against target with mask
static int bd_addr_cmp(uint8_t *bd_addr) {
	unsigned i;
	for (i = 0; i < 6; ++i)
		if ((bd_addr[i] & le.target_mask[i]) != le.target[i])
			return 0;
    75e4:	2000      	movs	r0, #0
	return 1;
}
    75e6:	bd10      	pop	{r4, pc}
    75e8:	10000483 	.word	0x10000483

000075ec <reset_conn>:
	unsigned num_packets;
	int opened;
} le_conn_event_t;
le_conn_event_t conn_event;

static void reset_conn(void) {
    75ec:	b510      	push	{r4, lr}
	memset(&conn, 0, sizeof(conn));
    75ee:	4c05      	ldr	r4, [pc, #20]	; (7604 <reset_conn+0x18>)
    75f0:	2100      	movs	r1, #0
    75f2:	f104 0020 	add.w	r0, r4, #32
    75f6:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    75fa:	f7fc fdfd 	bl	41f8 <memset>
	conn.access_address = ADVERTISING_AA;
    75fe:	4b02      	ldr	r3, [pc, #8]	; (7608 <reset_conn+0x1c>)
    7600:	6223      	str	r3, [r4, #32]
    7602:	bd10      	pop	{r4, pc}
    7604:	10000b0c 	.word	0x10000b0c
    7608:	8e89bed6 	.word	0x8e89bed6

0000760c <buffer_get>:
}

// get a packet buffer
// returns a pointer to a buffer if available
// returns NULL otherwise
static le_rx_t *buffer_get(void) {
    760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	for (i = 0; i < LE_BUFFER_POOL_SIZE; ++i) {
    760e:	2100      	movs	r1, #0
    7610:	f44f 7392 	mov.w	r3, #292	; 0x124
    7614:	434b      	muls	r3, r1
    7616:	4c12      	ldr	r4, [pc, #72]	; (7660 <buffer_get+0x54>)
    7618:	f504 75f4 	add.w	r5, r4, #488	; 0x1e8
    761c:	441d      	add	r5, r3
		if (le_buffer_pool[i].available) {
    761e:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
    7622:	b1b2      	cbz	r2, 7652 <buffer_get+0x46>
			le_buffer_pool[i].available = 0;
    7624:	441c      	add	r4, r3
    7626:	2600      	movs	r6, #0
    7628:	f8c4 6300 	str.w	r6, [r4, #768]	; 0x300
		le_buffer_pool[i].available = 1;
}

// clear a buffer for new data
static void buffer_clear(le_rx_t *buf) {
	buf->pos = 0;
    762c:	f8c4 62f0 	str.w	r6, [r4, #752]	; 0x2f0
	buf->size = 0;
    7630:	f8c4 62ec 	str.w	r6, [r4, #748]	; 0x2ec
	memset(buf->data, 0, sizeof(buf->data));
    7634:	4628      	mov	r0, r5
    7636:	4631      	mov	r1, r6
    7638:	f44f 7282 	mov.w	r2, #260	; 0x104
    763c:	f7fc fddc 	bl	41f8 <memset>
	buf->rssi_min = INT8_MAX;
    7640:	237f      	movs	r3, #127	; 0x7f
    7642:	f884 3304 	strb.w	r3, [r4, #772]	; 0x304
	buf->rssi_max = INT8_MIN;
    7646:	2380      	movs	r3, #128	; 0x80
    7648:	f884 3305 	strb.w	r3, [r4, #773]	; 0x305
	buf->rssi_sum = 0;
    764c:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    7650:	e003      	b.n	765a <buffer_get+0x4e>
// returns a pointer to a buffer if available
// returns NULL otherwise
static le_rx_t *buffer_get(void) {
	int i;

	for (i = 0; i < LE_BUFFER_POOL_SIZE; ++i) {
    7652:	3101      	adds	r1, #1
    7654:	2904      	cmp	r1, #4
    7656:	d1db      	bne.n	7610 <buffer_get+0x4>
			buffer_clear(&le_buffer_pool[i]);
			return &le_buffer_pool[i];
		}
	}

	return NULL;
    7658:	4615      	mov	r5, r2
}
    765a:	4628      	mov	r0, r5
    765c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    765e:	bf00      	nop
    7660:	10000b0c 	.word	0x10000b0c

00007664 <le_cc2400_init_rf>:
	le_dma_init();    // prepare DMA + interrupts
	dio_ssp_start();  // enable SSP + DMA
}

// initialize RF and strobe FSON
static void le_cc2400_init_rf(void) {
    7664:	b510      	push	{r4, lr}
	u16 grmdm, mdmctrl;
	uint32_t sync = rbit(conn.access_address);
    7666:	4b1b      	ldr	r3, [pc, #108]	; (76d4 <le_cc2400_init_rf+0x70>)
    7668:	6a18      	ldr	r0, [r3, #32]
    766a:	f001 fd35 	bl	90d8 <rbit>
    766e:	4604      	mov	r4, r0
	//   |  |  | +---------------> 1 preamble byte of 01010101
	//   |  |  +-----------------> packet mode
	//   |  +--------------------> un-buffered mode
	//   +-----------------------> sync error bits: 2

	cc2400_set(MANAND,  0x7ffe);
    7670:	f647 71fe 	movw	r1, #32766	; 0x7ffe
    7674:	200d      	movs	r0, #13
    7676:	f001 fe22 	bl	92be <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    767a:	2012      	movs	r0, #18
    767c:	f642 3122 	movw	r1, #11042	; 0x2b22
    7680:	f001 fe1d 	bl	92be <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    7684:	2014      	movs	r0, #20
    7686:	f241 214b 	movw	r1, #4683	; 0x124b
    768a:	f001 fe18 	bl	92be <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    768e:	2020      	movs	r0, #32
    7690:	f244 41e1 	movw	r1, #17633	; 0x44e1
    7694:	f001 fe13 	bl	92be <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    7698:	202c      	movs	r0, #44	; 0x2c
    769a:	b2a1      	uxth	r1, r4
    769c:	f001 fe0f 	bl	92be <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    76a0:	202d      	movs	r0, #45	; 0x2d
    76a2:	0c21      	lsrs	r1, r4, #16
    76a4:	f001 fe0b 	bl	92be <cc2400_set>

	cc2400_set(FSDIV,   rf_channel - 1); // 1 MHz IF
    76a8:	4b0b      	ldr	r3, [pc, #44]	; (76d8 <le_cc2400_init_rf+0x74>)
    76aa:	2002      	movs	r0, #2
    76ac:	8819      	ldrh	r1, [r3, #0]
    76ae:	3901      	subs	r1, #1
    76b0:	b289      	uxth	r1, r1
    76b2:	f001 fe04 	bl	92be <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    76b6:	2003      	movs	r0, #3
    76b8:	2140      	movs	r1, #64	; 0x40
    76ba:	f001 fe00 	bl	92be <cc2400_set>

	// XOSC16M should always be stable, but leave this test anyway
	while (!(cc2400_status() & XOSC16M_STABLE));
    76be:	f001 fe9f 	bl	9400 <cc2400_status>
    76c2:	0643      	lsls	r3, r0, #25
    76c4:	d5fb      	bpl.n	76be <le_cc2400_init_rf+0x5a>

	// wait for FS_LOCK in background
	cc2400_strobe(SFSON);
    76c6:	2061      	movs	r0, #97	; 0x61
    76c8:	f001 fea1 	bl	940e <cc2400_strobe>
	timer1_wait_fs_lock();
}
    76cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	// XOSC16M should always be stable, but leave this test anyway
	while (!(cc2400_status() & XOSC16M_STABLE));

	// wait for FS_LOCK in background
	cc2400_strobe(SFSON);
	timer1_wait_fs_lock();
    76d0:	f7ff bf5a 	b.w	7588 <timer1_wait_fs_lock>
    76d4:	10000b0c 	.word	0x10000b0c
    76d8:	10003a0c 	.word	0x10003a0c

000076dc <change_channel>:
	HGM_SET;
#endif
}

// change channel and init rx
static void change_channel(void) {
    76dc:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_idx = 0;

	cc2400_strobe(SRFOFF);
    76de:	2064      	movs	r0, #100	; 0x64
    76e0:	f001 fe95 	bl	940e <cc2400_strobe>

	// stop DMA and flush SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    76e4:	4a28      	ldr	r2, [pc, #160]	; (7788 <change_channel+0xac>)
    76e6:	6813      	ldr	r3, [r2, #0]
    76e8:	f023 0301 	bic.w	r3, r3, #1
    76ec:	6013      	str	r3, [r2, #0]
	while (SSP1SR & SSPSR_RNE) {
    76ee:	4b27      	ldr	r3, [pc, #156]	; (778c <change_channel+0xb0>)
    76f0:	681c      	ldr	r4, [r3, #0]
    76f2:	f014 0404 	ands.w	r4, r4, #4
    76f6:	d002      	beq.n	76fe <change_channel+0x22>
		uint8_t tmp = (uint8_t)DIO_SSP_DR;
    76f8:	4b25      	ldr	r3, [pc, #148]	; (7790 <change_channel+0xb4>)
    76fa:	681b      	ldr	r3, [r3, #0]
    76fc:	e7f7      	b.n	76ee <change_channel+0x12>
	}

	buffer_clear(current_rxbuf);
    76fe:	4d25      	ldr	r5, [pc, #148]	; (7794 <change_channel+0xb8>)

// clear a buffer for new data
static void buffer_clear(le_rx_t *buf) {
	buf->pos = 0;
	buf->size = 0;
	memset(buf->data, 0, sizeof(buf->data));
    7700:	f44f 7282 	mov.w	r2, #260	; 0x104
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	while (SSP1SR & SSPSR_RNE) {
		uint8_t tmp = (uint8_t)DIO_SSP_DR;
	}

	buffer_clear(current_rxbuf);
    7704:	f8d5 6678 	ldr.w	r6, [r5, #1656]	; 0x678

// clear a buffer for new data
static void buffer_clear(le_rx_t *buf) {
	buf->pos = 0;
	buf->size = 0;
	memset(buf->data, 0, sizeof(buf->data));
    7708:	4621      	mov	r1, r4
		le_buffer_pool[i].available = 1;
}

// clear a buffer for new data
static void buffer_clear(le_rx_t *buf) {
	buf->pos = 0;
    770a:	f8c6 4108 	str.w	r4, [r6, #264]	; 0x108
	buf->size = 0;
    770e:	f8c6 4104 	str.w	r4, [r6, #260]	; 0x104
	memset(buf->data, 0, sizeof(buf->data));
    7712:	4630      	mov	r0, r6
    7714:	f7fc fd70 	bl	41f8 <memset>
	buf->rssi_min = INT8_MAX;
    7718:	237f      	movs	r3, #127	; 0x7f
    771a:	f886 311c 	strb.w	r3, [r6, #284]	; 0x11c
	buf->rssi_max = INT8_MIN;
    771e:	2380      	movs	r3, #128	; 0x80
    7720:	f886 311d 	strb.w	r3, [r6, #285]	; 0x11d
	buf->rssi_sum = 0;
    7724:	f8c6 4120 	str.w	r4, [r6, #288]	; 0x120
	while (SSP1SR & SSPSR_RNE) {
		uint8_t tmp = (uint8_t)DIO_SSP_DR;
	}

	buffer_clear(current_rxbuf);
	le_dma_init();
    7728:	f7ff fefe 	bl	7528 <le_dma_init>
	dio_ssp_start();
    772c:	f7ff febc 	bl	74a8 <dio_ssp_start>

	if (conn.access_address == ADVERTISING_AA) {
    7730:	6a2a      	ldr	r2, [r5, #32]
    7732:	4b19      	ldr	r3, [pc, #100]	; (7798 <change_channel+0xbc>)
    7734:	429a      	cmp	r2, r3
    7736:	d10e      	bne.n	7756 <change_channel+0x7a>
		// FIXME
		switch (le_adv_channel) {
    7738:	f640 127a 	movw	r2, #2426	; 0x97a
    773c:	4b17      	ldr	r3, [pc, #92]	; (779c <change_channel+0xc0>)
    773e:	881b      	ldrh	r3, [r3, #0]
    7740:	b29b      	uxth	r3, r3
    7742:	4293      	cmp	r3, r2
    7744:	d005      	beq.n	7752 <change_channel+0x76>
			case 2402: channel_idx = 37; break;
    7746:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
    774a:	bf0c      	ite	eq
    774c:	2027      	moveq	r0, #39	; 0x27
    774e:	2025      	movne	r0, #37	; 0x25
    7750:	e012      	b.n	7778 <change_channel+0x9c>
			case 2426: channel_idx = 38; break;
    7752:	2026      	movs	r0, #38	; 0x26
    7754:	e010      	b.n	7778 <change_channel+0x9c>
			case 2480: channel_idx = 39; break;
			default:   channel_idx = 37; break;
		}
	} else {
		conn.channel_idx = (conn.channel_idx + conn.hop_increment) % 37;
    7756:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    775a:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
    775e:	2225      	movs	r2, #37	; 0x25
    7760:	4418      	add	r0, r3
    7762:	fb90 f3f2 	sdiv	r3, r0, r2
    7766:	fb02 0013 	mls	r0, r2, r3, r0
		channel_idx = le_map_channel(conn.channel_idx, &conn.remapping);
    776a:	f105 0140 	add.w	r1, r5, #64	; 0x40
			case 2426: channel_idx = 38; break;
			case 2480: channel_idx = 39; break;
			default:   channel_idx = 37; break;
		}
	} else {
		conn.channel_idx = (conn.channel_idx + conn.hop_increment) % 37;
    776e:	b2c0      	uxtb	r0, r0
    7770:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
		channel_idx = le_map_channel(conn.channel_idx, &conn.remapping);
    7774:	f7ff fbc8 	bl	6f08 <le_map_channel>
	}

	rf_channel = btle_channel_index_to_phys(channel_idx);
    7778:	f7ff fae2 	bl	6d40 <btle_channel_index_to_phys>
	le_cc2400_init_rf();
}
    777c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	} else {
		conn.channel_idx = (conn.channel_idx + conn.hop_increment) % 37;
		channel_idx = le_map_channel(conn.channel_idx, &conn.remapping);
	}

	rf_channel = btle_channel_index_to_phys(channel_idx);
    7780:	4b07      	ldr	r3, [pc, #28]	; (77a0 <change_channel+0xc4>)
    7782:	8018      	strh	r0, [r3, #0]
	le_cc2400_init_rf();
    7784:	f7ff bf6e 	b.w	7664 <le_cc2400_init_rf>
    7788:	40030024 	.word	0x40030024
    778c:	4003000c 	.word	0x4003000c
    7790:	40030008 	.word	0x40030008
    7794:	10000b0c 	.word	0x10000b0c
    7798:	8e89bed6 	.word	0x8e89bed6
    779c:	1000049a 	.word	0x1000049a
    77a0:	10003a0c 	.word	0x10003a0c

000077a4 <finish_conn_event>:
// 3) if the single packet is a slave or we received zero packets,
//    update the anchor to the estimated value
//
// FIXME this code does not properly handle the case where the initial
// connection transmit window has no received packets
static void finish_conn_event(void) {
    77a4:	b538      	push	{r3, r4, r5, lr}
	uint32_t last_anchor = 0;
	int last_anchor_set = 0;

	// two packets -- update anchor
	if (conn_event.num_packets == 2) {
    77a6:	4a2b      	ldr	r2, [pc, #172]	; (7854 <finish_conn_event+0xb0>)
    77a8:	4b2b      	ldr	r3, [pc, #172]	; (7858 <finish_conn_event+0xb4>)
    77aa:	6854      	ldr	r4, [r2, #4]
    77ac:	2c02      	cmp	r4, #2
    77ae:	d101      	bne.n	77b4 <finish_conn_event+0x10>
		last_anchor = conn_event.anchor;
    77b0:	6810      	ldr	r0, [r2, #0]
    77b2:	e00e      	b.n	77d2 <finish_conn_event+0x2e>
		last_anchor_set = 1;
	}

	// if there's one packet, we need to find out if it was the master
	else if (conn_event.num_packets == 1 && conn.anchor_set) {
    77b4:	2c01      	cmp	r4, #1
    77b6:	d13a      	bne.n	782e <finish_conn_event+0x8a>
    77b8:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    77bc:	2900      	cmp	r1, #0
    77be:	d036      	beq.n	782e <finish_conn_event+0x8a>
		// calculate the difference between the estimated and observed anchor
		uint32_t estimated_anchor = conn.last_anchor + conn.conn_interval;
    77c0:	f8d3 5100 	ldr.w	r5, [r3, #256]	; 0x100
    77c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
		uint32_t delta = estimated_anchor - conn_event.anchor;
    77c6:	6810      	ldr	r0, [r2, #0]
	}

	// if there's one packet, we need to find out if it was the master
	else if (conn_event.num_packets == 1 && conn.anchor_set) {
		// calculate the difference between the estimated and observed anchor
		uint32_t estimated_anchor = conn.last_anchor + conn.conn_interval;
    77c8:	4429      	add	r1, r5
    77ca:	311e      	adds	r1, #30
		uint32_t delta = estimated_anchor - conn_event.anchor;
		// see whether the observed anchor is within 3 us of the estimate
		delta += ANCHOR_EPSILON;
    77cc:	1a09      	subs	r1, r1, r0
		if (delta < 2 * ANCHOR_EPSILON) {
    77ce:	293b      	cmp	r1, #59	; 0x3b
    77d0:	d82d      	bhi.n	782e <finish_conn_event+0x8a>
	}

	// if we observed a new anchor, set it
	if (last_anchor_set) {
		conn.last_anchor = last_anchor;
		conn.anchor_set = 1;
    77d2:	2101      	movs	r1, #1
		}
	}

	// if we observed a new anchor, set it
	if (last_anchor_set) {
		conn.last_anchor = last_anchor;
    77d4:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		conn.anchor_set = 1;
    77d8:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    77dc:	481f      	ldr	r0, [pc, #124]	; (785c <finish_conn_event+0xb8>)
		conn.last_anchor = conn_event.anchor;
		conn.last_packet_ts = NOW; // FIXME gross hack
	}

	// update last packet for supervision timeout
	if (conn_event.num_packets > 0) {
    77de:	b114      	cbz	r4, 77e6 <finish_conn_event+0x42>
		conn.last_packet_ts = NOW;
    77e0:	6801      	ldr	r1, [r0, #0]
    77e2:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
	buffer->available = 1;
}

// clear a connection event
static void reset_conn_event(void) {
	conn_event.num_packets = 0;
    77e6:	2100      	movs	r1, #0
    77e8:	6051      	str	r1, [r2, #4]
	conn_event.opened = 0;
    77ea:	6091      	str	r1, [r2, #8]
	}

	reset_conn_event();

	// increment connection event counter
	++conn.conn_event_counter;
    77ec:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
    77f0:	4c19      	ldr	r4, [pc, #100]	; (7858 <finish_conn_event+0xb4>)
    77f2:	3201      	adds	r2, #1
    77f4:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

	// supervision timeout reached - switch back to advertising
	if (NOW - conn.last_packet_ts > conn.supervision_timeout) {
    77f8:	6802      	ldr	r2, [r0, #0]
    77fa:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    77fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7800:	1a12      	subs	r2, r2, r0
    7802:	429a      	cmp	r2, r3
    7804:	d803      	bhi.n	780e <finish_conn_event+0x6a>
		reset_conn();
		change_channel();
	}

	// FIXME - hack to cancel following a connection
	else if (cancel_follow) {
    7806:	4b16      	ldr	r3, [pc, #88]	; (7860 <finish_conn_event+0xbc>)
    7808:	681a      	ldr	r2, [r3, #0]
    780a:	b132      	cbz	r2, 781a <finish_conn_event+0x76>
		cancel_follow = 0;
    780c:	6019      	str	r1, [r3, #0]
		reset_conn();
    780e:	f7ff feed 	bl	75ec <reset_conn>

	// supervision timeout not reached - hop to next channel
	else {
		timer1_set_match(conn.last_anchor + conn.conn_interval - RX_WARMUP_TIME);
	}
}
    7812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

	// FIXME - hack to cancel following a connection
	else if (cancel_follow) {
		cancel_follow = 0;
		reset_conn();
		change_channel();
    7816:	f7ff bf61 	b.w	76dc <change_channel>
	}

	// supervision timeout not reached - hop to next channel
	else {
		timer1_set_match(conn.last_anchor + conn.conn_interval - RX_WARMUP_TIME);
    781a:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    781e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7820:	4418      	add	r0, r3
    7822:	f6a0 30b8 	subw	r0, r0, #3000	; 0xbb8
	}
}
    7826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		change_channel();
	}

	// supervision timeout not reached - hop to next channel
	else {
		timer1_set_match(conn.last_anchor + conn.conn_interval - RX_WARMUP_TIME);
    782a:	f7ff bea1 	b.w	7570 <timer1_set_match>
		conn.last_anchor = last_anchor;
		conn.anchor_set = 1;
	}

	// without a new anchor, estimate the next anchor
	else if (conn.anchor_set) {
    782e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    7832:	4909      	ldr	r1, [pc, #36]	; (7858 <finish_conn_event+0xb4>)
    7834:	b130      	cbz	r0, 7844 <finish_conn_event+0xa0>
		conn.last_anchor += conn.conn_interval;
    7836:	f8d1 0100 	ldr.w	r0, [r1, #256]	; 0x100
    783a:	6b0d      	ldr	r5, [r1, #48]	; 0x30
    783c:	4428      	add	r0, r5
    783e:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    7842:	e7cb      	b.n	77dc <finish_conn_event+0x38>
	}

	else {
		// FIXME this is totally broken if we receive the slave's packet first
		conn.last_anchor = conn_event.anchor;
    7844:	6810      	ldr	r0, [r2, #0]
    7846:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
		conn.last_packet_ts = NOW; // FIXME gross hack
    784a:	4804      	ldr	r0, [pc, #16]	; (785c <finish_conn_event+0xb8>)
    784c:	6800      	ldr	r0, [r0, #0]
    784e:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    7852:	e7c3      	b.n	77dc <finish_conn_event+0x38>
    7854:	10003a10 	.word	0x10003a10
    7858:	10000b0c 	.word	0x10000b0c
    785c:	40008008 	.word	0x40008008
    7860:	10000a4c 	.word	0x10000a4c

00007864 <le_DMA_IRQHandler>:

// DMA handler
// called once per byte. handles all incoming data, but only minimally
// processes received data. at the end of a packet, it enqueues the
// received packet, fetches a new buffer, and restarts RX.
void le_DMA_IRQHandler(void) {
    7864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	unsigned pos;
	int8_t rssi;
	uint32_t timestamp = NOW; // sampled early for most accurate measurement
    7868:	4d6d      	ldr	r5, [pc, #436]	; (7a20 <le_DMA_IRQHandler+0x1bc>)

	// channel 0
	if (DMACIntStat & (1 << 0)) {
    786a:	4b6e      	ldr	r3, [pc, #440]	; (7a24 <le_DMA_IRQHandler+0x1c0>)
// processes received data. at the end of a packet, it enqueues the
// received packet, fetches a new buffer, and restarts RX.
void le_DMA_IRQHandler(void) {
	unsigned pos;
	int8_t rssi;
	uint32_t timestamp = NOW; // sampled early for most accurate measurement
    786c:	682f      	ldr	r7, [r5, #0]

	// channel 0
	if (DMACIntStat & (1 << 0)) {
    786e:	681b      	ldr	r3, [r3, #0]
    7870:	07d8      	lsls	r0, r3, #31
    7872:	f140 80d2 	bpl.w	7a1a <le_DMA_IRQHandler+0x1b6>
		// terminal count - byte received
		if (DMACIntTCStat & (1 << 0)) {
    7876:	4b6c      	ldr	r3, [pc, #432]	; (7a28 <le_DMA_IRQHandler+0x1c4>)
    7878:	681b      	ldr	r3, [r3, #0]
    787a:	07d9      	lsls	r1, r3, #31
    787c:	f140 80c6 	bpl.w	7a0c <le_DMA_IRQHandler+0x1a8>
			DMACIntTCClear = (1 << 0);
    7880:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 7a60 <le_DMA_IRQHandler+0x1fc>
    7884:	2301      	movs	r3, #1
    7886:	f8c8 3000 	str.w	r3, [r8]

			// poll RSSI
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    788a:	2006      	movs	r0, #6
    788c:	f001 fd0e 	bl	92ac <cc2400_get>
			current_rxbuf->rssi_sum += rssi;
    7890:	4c66      	ldr	r4, [pc, #408]	; (7a2c <le_DMA_IRQHandler+0x1c8>)
		// terminal count - byte received
		if (DMACIntTCStat & (1 << 0)) {
			DMACIntTCClear = (1 << 0);

			// poll RSSI
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    7892:	f3c0 2007 	ubfx	r0, r0, #8, #8
			current_rxbuf->rssi_sum += rssi;
    7896:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
    789a:	b241      	sxtb	r1, r0
			if (rssi < current_rxbuf->rssi_min) current_rxbuf->rssi_min = rssi;
    789c:	f993 211c 	ldrsb.w	r2, [r3, #284]	; 0x11c
		if (DMACIntTCStat & (1 << 0)) {
			DMACIntTCClear = (1 << 0);

			// poll RSSI
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
			current_rxbuf->rssi_sum += rssi;
    78a0:	f8d3 6120 	ldr.w	r6, [r3, #288]	; 0x120
			if (rssi < current_rxbuf->rssi_min) current_rxbuf->rssi_min = rssi;
    78a4:	428a      	cmp	r2, r1
			if (rssi > current_rxbuf->rssi_max) current_rxbuf->rssi_max = rssi;
    78a6:	f993 211d 	ldrsb.w	r2, [r3, #285]	; 0x11d
			DMACIntTCClear = (1 << 0);

			// poll RSSI
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
			current_rxbuf->rssi_sum += rssi;
			if (rssi < current_rxbuf->rssi_min) current_rxbuf->rssi_min = rssi;
    78aa:	bfc8      	it	gt
    78ac:	f883 011c 	strbgt.w	r0, [r3, #284]	; 0x11c
			if (rssi > current_rxbuf->rssi_max) current_rxbuf->rssi_max = rssi;
    78b0:	428a      	cmp	r2, r1

			// grab byte from DMA buffer
			pos = current_rxbuf->pos;
    78b2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108

			// poll RSSI
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
			current_rxbuf->rssi_sum += rssi;
			if (rssi < current_rxbuf->rssi_min) current_rxbuf->rssi_min = rssi;
			if (rssi > current_rxbuf->rssi_max) current_rxbuf->rssi_max = rssi;
    78b6:	bfb8      	it	lt
    78b8:	f883 011d 	strblt.w	r0, [r3, #285]	; 0x11d

			// grab byte from DMA buffer
			pos = current_rxbuf->pos;
			current_rxbuf->data[pos] = le_dma_dest[pos & 1]; // dirty hack
    78bc:	485c      	ldr	r0, [pc, #368]	; (7a30 <le_DMA_IRQHandler+0x1cc>)
		if (DMACIntTCStat & (1 << 0)) {
			DMACIntTCClear = (1 << 0);

			// poll RSSI
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
			current_rxbuf->rssi_sum += rssi;
    78be:	440e      	add	r6, r1
			if (rssi < current_rxbuf->rssi_min) current_rxbuf->rssi_min = rssi;
			if (rssi > current_rxbuf->rssi_max) current_rxbuf->rssi_max = rssi;

			// grab byte from DMA buffer
			pos = current_rxbuf->pos;
			current_rxbuf->data[pos] = le_dma_dest[pos & 1]; // dirty hack
    78c0:	f002 0101 	and.w	r1, r2, #1
    78c4:	5c41      	ldrb	r1, [r0, r1]
		if (DMACIntTCStat & (1 << 0)) {
			DMACIntTCClear = (1 << 0);

			// poll RSSI
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
			current_rxbuf->rssi_sum += rssi;
    78c6:	f8c3 6120 	str.w	r6, [r3, #288]	; 0x120
			if (rssi < current_rxbuf->rssi_min) current_rxbuf->rssi_min = rssi;
			if (rssi > current_rxbuf->rssi_max) current_rxbuf->rssi_max = rssi;

			// grab byte from DMA buffer
			pos = current_rxbuf->pos;
			current_rxbuf->data[pos] = le_dma_dest[pos & 1]; // dirty hack
    78ca:	5499      	strb	r1, [r3, r2]
			pos += 1;
    78cc:	3201      	adds	r2, #1
			current_rxbuf->pos = pos;

			if (pos == 1) {
    78ce:	2a01      	cmp	r2, #1

			// grab byte from DMA buffer
			pos = current_rxbuf->pos;
			current_rxbuf->data[pos] = le_dma_dest[pos & 1]; // dirty hack
			pos += 1;
			current_rxbuf->pos = pos;
    78d0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

			if (pos == 1) {
    78d4:	d118      	bne.n	7908 <le_DMA_IRQHandler+0xa4>
				current_rxbuf->timestamp = timestamp - USEC(8 + 32); // packet starts at preamble
				current_rxbuf->channel = rf_channel;
    78d6:	4957      	ldr	r1, [pc, #348]	; (7a34 <le_DMA_IRQHandler+0x1d0>)
			current_rxbuf->data[pos] = le_dma_dest[pos & 1]; // dirty hack
			pos += 1;
			current_rxbuf->pos = pos;

			if (pos == 1) {
				current_rxbuf->timestamp = timestamp - USEC(8 + 32); // packet starts at preamble
    78d8:	f5a7 72c8 	sub.w	r2, r7, #400	; 0x190
    78dc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
				current_rxbuf->channel = rf_channel;
    78e0:	880a      	ldrh	r2, [r1, #0]
				current_rxbuf->access_address = conn.access_address;

				// data packet received: cancel timeout
				// new timeout or hop timer will be set at end of packet RX
				if (btle_channel_index(rf_channel) < 37) {
    78e2:	8808      	ldrh	r0, [r1, #0]
			pos += 1;
			current_rxbuf->pos = pos;

			if (pos == 1) {
				current_rxbuf->timestamp = timestamp - USEC(8 + 32); // packet starts at preamble
				current_rxbuf->channel = rf_channel;
    78e4:	b292      	uxth	r2, r2
    78e6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
				current_rxbuf->access_address = conn.access_address;
    78ea:	6a22      	ldr	r2, [r4, #32]

				// data packet received: cancel timeout
				// new timeout or hop timer will be set at end of packet RX
				if (btle_channel_index(rf_channel) < 37) {
    78ec:	b280      	uxth	r0, r0
			current_rxbuf->pos = pos;

			if (pos == 1) {
				current_rxbuf->timestamp = timestamp - USEC(8 + 32); // packet starts at preamble
				current_rxbuf->channel = rf_channel;
				current_rxbuf->access_address = conn.access_address;
    78ee:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

				// data packet received: cancel timeout
				// new timeout or hop timer will be set at end of packet RX
				if (btle_channel_index(rf_channel) < 37) {
    78f2:	f7ff fa0d 	bl	6d10 <btle_channel_index>
    78f6:	2824      	cmp	r0, #36	; 0x24
    78f8:	f200 8088 	bhi.w	7a0c <le_DMA_IRQHandler+0x1a8>
	T1MR0 = match;
	T1MCR |= TMCR_MR0I;
}

static void timer1_clear_match(void) {
	T1MCR &= ~TMCR_MR0I;
    78fc:	4a4e      	ldr	r2, [pc, #312]	; (7a38 <le_DMA_IRQHandler+0x1d4>)
    78fe:	6813      	ldr	r3, [r2, #0]
    7900:	f023 0301 	bic.w	r3, r3, #1
    7904:	6013      	str	r3, [r2, #0]
    7906:	e081      	b.n	7a0c <le_DMA_IRQHandler+0x1a8>
					timer1_clear_match();
				}
			}

			// get length from header
			if (pos == 2) {
    7908:	2a02      	cmp	r2, #2
    790a:	d130      	bne.n	796e <le_DMA_IRQHandler+0x10a>

// helper function to dewhiten length from whitened data (only used
// during DMA)
static uint8_t dewhiten_length(unsigned channel, uint8_t data) {
	unsigned int i, bit;
	int idx = whitening_index[btle_channel_index(channel)];
    790c:	f8b3 0110 	ldrh.w	r0, [r3, #272]	; 0x110
				}
			}

			// get length from header
			if (pos == 2) {
				uint8_t length = dewhiten_length(current_rxbuf->channel, current_rxbuf->data[1]);
    7910:	785d      	ldrb	r5, [r3, #1]

// helper function to dewhiten length from whitened data (only used
// during DMA)
static uint8_t dewhiten_length(unsigned channel, uint8_t data) {
	unsigned int i, bit;
	int idx = whitening_index[btle_channel_index(channel)];
    7912:	f7ff f9fd 	bl	6d10 <btle_channel_index>
    7916:	4949      	ldr	r1, [pc, #292]	; (7a3c <le_DMA_IRQHandler+0x1d8>)
	uint8_t out = 0;

	// length is second byte of packet
	idx = (idx + 8) % sizeof(whitening);
    7918:	227f      	movs	r2, #127	; 0x7f

// helper function to dewhiten length from whitened data (only used
// during DMA)
static uint8_t dewhiten_length(unsigned channel, uint8_t data) {
	unsigned int i, bit;
	int idx = whitening_index[btle_channel_index(channel)];
    791a:	5c0b      	ldrb	r3, [r1, r0]
	uint8_t out = 0;
    791c:	2600      	movs	r6, #0

	// length is second byte of packet
	idx = (idx + 8) % sizeof(whitening);
    791e:	3308      	adds	r3, #8
    7920:	fbb3 f2f2 	udiv	r2, r3, r2

	for (i = 0; i < 8; ++i) {
    7924:	4637      	mov	r7, r6
    7926:	468e      	mov	lr, r1
	unsigned int i, bit;
	int idx = whitening_index[btle_channel_index(channel)];
	uint8_t out = 0;

	// length is second byte of packet
	idx = (idx + 8) % sizeof(whitening);
    7928:	ebc2 12c2 	rsb	r2, r2, r2, lsl #7
    792c:	1a9b      	subs	r3, r3, r2

	for (i = 0; i < 8; ++i) {
		bit = (data >> (7-i)) & 1;
		bit ^= whitening[idx];
    792e:	eb0e 0103 	add.w	r1, lr, r3
    7932:	f891 0028 	ldrb.w	r0, [r1, #40]	; 0x28
		idx = (idx + 1) % sizeof(whitening);
    7936:	3301      	adds	r3, #1
    7938:	217f      	movs	r1, #127	; 0x7f
    793a:	fbb3 f1f1 	udiv	r1, r3, r1
    793e:	f1c7 0207 	rsb	r2, r7, #7

	// length is second byte of packet
	idx = (idx + 8) % sizeof(whitening);

	for (i = 0; i < 8; ++i) {
		bit = (data >> (7-i)) & 1;
    7942:	fa45 f202 	asr.w	r2, r5, r2
    7946:	f002 0201 	and.w	r2, r2, #1
		bit ^= whitening[idx];
    794a:	4042      	eors	r2, r0
		idx = (idx + 1) % sizeof(whitening);
    794c:	ebc1 11c1 	rsb	r1, r1, r1, lsl #7
    7950:	1a5b      	subs	r3, r3, r1
		out |= bit << i;
    7952:	fa02 f107 	lsl.w	r1, r2, r7
	uint8_t out = 0;

	// length is second byte of packet
	idx = (idx + 8) % sizeof(whitening);

	for (i = 0; i < 8; ++i) {
    7956:	3701      	adds	r7, #1
		bit = (data >> (7-i)) & 1;
		bit ^= whitening[idx];
		idx = (idx + 1) % sizeof(whitening);
		out |= bit << i;
    7958:	ea46 0201 	orr.w	r2, r6, r1
	uint8_t out = 0;

	// length is second byte of packet
	idx = (idx + 8) % sizeof(whitening);

	for (i = 0; i < 8; ++i) {
    795c:	2f08      	cmp	r7, #8
		bit = (data >> (7-i)) & 1;
		bit ^= whitening[idx];
		idx = (idx + 1) % sizeof(whitening);
		out |= bit << i;
    795e:	b2d6      	uxtb	r6, r2
	uint8_t out = 0;

	// length is second byte of packet
	idx = (idx + 8) % sizeof(whitening);

	for (i = 0; i < 8; ++i) {
    7960:	d1e5      	bne.n	792e <le_DMA_IRQHandler+0xca>
			}

			// get length from header
			if (pos == 2) {
				uint8_t length = dewhiten_length(current_rxbuf->channel, current_rxbuf->data[1]);
				current_rxbuf->size = length + 2 + 3; // two bytes for header and three for CRC
    7962:	f8d4 3678 	ldr.w	r3, [r4, #1656]	; 0x678
    7966:	1d72      	adds	r2, r6, #5
    7968:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    796c:	e04e      	b.n	7a0c <le_DMA_IRQHandler+0x1a8>
			}

			// finished packet - state transition
			if (pos > 2 && pos >= current_rxbuf->size) {
    796e:	d94d      	bls.n	7a0c <le_DMA_IRQHandler+0x1a8>
    7970:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    7974:	429a      	cmp	r2, r3
    7976:	d349      	bcc.n	7a0c <le_DMA_IRQHandler+0x1a8>
				// stop the CC2400 before flushing SSP
				cc2400_strobe(SFSON);
    7978:	2061      	movs	r0, #97	; 0x61
    797a:	f001 fd48 	bl	940e <cc2400_strobe>

				// stop DMA on this channel and flush SSP
				DMACC0Config = 0;
    797e:	4b30      	ldr	r3, [pc, #192]	; (7a40 <le_DMA_IRQHandler+0x1dc>)
    7980:	2200      	movs	r2, #0
    7982:	601a      	str	r2, [r3, #0]
				DMACIntTCClear = (1 << 0); // if we don't clear a second time, data is corrupt
    7984:	2301      	movs	r3, #1

				DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7986:	4a2f      	ldr	r2, [pc, #188]	; (7a44 <le_DMA_IRQHandler+0x1e0>)
				// stop the CC2400 before flushing SSP
				cc2400_strobe(SFSON);

				// stop DMA on this channel and flush SSP
				DMACC0Config = 0;
				DMACIntTCClear = (1 << 0); // if we don't clear a second time, data is corrupt
    7988:	f8c8 3000 	str.w	r3, [r8]

				DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    798c:	6813      	ldr	r3, [r2, #0]
    798e:	f023 0301 	bic.w	r3, r3, #1
    7992:	6013      	str	r3, [r2, #0]
				while (SSP1SR & SSPSR_RNE) {
    7994:	4b2c      	ldr	r3, [pc, #176]	; (7a48 <le_DMA_IRQHandler+0x1e4>)
    7996:	681b      	ldr	r3, [r3, #0]
    7998:	075a      	lsls	r2, r3, #29
    799a:	d502      	bpl.n	79a2 <le_DMA_IRQHandler+0x13e>
					uint8_t tmp = (uint8_t)DIO_SSP_DR;
    799c:	4b2b      	ldr	r3, [pc, #172]	; (7a4c <le_DMA_IRQHandler+0x1e8>)
    799e:	681b      	ldr	r3, [r3, #0]
    79a0:	e7f8      	b.n	7994 <le_DMA_IRQHandler+0x130>
				}

				// TODO error transition on queue_insert
				queue_insert(&packet_queue, current_rxbuf);
    79a2:	f8d4 1678 	ldr.w	r1, [r4, #1656]	; 0x678
    79a6:	482a      	ldr	r0, [pc, #168]	; (7a50 <le_DMA_IRQHandler+0x1ec>)
    79a8:	f000 fb10 	bl	7fcc <queue_insert>

				// track connection events
				if (btle_channel_index(rf_channel) < 37) {
    79ac:	4b21      	ldr	r3, [pc, #132]	; (7a34 <le_DMA_IRQHandler+0x1d0>)
				while (SSP1SR & SSPSR_RNE) {
					uint8_t tmp = (uint8_t)DIO_SSP_DR;
				}

				// TODO error transition on queue_insert
				queue_insert(&packet_queue, current_rxbuf);
    79ae:	4e1f      	ldr	r6, [pc, #124]	; (7a2c <le_DMA_IRQHandler+0x1c8>)

				// track connection events
				if (btle_channel_index(rf_channel) < 37) {
    79b0:	8818      	ldrh	r0, [r3, #0]
    79b2:	b280      	uxth	r0, r0
    79b4:	f7ff f9ac 	bl	6d10 <btle_channel_index>
    79b8:	2824      	cmp	r0, #36	; 0x24
    79ba:	d81d      	bhi.n	79f8 <le_DMA_IRQHandler+0x194>
					++conn_event.num_packets;
    79bc:	4a25      	ldr	r2, [pc, #148]	; (7a54 <le_DMA_IRQHandler+0x1f0>)
    79be:	6853      	ldr	r3, [r2, #4]
    79c0:	3301      	adds	r3, #1

					// first packet: set connection anchor
					if (conn_event.num_packets == 1) {
    79c2:	2b01      	cmp	r3, #1
				// TODO error transition on queue_insert
				queue_insert(&packet_queue, current_rxbuf);

				// track connection events
				if (btle_channel_index(rf_channel) < 37) {
					++conn_event.num_packets;
    79c4:	6053      	str	r3, [r2, #4]

					// first packet: set connection anchor
					if (conn_event.num_packets == 1) {
    79c6:	d10a      	bne.n	79de <le_DMA_IRQHandler+0x17a>
						conn_event.anchor = current_rxbuf->timestamp;
    79c8:	f8d6 3678 	ldr.w	r3, [r6, #1656]	; 0x678
    79cc:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
    79d0:	6013      	str	r3, [r2, #0]
						timer1_set_match(NOW + IFS_TIMEOUT); // set a timeout for next packet
    79d2:	6828      	ldr	r0, [r5, #0]
    79d4:	f600 30b8 	addw	r0, r0, #3000	; 0xbb8
    79d8:	f7ff fdca 	bl	7570 <timer1_set_match>
    79dc:	e00c      	b.n	79f8 <le_DMA_IRQHandler+0x194>
					}

					// second packet: close connection event, and set hop timer
					else if (conn_event.num_packets == 2) {
    79de:	2b02      	cmp	r3, #2
    79e0:	d10a      	bne.n	79f8 <le_DMA_IRQHandler+0x194>
						cc2400_strobe(SRFOFF);
    79e2:	2064      	movs	r0, #100	; 0x64
    79e4:	f001 fd13 	bl	940e <cc2400_strobe>
						current_rxbuf = buffer_get();
    79e8:	f7ff fe10 	bl	760c <buffer_get>
    79ec:	f8c6 0678 	str.w	r0, [r6, #1656]	; 0x678
		if (DMACIntErrStat & (1 << 0)) {
			// TODO error state transition
			DMACIntErrClr = (1 << 0);
		}
	}
}
    79f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

					// second packet: close connection event, and set hop timer
					else if (conn_event.num_packets == 2) {
						cc2400_strobe(SRFOFF);
						current_rxbuf = buffer_get();
						finish_conn_event();
    79f4:	f7ff bed6 	b.w	77a4 <finish_conn_event>
					}
				}

				// get a new packet
				// TODO handle error transition
				current_rxbuf = buffer_get();
    79f8:	f7ff fe08 	bl	760c <buffer_get>
    79fc:	f8c4 0678 	str.w	r0, [r4, #1656]	; 0x678

				// restart DMA and SSP
				le_dma_init();
    7a00:	f7ff fd92 	bl	7528 <le_dma_init>
				dio_ssp_start();
    7a04:	f7ff fd50 	bl	74a8 <dio_ssp_start>

				// wait for FS_LOCK in background
				timer1_wait_fs_lock();
    7a08:	f7ff fdbe 	bl	7588 <timer1_wait_fs_lock>
			}
		}

		// error - transition to error state
		if (DMACIntErrStat & (1 << 0)) {
    7a0c:	4b12      	ldr	r3, [pc, #72]	; (7a58 <le_DMA_IRQHandler+0x1f4>)
    7a0e:	681b      	ldr	r3, [r3, #0]
    7a10:	07db      	lsls	r3, r3, #31
			// TODO error state transition
			DMACIntErrClr = (1 << 0);
    7a12:	bf42      	ittt	mi
    7a14:	4b11      	ldrmi	r3, [pc, #68]	; (7a5c <le_DMA_IRQHandler+0x1f8>)
    7a16:	2201      	movmi	r2, #1
    7a18:	601a      	strmi	r2, [r3, #0]
    7a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a1e:	bf00      	nop
    7a20:	40008008 	.word	0x40008008
    7a24:	50004000 	.word	0x50004000
    7a28:	50004004 	.word	0x50004004
    7a2c:	10000b0c 	.word	0x10000b0c
    7a30:	10003a1c 	.word	0x10003a1c
    7a34:	10003a0c 	.word	0x10003a0c
    7a38:	40008014 	.word	0x40008014
    7a3c:	0000af26 	.word	0x0000af26
    7a40:	50004110 	.word	0x50004110
    7a44:	40030024 	.word	0x40030024
    7a48:	4003000c 	.word	0x4003000c
    7a4c:	40030008 	.word	0x40030008
    7a50:	100039dc 	.word	0x100039dc
    7a54:	10003a10 	.word	0x10003a10
    7a58:	5000400c 	.word	0x5000400c
    7a5c:	50004010 	.word	0x50004010
    7a60:	50004008 	.word	0x50004008

00007a64 <TIMER1_IRQHandler>:

static void timer1_cancel_fs_lock(void) {
	T1MCR &= ~TMCR_MR2I;
}

void TIMER1_IRQHandler(void) {
    7a64:	b538      	push	{r3, r4, r5, lr}
	// MR0: connection events
	if (T1IR & TIR_MR0_Interrupt) {
    7a66:	4b4a      	ldr	r3, [pc, #296]	; (7b90 <TIMER1_IRQHandler+0x12c>)
    7a68:	681a      	ldr	r2, [r3, #0]
    7a6a:	07d0      	lsls	r0, r2, #31
    7a6c:	d55f      	bpl.n	7b2e <TIMER1_IRQHandler+0xca>
		// ack the interrupt
		T1IR = TIR_MR0_Interrupt;

		// connection update procedure
		if (conn.conn_update_pending &&
    7a6e:	4a49      	ldr	r2, [pc, #292]	; (7b94 <TIMER1_IRQHandler+0x130>)

void TIMER1_IRQHandler(void) {
	// MR0: connection events
	if (T1IR & TIR_MR0_Interrupt) {
		// ack the interrupt
		T1IR = TIR_MR0_Interrupt;
    7a70:	2401      	movs	r4, #1

		// connection update procedure
		if (conn.conn_update_pending &&
    7a72:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110

void TIMER1_IRQHandler(void) {
	// MR0: connection events
	if (T1IR & TIR_MR0_Interrupt) {
		// ack the interrupt
		T1IR = TIR_MR0_Interrupt;
    7a76:	601c      	str	r4, [r3, #0]
    7a78:	4d47      	ldr	r5, [pc, #284]	; (7b98 <TIMER1_IRQHandler+0x134>)
    7a7a:	4613      	mov	r3, r2

		// connection update procedure
		if (conn.conn_update_pending &&
    7a7c:	b391      	cbz	r1, 7ae4 <TIMER1_IRQHandler+0x80>
    7a7e:	f8b2 010c 	ldrh.w	r0, [r2, #268]	; 0x10c
    7a82:	f8b2 111c 	ldrh.w	r1, [r2, #284]	; 0x11c
    7a86:	4288      	cmp	r0, r1
    7a88:	d12c      	bne.n	7ae4 <TIMER1_IRQHandler+0x80>
				conn.conn_event_counter == conn.conn_update_instant) {

			// on the first past through, handle the transmit window
			// offset. if there's no offset, skip down to else block
			if (!conn_event.opened && conn.win_offset > 0) {
    7a8a:	68a9      	ldr	r1, [r5, #8]
    7a8c:	b961      	cbnz	r1, 7aa8 <TIMER1_IRQHandler+0x44>
    7a8e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7a90:	b150      	cbz	r0, 7aa8 <TIMER1_IRQHandler+0x44>
    7a92:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
    7a96:	4403      	add	r3, r0
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    7a98:	6b10      	ldr	r0, [r2, #48]	; 0x30
    7a9a:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
    7a9e:	4418      	add	r0, r3
    7aa0:	f7ff fd66 	bl	7570 <timer1_set_match>
						conn.win_offset - RX_WARMUP_TIME);
				conn_event.opened = 1;
    7aa4:	60ac      	str	r4, [r5, #8]
    7aa6:	bd38      	pop	{r3, r4, r5, pc}

			// after the transmit window offset, or if there is no
			// transmit window, set a packet timeout and change the
			// channel
			else { // conn_event.opened || conn.win_offset == 0
				conn_event.opened = 1;
    7aa8:	2201      	movs	r2, #1
    7aaa:	60aa      	str	r2, [r5, #8]

				// this is like a new connection, so set all values
				// accordingly
				conn.anchor_set = 0;
    7aac:	2200      	movs	r2, #0
				conn.conn_interval = conn.conn_update_pending_interval;
    7aae:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
			else { // conn_event.opened || conn.win_offset == 0
				conn_event.opened = 1;

				// this is like a new connection, so set all values
				// accordingly
				conn.anchor_set = 0;
    7ab2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
				conn.conn_interval = conn.conn_update_pending_interval;
				conn.supervision_timeout = conn.conn_update_pending_supervision_timeout;
				conn.conn_update_pending = 0;
    7ab6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    7aba:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100

				// this is like a new connection, so set all values
				// accordingly
				conn.anchor_set = 0;
				conn.conn_interval = conn.conn_update_pending_interval;
				conn.supervision_timeout = conn.conn_update_pending_supervision_timeout;
    7abe:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
    7ac2:	4402      	add	r2, r0
				conn_event.opened = 1;

				// this is like a new connection, so set all values
				// accordingly
				conn.anchor_set = 0;
				conn.conn_interval = conn.conn_update_pending_interval;
    7ac4:	6318      	str	r0, [r3, #48]	; 0x30
    7ac6:	f502 42a5 	add.w	r2, r2, #21120	; 0x5280
    7aca:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
				conn.supervision_timeout = conn.conn_update_pending_supervision_timeout;
    7acc:	6359      	str	r1, [r3, #52]	; 0x34
    7ace:	3250      	adds	r2, #80	; 0x50
				conn.conn_update_pending = 0;

				// timeout after conn window + max packet length
				timer1_set_match(conn.last_anchor + conn.conn_interval +
						conn.win_offset + conn.win_size + USEC(2120));
    7ad0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
    7ad4:	4410      	add	r0, r2
				conn.conn_interval = conn.conn_update_pending_interval;
				conn.supervision_timeout = conn.conn_update_pending_supervision_timeout;
				conn.conn_update_pending = 0;

				// timeout after conn window + max packet length
				timer1_set_match(conn.last_anchor + conn.conn_interval +
    7ad6:	4418      	add	r0, r3
    7ad8:	f7ff fd4a 	bl	7570 <timer1_set_match>
		// if FS is not locked, check again in 3 us
		else {
			timer1_wait_fs_lock();
		}
	}
}
    7adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				conn.conn_update_pending = 0;

				// timeout after conn window + max packet length
				timer1_set_match(conn.last_anchor + conn.conn_interval +
						conn.win_offset + conn.win_size + USEC(2120));
				change_channel();
    7ae0:	f7ff bdfc 	b.w	76dc <change_channel>
			}
			return;
		}

		// channel map update
		if (conn.channel_map_update_pending &&
    7ae4:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
    7ae8:	4c2a      	ldr	r4, [pc, #168]	; (7b94 <TIMER1_IRQHandler+0x130>)
    7aea:	b17b      	cbz	r3, 7b0c <TIMER1_IRQHandler+0xa8>
    7aec:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
    7af0:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
    7af4:	429a      	cmp	r2, r3
    7af6:	d109      	bne.n	7b0c <TIMER1_IRQHandler+0xa8>
				conn.conn_event_counter == conn.channel_map_update_instant) {
			conn.remapping = conn.pending_remapping;
    7af8:	f104 0040 	add.w	r0, r4, #64	; 0x40
    7afc:	f504 7194 	add.w	r1, r4, #296	; 0x128
    7b00:	22c0      	movs	r2, #192	; 0xc0
    7b02:	f002 fc81 	bl	a408 <memcpy>
			conn.channel_map_update_pending = 0;
    7b06:	2300      	movs	r3, #0
    7b08:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
		}

		// new connection event: set timeout and change channel
		if (!conn_event.opened) {
    7b0c:	68ab      	ldr	r3, [r5, #8]
    7b0e:	b963      	cbnz	r3, 7b2a <TIMER1_IRQHandler+0xc6>
			conn_event.opened = 1;
    7b10:	4b21      	ldr	r3, [pc, #132]	; (7b98 <TIMER1_IRQHandler+0x134>)
    7b12:	2201      	movs	r2, #1
    7b14:	609a      	str	r2, [r3, #8]
			// timeout is max packet length + warmup time (slack)
			timer1_set_match(NOW + USEC(2120) + RX_WARMUP_TIME);
    7b16:	4b21      	ldr	r3, [pc, #132]	; (7b9c <TIMER1_IRQHandler+0x138>)
    7b18:	6818      	ldr	r0, [r3, #0]
    7b1a:	f500 40bd 	add.w	r0, r0, #24192	; 0x5e80
    7b1e:	3008      	adds	r0, #8
    7b20:	f7ff fd26 	bl	7570 <timer1_set_match>
			change_channel();
    7b24:	f7ff fdda 	bl	76dc <change_channel>
    7b28:	e001      	b.n	7b2e <TIMER1_IRQHandler+0xca>
				change_channel();
			}

			// timeout: close connection event and set timer for next hop
			else {
				finish_conn_event();
    7b2a:	f7ff fe3b 	bl	77a4 <finish_conn_event>
			}
		}
	}

	// LEDs
	if (T1IR & TIR_MR1_Interrupt) {
    7b2e:	4b18      	ldr	r3, [pc, #96]	; (7b90 <TIMER1_IRQHandler+0x12c>)
    7b30:	681a      	ldr	r2, [r3, #0]
    7b32:	0791      	lsls	r1, r2, #30
    7b34:	d50d      	bpl.n	7b52 <TIMER1_IRQHandler+0xee>
		T1IR = TIR_MR1_Interrupt;
		T1MCR &= ~TMCR_MR1I;
    7b36:	491a      	ldr	r1, [pc, #104]	; (7ba0 <TIMER1_IRQHandler+0x13c>)
		}
	}

	// LEDs
	if (T1IR & TIR_MR1_Interrupt) {
		T1IR = TIR_MR1_Interrupt;
    7b38:	2202      	movs	r2, #2
    7b3a:	601a      	str	r2, [r3, #0]
		T1MCR &= ~TMCR_MR1I;
    7b3c:	680b      	ldr	r3, [r1, #0]
    7b3e:	f023 0308 	bic.w	r3, r3, #8
    7b42:	600b      	str	r3, [r1, #0]

		TXLED_CLR;
    7b44:	4b17      	ldr	r3, [pc, #92]	; (7ba4 <TIMER1_IRQHandler+0x140>)
    7b46:	f44f 7180 	mov.w	r1, #256	; 0x100
    7b4a:	6019      	str	r1, [r3, #0]
		RXLED_CLR;
    7b4c:	2110      	movs	r1, #16
    7b4e:	6019      	str	r1, [r3, #0]
		USRLED_CLR;
    7b50:	601a      	str	r2, [r3, #0]
	}

	// check FS_LOCK
	if (T1IR & TIR_MR2_Interrupt) {
    7b52:	4b0f      	ldr	r3, [pc, #60]	; (7b90 <TIMER1_IRQHandler+0x12c>)
    7b54:	681a      	ldr	r2, [r3, #0]
    7b56:	0752      	lsls	r2, r2, #29
    7b58:	d518      	bpl.n	7b8c <TIMER1_IRQHandler+0x128>
		T1IR = TIR_MR2_Interrupt;
    7b5a:	2204      	movs	r2, #4
    7b5c:	601a      	str	r2, [r3, #0]

		// if FS is locked, strobe RX and clear interrupt
		if (cc2400_status() & FS_LOCK) {
    7b5e:	f001 fc4f 	bl	9400 <cc2400_status>
    7b62:	0743      	lsls	r3, r0, #29
    7b64:	d50e      	bpl.n	7b84 <TIMER1_IRQHandler+0x120>
	timer1_wait_fs_lock();
}

// strobe RX and enable PA
static void le_cc2400_strobe_rx(void) {
	cc2400_strobe(SRX);
    7b66:	2062      	movs	r0, #98	; 0x62
    7b68:	f001 fc51 	bl	940e <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7b6c:	4b0e      	ldr	r3, [pc, #56]	; (7ba8 <TIMER1_IRQHandler+0x144>)
    7b6e:	2280      	movs	r2, #128	; 0x80
    7b70:	601a      	str	r2, [r3, #0]
	HGM_SET;
    7b72:	f44f 7280 	mov.w	r2, #256	; 0x100
    7b76:	601a      	str	r2, [r3, #0]
		T1IR = TIR_MR2_Interrupt;

		// if FS is locked, strobe RX and clear interrupt
		if (cc2400_status() & FS_LOCK) {
			le_cc2400_strobe_rx();
			T1MCR &= ~TMCR_MR2I;
    7b78:	4a09      	ldr	r2, [pc, #36]	; (7ba0 <TIMER1_IRQHandler+0x13c>)
    7b7a:	6813      	ldr	r3, [r2, #0]
    7b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7b80:	6013      	str	r3, [r2, #0]
    7b82:	bd38      	pop	{r3, r4, r5, pc}
		// if FS is not locked, check again in 3 us
		else {
			timer1_wait_fs_lock();
		}
	}
}
    7b84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			T1MCR &= ~TMCR_MR2I;
		}

		// if FS is not locked, check again in 3 us
		else {
			timer1_wait_fs_lock();
    7b88:	f7ff bcfe 	b.w	7588 <timer1_wait_fs_lock>
    7b8c:	bd38      	pop	{r3, r4, r5, pc}
    7b8e:	bf00      	nop
    7b90:	40008000 	.word	0x40008000
    7b94:	10000b0c 	.word	0x10000b0c
    7b98:	10003a10 	.word	0x10003a10
    7b9c:	40008008 	.word	0x40008008
    7ba0:	40008014 	.word	0x40008014
    7ba4:	2009c03c 	.word	0x2009c03c
    7ba8:	2009c058 	.word	0x2009c058

00007bac <le_phy_main>:
	}

	return 0;
}

void le_phy_main(void) {
    7bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7bb0:	b087      	sub	sp, #28
	// disable USB interrupts -- we poll them below
	// n.b., they should not be enabled but let's be careful
	ICER0 = ICER0_ICE_USB;
    7bb2:	4fb8      	ldr	r7, [pc, #736]	; (7e94 <le_phy_main+0x2e8>)
    7bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
// resets the state of all available buffers
static void buffers_init(void) {
	int i;

	for (i = 0; i < LE_BUFFER_POOL_SIZE; ++i)
		le_buffer_pool[i].available = 1;
    7bb8:	4cb7      	ldr	r4, [pc, #732]	; (7e98 <le_phy_main+0x2ec>)
}

void le_phy_main(void) {
	// disable USB interrupts -- we poll them below
	// n.b., they should not be enabled but let's be careful
	ICER0 = ICER0_ICE_USB;
    7bba:	603b      	str	r3, [r7, #0]
	// disable clkn and timer0
	clkn_disable();
    7bbc:	f7ff fbbe 	bl	733c <clkn_disable>
// resets the state of all available buffers
static void buffers_init(void) {
	int i;

	for (i = 0; i < LE_BUFFER_POOL_SIZE; ++i)
		le_buffer_pool[i].available = 1;
    7bc0:	2501      	movs	r5, #1

///////
// timer stuff

static void timer1_start(void) {
	T1TCR = TCR_Counter_Reset;
    7bc2:	4eb6      	ldr	r6, [pc, #728]	; (7e9c <le_phy_main+0x2f0>)
	ICER0 = ICER0_ICE_USB;
	// disable clkn and timer0
	clkn_disable();

	buffers_init();
	queue_init(&packet_queue);
    7bc4:	48b6      	ldr	r0, [pc, #728]	; (7ea0 <le_phy_main+0x2f4>)
// resets the state of all available buffers
static void buffers_init(void) {
	int i;

	for (i = 0; i < LE_BUFFER_POOL_SIZE; ++i)
		le_buffer_pool[i].available = 1;
    7bc6:	f8c4 5300 	str.w	r5, [r4, #768]	; 0x300
    7bca:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
    7bce:	f8c4 5548 	str.w	r5, [r4, #1352]	; 0x548
    7bd2:	f8c4 566c 	str.w	r5, [r4, #1644]	; 0x66c
	ICER0 = ICER0_ICE_USB;
	// disable clkn and timer0
	clkn_disable();

	buffers_init();
	queue_init(&packet_queue);
    7bd6:	f000 f9f5 	bl	7fc4 <queue_init>

///////
// timer stuff

static void timer1_start(void) {
	T1TCR = TCR_Counter_Reset;
    7bda:	2302      	movs	r3, #2
	T1PR = 4; // 100 ns
    7bdc:	4ab1      	ldr	r2, [pc, #708]	; (7ea4 <le_phy_main+0x2f8>)

///////
// timer stuff

static void timer1_start(void) {
	T1TCR = TCR_Counter_Reset;
    7bde:	6033      	str	r3, [r6, #0]
	T1PR = 4; // 100 ns
    7be0:	2304      	movs	r3, #4
    7be2:	6013      	str	r3, [r2, #0]
	T1TCR = TCR_Counter_Enable;

	// set up interrupt handler
	ISER0 = ISER0_ISE_TIMER1;
    7be4:	4ab0      	ldr	r2, [pc, #704]	; (7ea8 <le_phy_main+0x2fc>)
// timer stuff

static void timer1_start(void) {
	T1TCR = TCR_Counter_Reset;
	T1PR = 4; // 100 ns
	T1TCR = TCR_Counter_Enable;
    7be6:	6035      	str	r5, [r6, #0]

	// set up interrupt handler
	ISER0 = ISER0_ISE_TIMER1;
    7be8:	6013      	str	r3, [r2, #0]

	buffers_init();
	queue_init(&packet_queue);
	timer1_start();

	current_rxbuf = buffer_get();
    7bea:	f7ff fd0f 	bl	760c <buffer_get>
	rf_channel = le_adv_channel; // FIXME
    7bee:	4baf      	ldr	r3, [pc, #700]	; (7eac <le_phy_main+0x300>)
    7bf0:	4aaf      	ldr	r2, [pc, #700]	; (7eb0 <le_phy_main+0x304>)
    7bf2:	881b      	ldrh	r3, [r3, #0]

	buffers_init();
	queue_init(&packet_queue);
	timer1_start();

	current_rxbuf = buffer_get();
    7bf4:	f8c4 0678 	str.w	r0, [r4, #1656]	; 0x678
	rf_channel = le_adv_channel; // FIXME
    7bf8:	b29b      	uxth	r3, r3
    7bfa:	8013      	strh	r3, [r2, #0]
	conn.access_address = ADVERTISING_AA;
    7bfc:	4bad      	ldr	r3, [pc, #692]	; (7eb4 <le_phy_main+0x308>)
    7bfe:	46b0      	mov	r8, r6
    7c00:	6223      	str	r3, [r4, #32]
			DMACCxConfig_ITC; // allow terminal count interrupts
}

// initalize USB, SSP, and DMA
static void le_sys_init(void) {
	usb_queue_init(); // USB FIFO FIXME replace with safer queue
    7c02:	f7ff f9f7 	bl	6ff4 <usb_queue_init>
	dio_ssp_init();   // init SSP and raise !CS (self-routed GPIO)
    7c06:	f001 facb 	bl	91a0 <dio_ssp_init>
	le_dma_init();    // prepare DMA + interrupts
    7c0a:	f7ff fc8d 	bl	7528 <le_dma_init>
	dio_ssp_start();  // enable SSP + DMA
    7c0e:	f7ff fc4b 	bl	74a8 <dio_ssp_start>

	current_rxbuf = buffer_get();
	rf_channel = le_adv_channel; // FIXME
	conn.access_address = ADVERTISING_AA;
	le_sys_init();
	le_cc2400_init_rf();
    7c12:	f7ff fd27 	bl	7664 <le_cc2400_init_rf>

	cancel_follow = 0;
    7c16:	4ba8      	ldr	r3, [pc, #672]	; (7eb8 <le_phy_main+0x30c>)
    7c18:	2200      	movs	r2, #0
    7c1a:	469a      	mov	sl, r3
    7c1c:	601a      	str	r2, [r3, #0]
    7c1e:	9701      	str	r7, [sp, #4]

	while (requested_mode == MODE_BT_FOLLOW_LE) {
    7c20:	4ba6      	ldr	r3, [pc, #664]	; (7ebc <le_phy_main+0x310>)
    7c22:	781b      	ldrb	r3, [r3, #0]
    7c24:	2b09      	cmp	r3, #9
    7c26:	f040 81b5 	bne.w	7f94 <le_phy_main+0x3e8>
		le_rx_t *packet = NULL;
    7c2a:	a906      	add	r1, sp, #24
    7c2c:	2300      	movs	r3, #0
    7c2e:	f841 3d04 	str.w	r3, [r1, #-4]!
		if (queue_remove(&packet_queue, (void **)&packet)) {
    7c32:	489b      	ldr	r0, [pc, #620]	; (7ea0 <le_phy_main+0x2f4>)
    7c34:	f000 f9d8 	bl	7fe8 <queue_remove>
    7c38:	2800      	cmp	r0, #0
    7c3a:	f000 81a7 	beq.w	7f8c <le_phy_main+0x3e0>
			le_dewhiten(packet->data, packet->size, packet->channel);
    7c3e:	9805      	ldr	r0, [sp, #20]
			return 0;
	return 1;
}

static int filter_match(le_rx_t *buf) {
	if (!le.target_set)
    7c40:	4e9f      	ldr	r6, [pc, #636]	; (7ec0 <le_phy_main+0x314>)
	cancel_follow = 0;

	while (requested_mode == MODE_BT_FOLLOW_LE) {
		le_rx_t *packet = NULL;
		if (queue_remove(&packet_queue, (void **)&packet)) {
			le_dewhiten(packet->data, packet->size, packet->channel);
    7c42:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    7c46:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
    7c4a:	f7ff f8fb 	bl	6e44 <le_dewhiten>
			return 0;
	return 1;
}

static int filter_match(le_rx_t *buf) {
	if (!le.target_set)
    7c4e:	6c73      	ldr	r3, [r6, #68]	; 0x44
	while (requested_mode == MODE_BT_FOLLOW_LE) {
		le_rx_t *packet = NULL;
		if (queue_remove(&packet_queue, (void **)&packet)) {
			le_dewhiten(packet->data, packet->size, packet->channel);

			if (filter_match(packet)) {
    7c50:	9d05      	ldr	r5, [sp, #20]
			return 0;
	return 1;
}

static int filter_match(le_rx_t *buf) {
	if (!le.target_set)
    7c52:	b35b      	cbz	r3, 7cac <le_phy_main+0x100>
		return 1;

	// allow all data channel packets
	if (btle_channel_index(buf->channel) < 37)
    7c54:	f8b5 0110 	ldrh.w	r0, [r5, #272]	; 0x110
    7c58:	f7ff f85a 	bl	6d10 <btle_channel_index>
    7c5c:	2824      	cmp	r0, #36	; 0x24
    7c5e:	d925      	bls.n	7cac <le_phy_main+0x100>
		return 1;

	switch (buf->data[0] & 0xf) {
    7c60:	782a      	ldrb	r2, [r5, #0]
    7c62:	f002 020f 	and.w	r2, r2, #15
    7c66:	2a06      	cmp	r2, #6
    7c68:	f200 818c 	bhi.w	7f84 <le_phy_main+0x3d8>
    7c6c:	2301      	movs	r3, #1
    7c6e:	4093      	lsls	r3, r2
    7c70:	f013 0f55 	tst.w	r3, #85	; 0x55
    7c74:	d103      	bne.n	7c7e <le_phy_main+0xd2>
    7c76:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    7c7a:	d107      	bne.n	7c8c <le_phy_main+0xe0>
    7c7c:	e182      	b.n	7f84 <le_phy_main+0x3d8>
		case 0x00:
		case 0x02:
		case 0x06:
		case 0x04:
			// header + one address
			if (buf->size < 2 + 6)
    7c7e:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    7c82:	2b07      	cmp	r3, #7
    7c84:	f240 817e 	bls.w	7f84 <le_phy_main+0x3d8>
				return 0;
			return bd_addr_cmp(&buf->data[2]);
    7c88:	1ca8      	adds	r0, r5, #2
    7c8a:	e00a      	b.n	7ca2 <le_phy_main+0xf6>
		// ADV_DIRECT_IND, SCAN_REQ, CONNECT_REQ
		case 0x01:
		case 0x03:
		case 0x05:
			// header + two addresses
			if (buf->size < 2 + 6 + 6)
    7c8c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    7c90:	2b0d      	cmp	r3, #13
    7c92:	f240 8177 	bls.w	7f84 <le_phy_main+0x3d8>
				return 0;
			return bd_addr_cmp(&buf->data[2]) ||
    7c96:	1ca8      	adds	r0, r5, #2
    7c98:	f7ff fc94 	bl	75c4 <bd_addr_cmp>
    7c9c:	b930      	cbnz	r0, 7cac <le_phy_main+0x100>
				   bd_addr_cmp(&buf->data[8]);
    7c9e:	f105 0008 	add.w	r0, r5, #8
    7ca2:	f7ff fc8f 	bl	75c4 <bd_addr_cmp>
		case 0x03:
		case 0x05:
			// header + two addresses
			if (buf->size < 2 + 6 + 6)
				return 0;
			return bd_addr_cmp(&buf->data[2]) ||
    7ca6:	2800      	cmp	r0, #0
    7ca8:	f000 816c 	beq.w	7f84 <le_phy_main+0x3d8>

static void blink(int tx, int rx, int usr) {
	if (tx)
		TXLED_SET;
	if (rx)
		RXLED_SET;
    7cac:	4b85      	ldr	r3, [pc, #532]	; (7ec4 <le_phy_main+0x318>)
    7cae:	2210      	movs	r2, #16
    7cb0:	601a      	str	r2, [r3, #0]
	if (usr)
		USRLED_SET;

	// blink for 10 ms
	T1MR1 = NOW + MSEC(10);
    7cb2:	4b85      	ldr	r3, [pc, #532]	; (7ec8 <le_phy_main+0x31c>)
    7cb4:	4a85      	ldr	r2, [pc, #532]	; (7ecc <le_phy_main+0x320>)
    7cb6:	681b      	ldr	r3, [r3, #0]
	T1MCR |= TMCR_MR1I;
    7cb8:	f8df b220 	ldr.w	fp, [pc, #544]	; 7edc <le_phy_main+0x330>
		RXLED_SET;
	if (usr)
		USRLED_SET;

	// blink for 10 ms
	T1MR1 = NOW + MSEC(10);
    7cbc:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
    7cc0:	33a0      	adds	r3, #160	; 0xa0
    7cc2:	6013      	str	r3, [r2, #0]
	T1MCR |= TMCR_MR1I;
    7cc4:	f8db 3000 	ldr.w	r3, [fp]
		if (queue_remove(&packet_queue, (void **)&packet)) {
			le_dewhiten(packet->data, packet->size, packet->channel);

			if (filter_match(packet)) {
				blink(0, 1, 0); // RX LED
				usb_enqueue_le(packet);
    7cc8:	9f05      	ldr	r7, [sp, #20]
	if (usr)
		USRLED_SET;

	// blink for 10 ms
	T1MR1 = NOW + MSEC(10);
	T1MCR |= TMCR_MR1I;
    7cca:	f043 0308 	orr.w	r3, r3, #8
    7cce:	f8cb 3000 	str.w	r3, [fp]

// enqueue a packet for USB
// FIXME this is cribbed from existing code, but does not have enough
// room for larger LE packets
static int usb_enqueue_le(le_rx_t *packet) {
	usb_pkt_rx* f = usb_enqueue();
    7cd2:	f7ff f99d 	bl	7010 <usb_enqueue>

	// fail if queue is full
	if (f == NULL) {
    7cd6:	4605      	mov	r5, r0
    7cd8:	b368      	cbz	r0, 7d36 <le_phy_main+0x18a>
		return 0;
	}

	f->pkt_type = LE_PACKET;

	f->clkn_high = 0;
    7cda:	f04f 0900 	mov.w	r9, #0
	// fail if queue is full
	if (f == NULL) {
		return 0;
	}

	f->pkt_type = LE_PACKET;
    7cde:	2301      	movs	r3, #1
    7ce0:	7003      	strb	r3, [r0, #0]

	f->clkn_high = 0;
    7ce2:	f880 9003 	strb.w	r9, [r0, #3]
	f->clk100ns = packet->timestamp;
    7ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
	f->rssi_avg = packet->rssi_sum / packet->size;
	f->rssi_min = packet->rssi_min;
	f->rssi_max = packet->rssi_max;
	f->rssi_count = 0;

	memcpy(f->data, &packet->access_address, 4);
    7cea:	f507 718a 	add.w	r1, r7, #276	; 0x114
	}

	f->pkt_type = LE_PACKET;

	f->clkn_high = 0;
	f->clk100ns = packet->timestamp;
    7cee:	6043      	str	r3, [r0, #4]

	f->channel = (uint8_t)((packet->channel - 2402) & 0xff);
    7cf0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
	f->rssi_avg = packet->rssi_sum / packet->size;
	f->rssi_min = packet->rssi_min;
	f->rssi_max = packet->rssi_max;
	f->rssi_count = 0;

	memcpy(f->data, &packet->access_address, 4);
    7cf4:	300e      	adds	r0, #14
	f->pkt_type = LE_PACKET;

	f->clkn_high = 0;
	f->clk100ns = packet->timestamp;

	f->channel = (uint8_t)((packet->channel - 2402) & 0xff);
    7cf6:	3b62      	subs	r3, #98	; 0x62
    7cf8:	f800 3c0c 	strb.w	r3, [r0, #-12]
	f->rssi_avg = packet->rssi_sum / packet->size;
    7cfc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    7d00:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
    7d04:	fbb3 f3f2 	udiv	r3, r3, r2
    7d08:	f800 3c04 	strb.w	r3, [r0, #-4]
	f->rssi_min = packet->rssi_min;
    7d0c:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
	f->rssi_max = packet->rssi_max;
	f->rssi_count = 0;

	memcpy(f->data, &packet->access_address, 4);
    7d10:	2204      	movs	r2, #4
	f->clkn_high = 0;
	f->clk100ns = packet->timestamp;

	f->channel = (uint8_t)((packet->channel - 2402) & 0xff);
	f->rssi_avg = packet->rssi_sum / packet->size;
	f->rssi_min = packet->rssi_min;
    7d12:	f800 3c05 	strb.w	r3, [r0, #-5]
	f->rssi_max = packet->rssi_max;
    7d16:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
	f->rssi_count = 0;
    7d1a:	f800 9c03 	strb.w	r9, [r0, #-3]
	f->clk100ns = packet->timestamp;

	f->channel = (uint8_t)((packet->channel - 2402) & 0xff);
	f->rssi_avg = packet->rssi_sum / packet->size;
	f->rssi_min = packet->rssi_min;
	f->rssi_max = packet->rssi_max;
    7d1e:	f800 3c06 	strb.w	r3, [r0, #-6]
	f->rssi_count = 0;

	memcpy(f->data, &packet->access_address, 4);
    7d22:	f002 fb71 	bl	a408 <memcpy>
	memcpy(f->data+4, packet->data, DMA_SIZE-4);
    7d26:	f105 0012 	add.w	r0, r5, #18
    7d2a:	4639      	mov	r1, r7
    7d2c:	222e      	movs	r2, #46	; 0x2e
    7d2e:	f002 fb6b 	bl	a408 <memcpy>

	f->status = 0;
    7d32:	f885 9001 	strb.w	r9, [r5, #1]
			le_dewhiten(packet->data, packet->size, packet->channel);

			if (filter_match(packet)) {
				blink(0, 1, 0); // RX LED
				usb_enqueue_le(packet);
				packet_handler(packet);
    7d36:	9d05      	ldr	r5, [sp, #20]
	le_parse_channel_map(&buf->data[3], &conn.pending_remapping);
}

static void packet_handler(le_rx_t *buf) {
	// advertising packet
	if (btle_channel_index(buf->channel) >= 37) {
    7d38:	f8b5 0110 	ldrh.w	r0, [r5, #272]	; 0x110
    7d3c:	f7fe ffe8 	bl	6d10 <btle_channel_index>
    7d40:	2824      	cmp	r0, #36	; 0x24
    7d42:	7829      	ldrb	r1, [r5, #0]
    7d44:	f240 8099 	bls.w	7e7a <le_phy_main+0x2ce>
		switch (buf->data[0] & 0xf) {
    7d48:	f001 010f 	and.w	r1, r1, #15
    7d4c:	2905      	cmp	r1, #5
    7d4e:	f040 8119 	bne.w	7f84 <le_phy_main+0x3d8>

static void le_connect_handler(le_rx_t *buf) {
	uint32_t aa, crc_init;
	uint32_t win_size, max_win_size;

	if (!le.do_follow)
    7d52:	6b73      	ldr	r3, [r6, #52]	; 0x34
    7d54:	2b00      	cmp	r3, #0
    7d56:	f000 8115 	beq.w	7f84 <le_phy_main+0x3d8>
		return;

	if (buf->size != 2 + 6 + 6 + 22 + 3)
    7d5a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    7d5e:	2b27      	cmp	r3, #39	; 0x27
    7d60:	f040 8110 	bne.w	7f84 <le_phy_main+0x3d8>
		return;

	// FIXME ugly hack
	if (cancel_follow)
    7d64:	f8da 3000 	ldr.w	r3, [sl]
    7d68:	b113      	cbz	r3, 7d70 <le_phy_main+0x1c4>
		cancel_follow = 0;
    7d6a:	4b53      	ldr	r3, [pc, #332]	; (7eb8 <le_phy_main+0x30c>)
    7d6c:	2200      	movs	r2, #0
    7d6e:	601a      	str	r2, [r3, #0]

	conn.access_address     = extract_field(buf, 14, 4);
    7d70:	210e      	movs	r1, #14
    7d72:	2204      	movs	r2, #4
    7d74:	4628      	mov	r0, r5
    7d76:	f7ff fc17 	bl	75a8 <extract_field>
	conn.crc_init           = extract_field(buf, 18, 3);
    7d7a:	2112      	movs	r1, #18
    7d7c:	2203      	movs	r2, #3

	// FIXME ugly hack
	if (cancel_follow)
		cancel_follow = 0;

	conn.access_address     = extract_field(buf, 14, 4);
    7d7e:	6220      	str	r0, [r4, #32]
	conn.crc_init           = extract_field(buf, 18, 3);
    7d80:	4628      	mov	r0, r5
    7d82:	f7ff fc11 	bl	75a8 <extract_field>
    7d86:	6260      	str	r0, [r4, #36]	; 0x24
	conn.crc_init_reversed  = rbit(conn.crc_init);
    7d88:	f001 f9a6 	bl	90d8 <rbit>
	conn.win_size           = extract_field(buf, 21, 1);
    7d8c:	2115      	movs	r1, #21
	if (cancel_follow)
		cancel_follow = 0;

	conn.access_address     = extract_field(buf, 14, 4);
	conn.crc_init           = extract_field(buf, 18, 3);
	conn.crc_init_reversed  = rbit(conn.crc_init);
    7d8e:	62a0      	str	r0, [r4, #40]	; 0x28
	conn.win_size           = extract_field(buf, 21, 1);
    7d90:	2201      	movs	r2, #1
    7d92:	4628      	mov	r0, r5
    7d94:	f7ff fc08 	bl	75a8 <extract_field>
	conn.win_offset         = extract_field(buf, 22, 2);
    7d98:	2116      	movs	r1, #22
		cancel_follow = 0;

	conn.access_address     = extract_field(buf, 14, 4);
	conn.crc_init           = extract_field(buf, 18, 3);
	conn.crc_init_reversed  = rbit(conn.crc_init);
	conn.win_size           = extract_field(buf, 21, 1);
    7d9a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    7d9e:	9003      	str	r0, [sp, #12]
	conn.win_offset         = extract_field(buf, 22, 2);
    7da0:	2202      	movs	r2, #2
    7da2:	4628      	mov	r0, r5
    7da4:	f7ff fc00 	bl	75a8 <extract_field>
	conn.conn_interval      = extract_field(buf, 24, 2);
    7da8:	2118      	movs	r1, #24

	conn.access_address     = extract_field(buf, 14, 4);
	conn.crc_init           = extract_field(buf, 18, 3);
	conn.crc_init_reversed  = rbit(conn.crc_init);
	conn.win_size           = extract_field(buf, 21, 1);
	conn.win_offset         = extract_field(buf, 22, 2);
    7daa:	63e0      	str	r0, [r4, #60]	; 0x3c
	conn.conn_interval      = extract_field(buf, 24, 2);
    7dac:	2202      	movs	r2, #2

	conn.access_address     = extract_field(buf, 14, 4);
	conn.crc_init           = extract_field(buf, 18, 3);
	conn.crc_init_reversed  = rbit(conn.crc_init);
	conn.win_size           = extract_field(buf, 21, 1);
	conn.win_offset         = extract_field(buf, 22, 2);
    7dae:	4681      	mov	r9, r0
	conn.conn_interval      = extract_field(buf, 24, 2);
    7db0:	4628      	mov	r0, r5
    7db2:	f7ff fbf9 	bl	75a8 <extract_field>
	conn.supervision_timeout = extract_field(buf, 28, 2);
    7db6:	211c      	movs	r1, #28
	conn.access_address     = extract_field(buf, 14, 4);
	conn.crc_init           = extract_field(buf, 18, 3);
	conn.crc_init_reversed  = rbit(conn.crc_init);
	conn.win_size           = extract_field(buf, 21, 1);
	conn.win_offset         = extract_field(buf, 22, 2);
	conn.conn_interval      = extract_field(buf, 24, 2);
    7db8:	4606      	mov	r6, r0
    7dba:	6320      	str	r0, [r4, #48]	; 0x30
	conn.supervision_timeout = extract_field(buf, 28, 2);
    7dbc:	2202      	movs	r2, #2
    7dbe:	4628      	mov	r0, r5
    7dc0:	f7ff fbf2 	bl	75a8 <extract_field>
	conn.hop_increment      = extract_field(buf, 35, 1) & 0x1f;
    7dc4:	2123      	movs	r1, #35	; 0x23
	conn.crc_init           = extract_field(buf, 18, 3);
	conn.crc_init_reversed  = rbit(conn.crc_init);
	conn.win_size           = extract_field(buf, 21, 1);
	conn.win_offset         = extract_field(buf, 22, 2);
	conn.conn_interval      = extract_field(buf, 24, 2);
	conn.supervision_timeout = extract_field(buf, 28, 2);
    7dc6:	6360      	str	r0, [r4, #52]	; 0x34
    7dc8:	9002      	str	r0, [sp, #8]
	conn.hop_increment      = extract_field(buf, 35, 1) & 0x1f;
    7dca:	2201      	movs	r2, #1
    7dcc:	4628      	mov	r0, r5
    7dce:	f7ff fbeb 	bl	75a8 <extract_field>

	if (conn.conn_interval < 6 || conn.conn_interval > 3200) {
    7dd2:	f640 427a 	movw	r2, #3194	; 0xc7a
    7dd6:	1fb1      	subs	r1, r6, #6
	conn.crc_init_reversed  = rbit(conn.crc_init);
	conn.win_size           = extract_field(buf, 21, 1);
	conn.win_offset         = extract_field(buf, 22, 2);
	conn.conn_interval      = extract_field(buf, 24, 2);
	conn.supervision_timeout = extract_field(buf, 28, 2);
	conn.hop_increment      = extract_field(buf, 35, 1) & 0x1f;
    7dd8:	f000 001f 	and.w	r0, r0, #31

	if (conn.conn_interval < 6 || conn.conn_interval > 3200) {
    7ddc:	4291      	cmp	r1, r2

	// FIXME ugly hack
	if (cancel_follow)
		cancel_follow = 0;

	conn.access_address     = extract_field(buf, 14, 4);
    7dde:	4f2e      	ldr	r7, [pc, #184]	; (7e98 <le_phy_main+0x2ec>)
	conn.crc_init_reversed  = rbit(conn.crc_init);
	conn.win_size           = extract_field(buf, 21, 1);
	conn.win_offset         = extract_field(buf, 22, 2);
	conn.conn_interval      = extract_field(buf, 24, 2);
	conn.supervision_timeout = extract_field(buf, 28, 2);
	conn.hop_increment      = extract_field(buf, 35, 1) & 0x1f;
    7de0:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

	if (conn.conn_interval < 6 || conn.conn_interval > 3200) {
    7de4:	d846      	bhi.n	7e74 <le_phy_main+0x2c8>
		goto err_out;
	} else {
		conn.conn_interval *= USEC(1250);
    7de6:	f243 02d4 	movw	r2, #12500	; 0x30d4
    7dea:	4356      	muls	r6, r2
	}

	// window offset is in range [0, conn_interval]
	conn.win_offset *= USEC(1250);
    7dec:	fb02 f109 	mul.w	r1, r2, r9
	if (conn.win_offset > conn.conn_interval)
    7df0:	42b1      	cmp	r1, r6
	conn.hop_increment      = extract_field(buf, 35, 1) & 0x1f;

	if (conn.conn_interval < 6 || conn.conn_interval > 3200) {
		goto err_out;
	} else {
		conn.conn_interval *= USEC(1250);
    7df2:	633e      	str	r6, [r7, #48]	; 0x30
	}

	// window offset is in range [0, conn_interval]
	conn.win_offset *= USEC(1250);
    7df4:	63f9      	str	r1, [r7, #60]	; 0x3c
	if (conn.win_offset > conn.conn_interval)
    7df6:	f8dd c008 	ldr.w	ip, [sp, #8]
    7dfa:	9b03      	ldr	r3, [sp, #12]
    7dfc:	d83a      	bhi.n	7e74 <le_phy_main+0x2c8>
    7dfe:	b2db      	uxtb	r3, r3
		goto err_out;

	// win size is in range [1.25 ms, MIN(10 ms, conn_interval - 1.25 ms)]
	win_size = conn.win_size * USEC(1250);
    7e00:	435a      	muls	r2, r3
	max_win_size = conn.conn_interval - USEC(1250);
	if (max_win_size > MSEC(10))
		max_win_size = MSEC(10);
	if (win_size < USEC(1250) || win_size > max_win_size)
    7e02:	f243 03d3 	movw	r3, #12499	; 0x30d3
    7e06:	429a      	cmp	r2, r3
    7e08:	dd34      	ble.n	7e74 <le_phy_main+0x2c8>
    7e0a:	4b31      	ldr	r3, [pc, #196]	; (7ed0 <le_phy_main+0x324>)
	if (conn.win_offset > conn.conn_interval)
		goto err_out;

	// win size is in range [1.25 ms, MIN(10 ms, conn_interval - 1.25 ms)]
	win_size = conn.win_size * USEC(1250);
	max_win_size = conn.conn_interval - USEC(1250);
    7e0c:	f5a6 5643 	sub.w	r6, r6, #12480	; 0x30c0
    7e10:	3e14      	subs	r6, #20
    7e12:	429e      	cmp	r6, r3
    7e14:	bf28      	it	cs
    7e16:	461e      	movcs	r6, r3
	if (max_win_size > MSEC(10))
		max_win_size = MSEC(10);
	if (win_size < USEC(1250) || win_size > max_win_size)
    7e18:	42b2      	cmp	r2, r6
    7e1a:	d82b      	bhi.n	7e74 <le_phy_main+0x2c8>
		goto err_out;

	// The connSupervisionTimeout shall be a multiple of 10 ms in the
	// range of 100 ms to 32.0 s and it shall be larger than (1 +
	// connSlaveLatency) * connInterval * 2
	conn.supervision_timeout *= MSEC(10);
    7e1c:	fb03 f30c 	mul.w	r3, r3, ip
	if (conn.supervision_timeout < MSEC(100) || conn.supervision_timeout > SEC(32))
    7e20:	f5a3 2c74 	sub.w	ip, r3, #999424	; 0xf4000
		goto err_out;

	// The connSupervisionTimeout shall be a multiple of 10 ms in the
	// range of 100 ms to 32.0 s and it shall be larger than (1 +
	// connSlaveLatency) * connInterval * 2
	conn.supervision_timeout *= MSEC(10);
    7e24:	637b      	str	r3, [r7, #52]	; 0x34
	if (conn.supervision_timeout < MSEC(100) || conn.supervision_timeout > SEC(32))
    7e26:	4b2b      	ldr	r3, [pc, #172]	; (7ed4 <le_phy_main+0x328>)
    7e28:	f5ac 7c10 	sub.w	ip, ip, #576	; 0x240
    7e2c:	459c      	cmp	ip, r3
    7e2e:	d821      	bhi.n	7e74 <le_phy_main+0x2c8>
		goto err_out;
	// TODO handle slave latency

	le_parse_channel_map(&buf->data[30], &conn.remapping);
    7e30:	f105 001e 	add.w	r0, r5, #30
    7e34:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7e38:	f7ff f836 	bl	6ea8 <le_parse_channel_map>
	if (conn.remapping.total_channels == 0)
    7e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
    7e40:	b1c3      	cbz	r3, 7e74 <le_phy_main+0x2c8>
	T1MR2 = NOW + USEC(3);
	T1MCR |= TMCR_MR2I;
}

static void timer1_cancel_fs_lock(void) {
	T1MCR &= ~TMCR_MR2I;
    7e42:	f8db 3000 	ldr.w	r3, [fp]
	buffer->available = 1;
}

// clear a connection event
static void reset_conn_event(void) {
	conn_event.num_packets = 0;
    7e46:	2200      	movs	r2, #0
	T1MR2 = NOW + USEC(3);
	T1MCR |= TMCR_MR2I;
}

static void timer1_cancel_fs_lock(void) {
	T1MCR &= ~TMCR_MR2I;
    7e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    7e4c:	f8cb 3000 	str.w	r3, [fp]
	buffer->available = 1;
}

// clear a connection event
static void reset_conn_event(void) {
	conn_event.num_packets = 0;
    7e50:	4b21      	ldr	r3, [pc, #132]	; (7ed8 <le_phy_main+0x32c>)
    7e52:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
    7e56:	605a      	str	r2, [r3, #4]
	conn_event.opened = 0;
    7e58:	609a      	str	r2, [r3, #8]
    7e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

	// cancel RX on advertising channel
	timer1_cancel_fs_lock();

	reset_conn_event();
	timer1_set_match(buf->timestamp + PACKET_DURATION(buf) +
    7e5c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    7e60:	4403      	add	r3, r0
    7e62:	f503 531a 	add.w	r3, r3, #9856	; 0x2680
    7e66:	332c      	adds	r3, #44	; 0x2c
    7e68:	2050      	movs	r0, #80	; 0x50
    7e6a:	fb00 3002 	mla	r0, r0, r2, r3
    7e6e:	f7ff fb7f 	bl	7570 <timer1_set_match>
    7e72:	e087      	b.n	7f84 <le_phy_main+0x3d8>
			conn.win_offset + USEC(1250) - RX_WARMUP_TIME);
	return;

	// error condition: reset conn and return
err_out:
	reset_conn();
    7e74:	f7ff fbba 	bl	75ec <reset_conn>
    7e78:	e084      	b.n	7f84 <le_phy_main+0x3d8>
	}

	// data packet
	else {
		// LL control PDU
		if ((buf->data[0] & 0b11) == 0b11 && buf->data[1] > 0) {
    7e7a:	f001 0103 	and.w	r1, r1, #3
    7e7e:	2903      	cmp	r1, #3
    7e80:	f040 8080 	bne.w	7f84 <le_phy_main+0x3d8>
    7e84:	786b      	ldrb	r3, [r5, #1]
    7e86:	2b00      	cmp	r3, #0
    7e88:	d07c      	beq.n	7f84 <le_phy_main+0x3d8>
			switch (buf->data[2]) {
    7e8a:	78aa      	ldrb	r2, [r5, #2]
    7e8c:	b342      	cbz	r2, 7ee0 <le_phy_main+0x334>
    7e8e:	2a01      	cmp	r2, #1
    7e90:	d069      	beq.n	7f66 <le_phy_main+0x3ba>
    7e92:	e077      	b.n	7f84 <le_phy_main+0x3d8>
    7e94:	e000e180 	.word	0xe000e180
    7e98:	10000b0c 	.word	0x10000b0c
    7e9c:	40008004 	.word	0x40008004
    7ea0:	100039dc 	.word	0x100039dc
    7ea4:	4000800c 	.word	0x4000800c
    7ea8:	e000e100 	.word	0xe000e100
    7eac:	1000049a 	.word	0x1000049a
    7eb0:	10003a0c 	.word	0x10003a0c
    7eb4:	8e89bed6 	.word	0x8e89bed6
    7eb8:	10000a4c 	.word	0x10000a4c
    7ebc:	10000a36 	.word	0x10000a36
    7ec0:	1000044c 	.word	0x1000044c
    7ec4:	2009c038 	.word	0x2009c038
    7ec8:	40008008 	.word	0x40008008
    7ecc:	4000801c 	.word	0x4000801c
    7ed0:	000186a0 	.word	0x000186a0
    7ed4:	13038dc0 	.word	0x13038dc0
    7ed8:	10003a10 	.word	0x10003a10
    7edc:	40008014 	.word	0x40008014
				// LE_CONNECTION_UPDATE_REQ -- update connection parameters
				case 0x0:
					if (buf->data[1] == 12)
    7ee0:	2b0c      	cmp	r3, #12
    7ee2:	d14f      	bne.n	7f84 <le_phy_main+0x3d8>
err_out:
	reset_conn();
}

static void connection_update_handler(le_rx_t *buf) {
	conn.win_size            = extract_field(buf, 3, 1);
    7ee4:	2201      	movs	r2, #1
    7ee6:	4628      	mov	r0, r5
    7ee8:	9302      	str	r3, [sp, #8]
    7eea:	f7ff fb5d 	bl	75a8 <extract_field>
	conn.win_offset          = extract_field(buf, 4, 2);
    7eee:	2104      	movs	r1, #4
err_out:
	reset_conn();
}

static void connection_update_handler(le_rx_t *buf) {
	conn.win_size            = extract_field(buf, 3, 1);
    7ef0:	b2c6      	uxtb	r6, r0
	conn.win_offset          = extract_field(buf, 4, 2);
    7ef2:	2202      	movs	r2, #2
    7ef4:	4628      	mov	r0, r5
err_out:
	reset_conn();
}

static void connection_update_handler(le_rx_t *buf) {
	conn.win_size            = extract_field(buf, 3, 1);
    7ef6:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
	conn.win_offset          = extract_field(buf, 4, 2);
    7efa:	f7ff fb55 	bl	75a8 <extract_field>
	conn.conn_update_pending_interval = extract_field(buf, 6, 2);
    7efe:	2106      	movs	r1, #6
	reset_conn();
}

static void connection_update_handler(le_rx_t *buf) {
	conn.win_size            = extract_field(buf, 3, 1);
	conn.win_offset          = extract_field(buf, 4, 2);
    7f00:	4607      	mov	r7, r0
    7f02:	63e0      	str	r0, [r4, #60]	; 0x3c
	conn.conn_update_pending_interval = extract_field(buf, 6, 2);
    7f04:	2202      	movs	r2, #2
    7f06:	4628      	mov	r0, r5
    7f08:	f7ff fb4e 	bl	75a8 <extract_field>
	conn.conn_update_pending_supervision_timeout = extract_field(buf, 10, 2);
    7f0c:	210a      	movs	r1, #10
}

static void connection_update_handler(le_rx_t *buf) {
	conn.win_size            = extract_field(buf, 3, 1);
	conn.win_offset          = extract_field(buf, 4, 2);
	conn.conn_update_pending_interval = extract_field(buf, 6, 2);
    7f0e:	4683      	mov	fp, r0
    7f10:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
	conn.conn_update_pending_supervision_timeout = extract_field(buf, 10, 2);
    7f14:	2202      	movs	r2, #2
    7f16:	4628      	mov	r0, r5
    7f18:	f7ff fb46 	bl	75a8 <extract_field>
	conn.conn_update_instant = extract_field(buf, 12, 2);
    7f1c:	9b02      	ldr	r3, [sp, #8]

static void connection_update_handler(le_rx_t *buf) {
	conn.win_size            = extract_field(buf, 3, 1);
	conn.win_offset          = extract_field(buf, 4, 2);
	conn.conn_update_pending_interval = extract_field(buf, 6, 2);
	conn.conn_update_pending_supervision_timeout = extract_field(buf, 10, 2);
    7f1e:	4681      	mov	r9, r0
    7f20:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
	conn.conn_update_instant = extract_field(buf, 12, 2);
    7f24:	4619      	mov	r1, r3
    7f26:	4628      	mov	r0, r5
    7f28:	2202      	movs	r2, #2
    7f2a:	f7ff fb3d 	bl	75a8 <extract_field>

	// TODO check for invalid values. XXX what do we even do in that
	// case? we will probably drop the connection, but at least it's on
	// our own terms and not some impossibly long supervision timeout.
	conn.win_size   *= USEC(1250);
    7f2e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    7f32:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    7f36:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	conn.win_offset *= USEC(1250);
    7f3a:	f243 03d4 	movw	r3, #12500	; 0x30d4
    7f3e:	435f      	muls	r7, r3
	conn.conn_update_pending_interval *= USEC(1250);
    7f40:	fb03 f30b 	mul.w	r3, r3, fp
    7f44:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
	conn.conn_update_pending_supervision_timeout *= MSEC(10);
    7f48:	4b1b      	ldr	r3, [pc, #108]	; (7fb8 <le_phy_main+0x40c>)
	conn.conn_update_instant = extract_field(buf, 12, 2);

	// TODO check for invalid values. XXX what do we even do in that
	// case? we will probably drop the connection, but at least it's on
	// our own terms and not some impossibly long supervision timeout.
	conn.win_size   *= USEC(1250);
    7f4a:	00b6      	lsls	r6, r6, #2
	conn.win_offset *= USEC(1250);
	conn.conn_update_pending_interval *= USEC(1250);
	conn.conn_update_pending_supervision_timeout *= MSEC(10);
    7f4c:	fb03 f309 	mul.w	r3, r3, r9
    7f50:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118

	conn.conn_update_pending = 1;
    7f54:	2301      	movs	r3, #1
static void connection_update_handler(le_rx_t *buf) {
	conn.win_size            = extract_field(buf, 3, 1);
	conn.win_offset          = extract_field(buf, 4, 2);
	conn.conn_update_pending_interval = extract_field(buf, 6, 2);
	conn.conn_update_pending_supervision_timeout = extract_field(buf, 10, 2);
	conn.conn_update_instant = extract_field(buf, 12, 2);
    7f56:	f8a4 011c 	strh.w	r0, [r4, #284]	; 0x11c

	// TODO check for invalid values. XXX what do we even do in that
	// case? we will probably drop the connection, but at least it's on
	// our own terms and not some impossibly long supervision timeout.
	conn.win_size   *= USEC(1250);
    7f5a:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
	conn.win_offset *= USEC(1250);
    7f5e:	63e7      	str	r7, [r4, #60]	; 0x3c
	conn.conn_update_pending_interval *= USEC(1250);
	conn.conn_update_pending_supervision_timeout *= MSEC(10);

	conn.conn_update_pending = 1;
    7f60:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    7f64:	e00e      	b.n	7f84 <le_phy_main+0x3d8>
						connection_update_handler(buf);
					break;

				// LE_CHANNEL_MAP_REQ -- update channel map
				case 0x1:
					if (buf->data[1] == 8)
    7f66:	2b08      	cmp	r3, #8
    7f68:	d10c      	bne.n	7f84 <le_phy_main+0x3d8>

	conn.conn_update_pending = 1;
}

static void channel_map_update_handler(le_rx_t *buf) {
	conn.channel_map_update_pending = 1;
    7f6a:	f8c4 2120 	str.w	r2, [r4, #288]	; 0x120
	conn.channel_map_update_instant = extract_field(buf, 8, 2);
    7f6e:	4619      	mov	r1, r3
    7f70:	4628      	mov	r0, r5
    7f72:	2202      	movs	r2, #2
    7f74:	f7ff fb18 	bl	75a8 <extract_field>
	le_parse_channel_map(&buf->data[3], &conn.pending_remapping);
    7f78:	4910      	ldr	r1, [pc, #64]	; (7fbc <le_phy_main+0x410>)
	conn.conn_update_pending = 1;
}

static void channel_map_update_handler(le_rx_t *buf) {
	conn.channel_map_update_pending = 1;
	conn.channel_map_update_instant = extract_field(buf, 8, 2);
    7f7a:	f8a4 0124 	strh.w	r0, [r4, #292]	; 0x124
	le_parse_channel_map(&buf->data[3], &conn.pending_remapping);
    7f7e:	1ce8      	adds	r0, r5, #3
    7f80:	f7fe ff92 	bl	6ea8 <le_parse_channel_map>
	return NULL;
}

// release a buffer back to the pool
static void buffer_release(le_rx_t *buffer) {
	buffer->available = 1;
    7f84:	9b05      	ldr	r3, [sp, #20]
    7f86:	2201      	movs	r2, #1
    7f88:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

			buffer_release(packet);
		}

		// polled USB handling
		handle_usb(0);
    7f8c:	2000      	movs	r0, #0
    7f8e:	f7ff f893 	bl	70b8 <handle_usb>
    7f92:	e645      	b.n	7c20 <le_phy_main+0x74>

static void timer1_stop(void) {
	T1TCR = TCR_Counter_Reset;

	// clear interrupt handler
	ICER0 = ICER0_ICE_TIMER1;
    7f94:	9901      	ldr	r1, [sp, #4]
	// set up interrupt handler
	ISER0 = ISER0_ISE_TIMER1;
}

static void timer1_stop(void) {
	T1TCR = TCR_Counter_Reset;
    7f96:	2202      	movs	r2, #2

	// clear interrupt handler
	ICER0 = ICER0_ICE_TIMER1;
    7f98:	2304      	movs	r3, #4
	// set up interrupt handler
	ISER0 = ISER0_ISE_TIMER1;
}

static void timer1_stop(void) {
	T1TCR = TCR_Counter_Reset;
    7f9a:	f8c8 2000 	str.w	r2, [r8]

	// clear interrupt handler
	ICER0 = ICER0_ICE_TIMER1;
    7f9e:	600b      	str	r3, [r1, #0]
	}

	timer1_stop();

	// reset state
	RXLED_CLR;
    7fa0:	4b07      	ldr	r3, [pc, #28]	; (7fc0 <le_phy_main+0x414>)
    7fa2:	2110      	movs	r1, #16
    7fa4:	6019      	str	r1, [r3, #0]
	TXLED_CLR;
    7fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
    7faa:	6019      	str	r1, [r3, #0]
	USRLED_CLR;
    7fac:	601a      	str	r2, [r3, #0]
	clkn_init();
    7fae:	f7ff f9b1 	bl	7314 <clkn_init>

	// TODO kill CC2400
}
    7fb2:	b007      	add	sp, #28
    7fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7fb8:	000186a0 	.word	0x000186a0
    7fbc:	10000c34 	.word	0x10000c34
    7fc0:	2009c03c 	.word	0x2009c03c

00007fc4 <queue_init>:

// queue implementation is based heavily on Koopman's "Better Embedded
// Systems Software" section 20.3.3.1 pg 209

void queue_init(queue_t *f) {
	f->head = 0;
    7fc4:	2300      	movs	r3, #0
    7fc6:	6283      	str	r3, [r0, #40]	; 0x28
	f->tail = 0;
    7fc8:	62c3      	str	r3, [r0, #44]	; 0x2c
    7fca:	4770      	bx	lr

00007fcc <queue_insert>:

// insert
int queue_insert(queue_t *f, void *x) {
	unsigned newtail;
	// access next free element
	newtail = f->tail + 1;
    7fcc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

	// wrap around to beginning if needed
	if (newtail >= FIFOSIZE) { newtail = 0; }

	// if head and tail are equal, queue is full
	if (newtail == f->head) { return 0; }
    7fce:	6a82      	ldr	r2, [r0, #40]	; 0x28

// insert
int queue_insert(queue_t *f, void *x) {
	unsigned newtail;
	// access next free element
	newtail = f->tail + 1;
    7fd0:	3301      	adds	r3, #1

	// wrap around to beginning if needed
	if (newtail >= FIFOSIZE) { newtail = 0; }
    7fd2:	2b0a      	cmp	r3, #10
    7fd4:	bf28      	it	cs
    7fd6:	2300      	movcs	r3, #0

	// if head and tail are equal, queue is full
	if (newtail == f->head) { return 0; }
    7fd8:	4293      	cmp	r3, r2

	// write data before updating pointer
	f->data[newtail] = x;
    7fda:	bf1d      	ittte	ne
    7fdc:	f840 1023 	strne.w	r1, [r0, r3, lsl #2]
	f->tail = newtail;
    7fe0:	62c3      	strne	r3, [r0, #44]	; 0x2c

	return 1;
    7fe2:	2001      	movne	r0, #1

	// wrap around to beginning if needed
	if (newtail >= FIFOSIZE) { newtail = 0; }

	// if head and tail are equal, queue is full
	if (newtail == f->head) { return 0; }
    7fe4:	2000      	moveq	r0, #0
	// write data before updating pointer
	f->data[newtail] = x;
	f->tail = newtail;

	return 1;
}
    7fe6:	4770      	bx	lr

00007fe8 <queue_remove>:

// TODO remove
int queue_remove(queue_t *f, void **x) {
	unsigned newhead;

	if (f->head == f->tail) { return 0; }
    7fe8:	6a83      	ldr	r3, [r0, #40]	; 0x28
    7fea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    7fec:	4293      	cmp	r3, r2
    7fee:	d009      	beq.n	8004 <queue_remove+0x1c>

	newhead = f->head + 1;
    7ff0:	3301      	adds	r3, #1

	if (newhead >= FIFOSIZE) { newhead = 0; }
    7ff2:	2b0a      	cmp	r3, #10
    7ff4:	bf28      	it	cs
    7ff6:	2300      	movcs	r3, #0

	*x = f->data[newhead];
    7ff8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    7ffc:	600a      	str	r2, [r1, #0]
	f->head = newhead;
    7ffe:	6283      	str	r3, [r0, #40]	; 0x28

	return 1;
    8000:	2001      	movs	r0, #1
    8002:	4770      	bx	lr

// TODO remove
int queue_remove(queue_t *f, void **x) {
	unsigned newhead;

	if (f->head == f->tail) { return 0; }
    8004:	2000      	movs	r0, #0

	*x = f->data[newhead];
	f->head = newhead;

	return 1;
}
    8006:	4770      	bx	lr

00008008 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    8008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    800c:	b098      	sub	sp, #96	; 0x60
    800e:	af00      	add	r7, sp, #0
	u8 len = 22;
	u8 pa = 0;
	u8 txbuf[len];
	u8 rxbuf[len];

	txbuf[0] = len - 1; // length of data (rest of payload)
    8010:	2315      	movs	r3, #21
    8012:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	txbuf[1] = 0; // request
    8016:	2300      	movs	r3, #0
    8018:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    801c:	4682      	mov	sl, r0

	txbuf[0] = len - 1; // length of data (rest of payload)
	txbuf[1] = 0; // request

	// read device serial number
	command[0] = 58;
    801e:	233a      	movs	r3, #58	; 0x3a
    8020:	f107 0060 	add.w	r0, r7, #96	; 0x60
    8024:	f840 3d58 	str.w	r3, [r0, #-88]!
	iap_entry(command, result);
    8028:	4b98      	ldr	r3, [pc, #608]	; (828c <cc2400_rangetest+0x284>)
    802a:	f107 011c 	add.w	r1, r7, #28
    802e:	681b      	ldr	r3, [r3, #0]
    8030:	f8c7 d004 	str.w	sp, [r7, #4]
    8034:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    8036:	7f3a      	ldrb	r2, [r7, #28]
    8038:	2a00      	cmp	r2, #0
    803a:	f040 8122 	bne.w	8282 <cc2400_rangetest+0x27a>
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    803e:	6a3b      	ldr	r3, [r7, #32]
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    8040:	2012      	movs	r0, #18
	// read device serial number
	command[0] = 58;
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
    8042:	0e19      	lsrs	r1, r3, #24
    8044:	f887 104a 	strb.w	r1, [r7, #74]	; 0x4a
	txbuf[3] = (result[1] >> 16) & 0xFF;
    8048:	0c19      	lsrs	r1, r3, #16
    804a:	f887 104b 	strb.w	r1, [r7, #75]	; 0x4b
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
    804e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
    8052:	0a19      	lsrs	r1, r3, #8
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    8054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	iap_entry(command, result);
	if ((result[0] & 0xFF) != 0) //status check
		return;
	txbuf[2] = (result[1] >> 24) & 0xFF;
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
    8056:	f887 104c 	strb.w	r1, [r7, #76]	; 0x4c
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
    805a:	0e19      	lsrs	r1, r3, #24
    805c:	f887 104e 	strb.w	r1, [r7, #78]	; 0x4e
	txbuf[7] = (result[2] >> 16) & 0xFF;
    8060:	0c19      	lsrs	r1, r3, #16
    8062:	f887 104f 	strb.w	r1, [r7, #79]	; 0x4f
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
    8066:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
    806a:	0a19      	lsrs	r1, r3, #8
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    806c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	txbuf[3] = (result[1] >> 16) & 0xFF;
	txbuf[4] = (result[1] >> 8) & 0xFF;
	txbuf[5] = result[1] & 0xFF;
	txbuf[6] = (result[2] >> 24) & 0xFF;
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
    806e:	f887 1050 	strb.w	r1, [r7, #80]	; 0x50
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
    8072:	0e19      	lsrs	r1, r3, #24
    8074:	f887 1052 	strb.w	r1, [r7, #82]	; 0x52
	txbuf[11] = (result[3] >> 16) & 0xFF;
    8078:	0c19      	lsrs	r1, r3, #16
    807a:	f887 1053 	strb.w	r1, [r7, #83]	; 0x53
	txbuf[12] = (result[3] >> 8) & 0xFF;
	txbuf[13] = result[3] & 0xFF;
    807e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
    8082:	0a19      	lsrs	r1, r3, #8
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    8084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	txbuf[7] = (result[2] >> 16) & 0xFF;
	txbuf[8] = (result[2] >> 8) & 0xFF;
	txbuf[9] = result[2] & 0xFF;
	txbuf[10] = (result[3] >> 24) & 0xFF;
	txbuf[11] = (result[3] >> 16) & 0xFF;
	txbuf[12] = (result[3] >> 8) & 0xFF;
    8086:	f887 1054 	strb.w	r1, [r7, #84]	; 0x54
	txbuf[13] = result[3] & 0xFF;
	txbuf[14] = (result[4] >> 24) & 0xFF;
    808a:	0e19      	lsrs	r1, r3, #24
    808c:	f887 1056 	strb.w	r1, [r7, #86]	; 0x56
	txbuf[15] = (result[4] >> 16) & 0xFF;
    8090:	0c19      	lsrs	r1, r3, #16
    8092:	f887 1057 	strb.w	r1, [r7, #87]	; 0x57
	txbuf[16] = (result[4] >> 8) & 0xFF;
    8096:	0a19      	lsrs	r1, r3, #8
    8098:	f887 1058 	strb.w	r1, [r7, #88]	; 0x58
	txbuf[17] = result[4] & 0xFF;
    809c:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
	txbuf[21] = 0xff; // reply number

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    80a0:	f642 3122 	movw	r1, #11042	; 0x2b22
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
	txbuf[19] = 0; // request number
	txbuf[20] = 0xff; // reply pa
    80a4:	23ff      	movs	r3, #255	; 0xff
	txbuf[14] = (result[4] >> 24) & 0xFF;
	txbuf[15] = (result[4] >> 16) & 0xFF;
	txbuf[16] = (result[4] >> 8) & 0xFF;
	txbuf[17] = result[4] & 0xFF;

	txbuf[18] = pa; // request pa
    80a6:	f887 205a 	strb.w	r2, [r7, #90]	; 0x5a
	txbuf[19] = 0; // request number
    80aa:	f887 205b 	strb.w	r2, [r7, #91]	; 0x5b
	txbuf[20] = 0xff; // reply pa
    80ae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	txbuf[21] = 0xff; // reply number
    80b2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    80b6:	f001 f902 	bl	92be <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    80ba:	2014      	movs	r0, #20
    80bc:	f241 314b 	movw	r1, #4939	; 0x134b
    80c0:	f001 f8fd 	bl	92be <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    80c4:	2020      	movs	r0, #32
    80c6:	f640 51f1 	movw	r1, #3569	; 0xdf1
    80ca:	f001 f8f8 	bl	92be <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    80ce:	f8ba 1000 	ldrh.w	r1, [sl]
    80d2:	2002      	movs	r0, #2
    80d4:	b289      	uxth	r1, r1
    80d6:	f001 f8f2 	bl	92be <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    80da:	202d      	movs	r0, #45	; 0x2d
    80dc:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    80e0:	f001 f8ed 	bl	92be <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    80e4:	202c      	movs	r0, #44	; 0x2c
    80e6:	f241 5184 	movw	r1, #5508	; 0x1584
    80ea:	f001 f8e8 	bl	92be <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    80ee:	2005      	movs	r0, #5
    80f0:	2108      	movs	r1, #8
    80f2:	f001 f8e4 	bl	92be <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    80f6:	2003      	movs	r0, #3
    80f8:	2129      	movs	r1, #41	; 0x29
    80fa:	f001 f8e0 	bl	92be <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    80fe:	f001 f97f 	bl	9400 <cc2400_status>
    8102:	0642      	lsls	r2, r0, #25
    8104:	d5fb      	bpl.n	80fe <cc2400_rangetest+0xf6>
	cc2400_strobe(SFSON);
    8106:	2061      	movs	r0, #97	; 0x61
    8108:	f001 f981 	bl	940e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    810c:	f001 f978 	bl	9400 <cc2400_status>
    8110:	0743      	lsls	r3, r0, #29
    8112:	d5fb      	bpl.n	810c <cc2400_rangetest+0x104>
	TXLED_SET;
    8114:	4b5e      	ldr	r3, [pc, #376]	; (8290 <cc2400_rangetest+0x288>)
    8116:	f44f 7280 	mov.w	r2, #256	; 0x100
    811a:	4698      	mov	r8, r3
    811c:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    811e:	4a5d      	ldr	r2, [pc, #372]	; (8294 <cc2400_rangetest+0x28c>)
    8120:	2180      	movs	r1, #128	; 0x80
    8122:	6011      	str	r1, [r2, #0]
    8124:	2400      	movs	r4, #0
    8126:	b2e5      	uxtb	r5, r4
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
    8128:	2005      	movs	r0, #5
    812a:	f045 0108 	orr.w	r1, r5, #8
    812e:	f001 f8c6 	bl	92be <cc2400_set>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    8132:	2600      	movs	r6, #0
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
    8134:	f887 505a 	strb.w	r5, [r7, #90]	; 0x5a
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
    8138:	f887 605b 	strb.w	r6, [r7, #91]	; 0x5b
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    813c:	200e      	movs	r0, #14
    813e:	f001 f8b5 	bl	92ac <cc2400_get>
    8142:	f000 001f 	and.w	r0, r0, #31
    8146:	280f      	cmp	r0, #15
    8148:	d1f8      	bne.n	813c <cc2400_rangetest+0x134>
    814a:	f04f 0900 	mov.w	r9, #0
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
    814e:	f107 0548 	add.w	r5, r7, #72	; 0x48
    8152:	f815 1009 	ldrb.w	r1, [r5, r9]
    8156:	2070      	movs	r0, #112	; 0x70
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    8158:	f109 0901 	add.w	r9, r9, #1
				cc2400_set8(FIFOREG, txbuf[j]);
    815c:	f001 f8bd 	bl	92da <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    8160:	f1b9 0f16 	cmp.w	r9, #22
    8164:	d1f3      	bne.n	814e <cc2400_rangetest+0x146>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    8166:	2063      	movs	r0, #99	; 0x63
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    8168:	3601      	adds	r6, #1
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    816a:	f001 f950 	bl	940e <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    816e:	2e10      	cmp	r6, #16
    8170:	d1e2      	bne.n	8138 <cc2400_rangetest+0x130>
    8172:	3401      	adds	r4, #1
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    8174:	2c08      	cmp	r4, #8
    8176:	d1d6      	bne.n	8126 <cc2400_rangetest+0x11e>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8178:	200e      	movs	r0, #14
    817a:	f001 f897 	bl	92ac <cc2400_get>
    817e:	f000 001f 	and.w	r0, r0, #31
    8182:	280f      	cmp	r0, #15
    8184:	d1f8      	bne.n	8178 <cc2400_rangetest+0x170>
	TXLED_CLR;
    8186:	4c44      	ldr	r4, [pc, #272]	; (8298 <cc2400_rangetest+0x290>)
    8188:	f44f 7380 	mov.w	r3, #256	; 0x100
    818c:	6023      	str	r3, [r4, #0]
	cc2400_strobe(SRFOFF);
    818e:	2064      	movs	r0, #100	; 0x64
    8190:	f001 f93d 	bl	940e <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    8194:	f001 f934 	bl	9400 <cc2400_status>
    8198:	0746      	lsls	r6, r0, #29
    819a:	d4fb      	bmi.n	8194 <cc2400_rangetest+0x18c>
	cc2400_set(FSDIV, *chan_ptr - 1);
    819c:	f8ba 1000 	ldrh.w	r1, [sl]
    81a0:	2002      	movs	r0, #2
    81a2:	3901      	subs	r1, #1
    81a4:	b289      	uxth	r1, r1
    81a6:	f001 f88a 	bl	92be <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    81aa:	f001 f929 	bl	9400 <cc2400_status>
    81ae:	0640      	lsls	r0, r0, #25
    81b0:	d5fb      	bpl.n	81aa <cc2400_rangetest+0x1a2>
	cc2400_strobe(SFSON);
    81b2:	2061      	movs	r0, #97	; 0x61
    81b4:	f001 f92b 	bl	940e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    81b8:	f001 f922 	bl	9400 <cc2400_status>
    81bc:	0741      	lsls	r1, r0, #29
    81be:	d5fb      	bpl.n	81b8 <cc2400_rangetest+0x1b0>
	RXLED_SET;
    81c0:	2310      	movs	r3, #16
    81c2:	f8c8 3000 	str.w	r3, [r8]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    81c6:	200e      	movs	r0, #14
    81c8:	f001 f870 	bl	92ac <cc2400_get>
    81cc:	f000 001f 	and.w	r0, r0, #31
    81d0:	280f      	cmp	r0, #15
    81d2:	d1f8      	bne.n	81c6 <cc2400_rangetest+0x1be>
		cc2400_strobe(SRX);
    81d4:	2062      	movs	r0, #98	; 0x62
    81d6:	f001 f91a 	bl	940e <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    81da:	f001 f911 	bl	9400 <cc2400_status>
    81de:	06c2      	lsls	r2, r0, #27
    81e0:	d5fb      	bpl.n	81da <cc2400_rangetest+0x1d2>
		USRLED_SET;
    81e2:	2302      	movs	r3, #2
    81e4:	f8c8 3000 	str.w	r3, [r8]
		for (j = 0; j < len; j++)
    81e8:	f04f 0900 	mov.w	r9, #0
			rxbuf[j] = cc2400_get8(FIFOREG);
    81ec:	2070      	movs	r0, #112	; 0x70
    81ee:	f001 f86b 	bl	92c8 <cc2400_get8>
    81f2:	f107 0630 	add.w	r6, r7, #48	; 0x30
    81f6:	f806 0009 	strb.w	r0, [r6, r9]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    81fa:	f109 0901 	add.w	r9, r9, #1
    81fe:	f1b9 0f16 	cmp.w	r9, #22
    8202:	d1f3      	bne.n	81ec <cc2400_rangetest+0x1e4>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    8204:	f001 f8fc 	bl	9400 <cc2400_status>
    8208:	0703      	lsls	r3, r0, #28
    820a:	d402      	bmi.n	8212 <cc2400_rangetest+0x20a>
			break;
		USRLED_CLR;
    820c:	2302      	movs	r3, #2
    820e:	6023      	str	r3, [r4, #0]
	}
    8210:	e7d9      	b.n	81c6 <cc2400_rangetest+0x1be>

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8212:	200e      	movs	r0, #14
    8214:	f001 f84a 	bl	92ac <cc2400_get>
    8218:	f000 001f 	and.w	r0, r0, #31
    821c:	280f      	cmp	r0, #15
    821e:	d1f8      	bne.n	8212 <cc2400_rangetest+0x20a>
	cc2400_strobe(SRFOFF);
    8220:	2064      	movs	r0, #100	; 0x64
    8222:	f001 f8f4 	bl	940e <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    8226:	f001 f8eb 	bl	9400 <cc2400_status>
    822a:	f000 0004 	and.w	r0, r0, #4
    822e:	f000 03ff 	and.w	r3, r0, #255	; 0xff
    8232:	2800      	cmp	r0, #0
    8234:	d1f7      	bne.n	8226 <cc2400_rangetest+0x21e>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    8236:	4a19      	ldr	r2, [pc, #100]	; (829c <cc2400_rangetest+0x294>)
    8238:	2180      	movs	r1, #128	; 0x80
    823a:	6011      	str	r1, [r2, #0]
#endif
	RXLED_CLR;
    823c:	2210      	movs	r2, #16
    823e:	6022      	str	r2, [r4, #0]

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
    8240:	f897 0042 	ldrb.w	r0, [r7, #66]	; 0x42
	PAEN_CLR;
#endif
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
    8244:	4a16      	ldr	r2, [pc, #88]	; (82a0 <cc2400_rangetest+0x298>)
    8246:	2101      	movs	r1, #1
	rr.request_pa  = rxbuf[18];
    8248:	7050      	strb	r0, [r2, #1]
	rr.request_num = rxbuf[19];
    824a:	f897 0043 	ldrb.w	r0, [r7, #67]	; 0x43
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    824e:	f887 1049 	strb.w	r1, [r7, #73]	; 0x49
	RXLED_CLR;

	// get test result
	rr.valid       = 1;
	rr.request_pa  = rxbuf[18];
	rr.request_num = rxbuf[19];
    8252:	7090      	strb	r0, [r2, #2]
	rr.reply_pa    = rxbuf[20];
    8254:	f897 0044 	ldrb.w	r0, [r7, #68]	; 0x44
    8258:	70d0      	strb	r0, [r2, #3]
	rr.reply_num   = rxbuf[21];
    825a:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
    825e:	7110      	strb	r0, [r2, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
		if (rxbuf[i] != txbuf[i])
    8260:	f816 e003 	ldrb.w	lr, [r6, r3]
    8264:	5ce8      	ldrb	r0, [r5, r3]
    8266:	4586      	cmp	lr, r0
    8268:	bf18      	it	ne
    826a:	1c99      	addne	r1, r3, #2
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    826c:	f103 0301 	add.w	r3, r3, #1
    8270:	bf18      	it	ne
    8272:	b2c9      	uxtbne	r1, r1
    8274:	2b12      	cmp	r3, #18
    8276:	d1f3      	bne.n	8260 <cc2400_rangetest+0x258>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    8278:	2302      	movs	r3, #2
    827a:	7011      	strb	r1, [r2, #0]
    827c:	6023      	str	r3, [r4, #0]
    827e:	f8d7 d004 	ldr.w	sp, [r7, #4]
#endif
}
    8282:	3760      	adds	r7, #96	; 0x60
    8284:	46bd      	mov	sp, r7
    8286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    828a:	bf00      	nop
    828c:	0000b024 	.word	0x0000b024
    8290:	2009c038 	.word	0x2009c038
    8294:	2009c058 	.word	0x2009c058
    8298:	2009c03c 	.word	0x2009c03c
    829c:	2009c05c 	.word	0x2009c05c
    82a0:	10001708 	.word	0x10001708

000082a4 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    82a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    82a8:	b087      	sub	sp, #28
    82aa:	4680      	mov	r8, r0
	u8 pa = 0;
	u8 buf[len];

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    82ac:	2012      	movs	r0, #18
    82ae:	f642 3122 	movw	r1, #11042	; 0x2b22
    82b2:	f001 f804 	bl	92be <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    82b6:	2014      	movs	r0, #20
    82b8:	f241 314b 	movw	r1, #4939	; 0x134b
    82bc:	f000 ffff 	bl	92be <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    82c0:	f8b8 1000 	ldrh.w	r1, [r8]
    82c4:	2002      	movs	r0, #2
    82c6:	3901      	subs	r1, #1
    82c8:	b289      	uxth	r1, r1
    82ca:	f000 fff8 	bl	92be <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    82ce:	202d      	movs	r0, #45	; 0x2d
    82d0:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    82d4:	f000 fff3 	bl	92be <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    82d8:	202c      	movs	r0, #44	; 0x2c
    82da:	f241 5184 	movw	r1, #5508	; 0x1584
    82de:	f000 ffee 	bl	92be <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    82e2:	2005      	movs	r0, #5
    82e4:	2108      	movs	r1, #8
    82e6:	f000 ffea 	bl	92be <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    82ea:	2003      	movs	r0, #3
    82ec:	2129      	movs	r1, #41	; 0x29
    82ee:	f000 ffe6 	bl	92be <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    82f2:	f001 f885 	bl	9400 <cc2400_status>
    82f6:	0641      	lsls	r1, r0, #25
    82f8:	d5fb      	bpl.n	82f2 <cc2400_repeater+0x4e>
		cc2400_strobe(SFSON);
    82fa:	2061      	movs	r0, #97	; 0x61
    82fc:	f001 f887 	bl	940e <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    8300:	f001 f87e 	bl	9400 <cc2400_status>
    8304:	0742      	lsls	r2, r0, #29
    8306:	d5fb      	bpl.n	8300 <cc2400_repeater+0x5c>
		RXLED_SET;
		TXLED_CLR;
    8308:	4c41      	ldr	r4, [pc, #260]	; (8410 <cc2400_repeater+0x16c>)
		cc2400_set(FREND,   0x0008); // minimum tx power
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));
		RXLED_SET;
    830a:	4e42      	ldr	r6, [pc, #264]	; (8414 <cc2400_repeater+0x170>)
    830c:	46a1      	mov	r9, r4
    830e:	4637      	mov	r7, r6
    8310:	2310      	movs	r3, #16
    8312:	6033      	str	r3, [r6, #0]
		TXLED_CLR;
    8314:	f44f 7380 	mov.w	r3, #256	; 0x100
    8318:	6023      	str	r3, [r4, #0]
		USRLED_CLR;
    831a:	2302      	movs	r3, #2
    831c:	6023      	str	r3, [r4, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    831e:	4b3e      	ldr	r3, [pc, #248]	; (8418 <cc2400_repeater+0x174>)
    8320:	2280      	movs	r2, #128	; 0x80
    8322:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8324:	200e      	movs	r0, #14
    8326:	f000 ffc1 	bl	92ac <cc2400_get>
    832a:	f000 001f 	and.w	r0, r0, #31
    832e:	280f      	cmp	r0, #15
    8330:	d1f8      	bne.n	8324 <cc2400_repeater+0x80>
			USRLED_CLR;
    8332:	2302      	movs	r3, #2
    8334:	f8c9 3000 	str.w	r3, [r9]
			cc2400_strobe(SRX);
    8338:	2062      	movs	r0, #98	; 0x62
    833a:	f001 f868 	bl	940e <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    833e:	f001 f85f 	bl	9400 <cc2400_status>
    8342:	06c3      	lsls	r3, r0, #27
    8344:	d5fb      	bpl.n	833e <cc2400_repeater+0x9a>
			USRLED_SET;
    8346:	2302      	movs	r3, #2
    8348:	603b      	str	r3, [r7, #0]
			for (i = 0; i < len; i++)
    834a:	2500      	movs	r5, #0
				buf[i] = cc2400_get8(FIFOREG);
    834c:	2070      	movs	r0, #112	; 0x70
    834e:	f000 ffbb 	bl	92c8 <cc2400_get8>
    8352:	f80d 0005 	strb.w	r0, [sp, r5]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    8356:	3501      	adds	r5, #1
    8358:	2d16      	cmp	r5, #22
    835a:	d1f7      	bne.n	834c <cc2400_repeater+0xa8>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    835c:	f001 f850 	bl	9400 <cc2400_status>
    8360:	0705      	lsls	r5, r0, #28
    8362:	d5df      	bpl.n	8324 <cc2400_repeater+0x80>
				break;
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
		USRLED_CLR;
    8364:	2302      	movs	r3, #2
    8366:	6023      	str	r3, [r4, #0]
		RXLED_CLR;
    8368:	2310      	movs	r3, #16
    836a:	6023      	str	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
    836c:	2064      	movs	r0, #100	; 0x64
    836e:	f001 f84e 	bl	940e <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8372:	f001 f845 	bl	9400 <cc2400_status>
    8376:	0740      	lsls	r0, r0, #29
    8378:	d4fb      	bmi.n	8372 <cc2400_repeater+0xce>
		while (!(cc2400_status() & XOSC16M_STABLE));
    837a:	f001 f841 	bl	9400 <cc2400_status>
    837e:	0641      	lsls	r1, r0, #25
    8380:	d5fb      	bpl.n	837a <cc2400_repeater+0xd6>
		cc2400_set(FSDIV, *chan_ptr);
    8382:	f8b8 1000 	ldrh.w	r1, [r8]
    8386:	2002      	movs	r0, #2
    8388:	b289      	uxth	r1, r1
    838a:	f000 ff98 	bl	92be <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    838e:	f001 f837 	bl	9400 <cc2400_status>
    8392:	0642      	lsls	r2, r0, #25
    8394:	d5fb      	bpl.n	838e <cc2400_repeater+0xea>
		cc2400_strobe(SFSON);
    8396:	2061      	movs	r0, #97	; 0x61
    8398:	f001 f839 	bl	940e <cc2400_strobe>
		TXLED_SET;
    839c:	f44f 7380 	mov.w	r3, #256	; 0x100
    83a0:	6033      	str	r3, [r6, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    83a2:	2315      	movs	r3, #21
    83a4:	f88d 3000 	strb.w	r3, [sp]
		buf[1] = 1; // reply
    83a8:	2301      	movs	r3, #1
    83aa:	f88d 3001 	strb.w	r3, [sp, #1]
    83ae:	2500      	movs	r5, #0
    83b0:	b2ee      	uxtb	r6, r5
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
    83b2:	f046 0108 	orr.w	r1, r6, #8
    83b6:	2005      	movs	r0, #5
    83b8:	f000 ff81 	bl	92be <cc2400_set>
			buf[20] = pa;
    83bc:	f88d 6014 	strb.w	r6, [sp, #20]
			for (i = 0; i < 16; i++) {
    83c0:	2600      	movs	r6, #0
				buf[21] = i;
    83c2:	f88d 6015 	strb.w	r6, [sp, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    83c6:	200e      	movs	r0, #14
    83c8:	f000 ff70 	bl	92ac <cc2400_get>
    83cc:	f000 001f 	and.w	r0, r0, #31
    83d0:	280f      	cmp	r0, #15
    83d2:	d1f8      	bne.n	83c6 <cc2400_repeater+0x122>
    83d4:	2700      	movs	r7, #0
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
    83d6:	f81d 1007 	ldrb.w	r1, [sp, r7]
    83da:	2070      	movs	r0, #112	; 0x70
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
    83dc:	3701      	adds	r7, #1
					cc2400_set8(FIFOREG, buf[j]);
    83de:	f000 ff7c 	bl	92da <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
    83e2:	2f16      	cmp	r7, #22
    83e4:	d1f7      	bne.n	83d6 <cc2400_repeater+0x132>
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    83e6:	2063      	movs	r0, #99	; 0x63
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    83e8:	3601      	adds	r6, #1
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    83ea:	f001 f810 	bl	940e <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    83ee:	2e10      	cmp	r6, #16
    83f0:	d1e7      	bne.n	83c2 <cc2400_repeater+0x11e>
    83f2:	3501      	adds	r5, #1
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    83f4:	2d08      	cmp	r5, #8
    83f6:	d1db      	bne.n	83b0 <cc2400_repeater+0x10c>
				for (j = 0; j < len; j++)
					cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    83f8:	f44f 7380 	mov.w	r3, #256	; 0x100
    83fc:	6023      	str	r3, [r4, #0]
		cc2400_strobe(SRFOFF);
    83fe:	2064      	movs	r0, #100	; 0x64
    8400:	f001 f805 	bl	940e <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8404:	f000 fffc 	bl	9400 <cc2400_status>
    8408:	0743      	lsls	r3, r0, #29
    840a:	d4fb      	bmi.n	8404 <cc2400_repeater+0x160>
    840c:	e74e      	b.n	82ac <cc2400_repeater+0x8>
    840e:	bf00      	nop
    8410:	2009c03c 	.word	0x2009c03c
    8414:	2009c038 	.word	0x2009c038
    8418:	2009c058 	.word	0x2009c058

0000841c <cc2400_txtest>:
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    841c:	b538      	push	{r3, r4, r5, lr}
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    841e:	7803      	ldrb	r3, [r0, #0]
	}
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    8420:	460d      	mov	r5, r1
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    8422:	b123      	cbz	r3, 842e <cc2400_txtest+0x12>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    8424:	7803      	ldrb	r3, [r0, #0]
    8426:	2b01      	cmp	r3, #1
    8428:	d12f      	bne.n	848a <cc2400_txtest+0x6e>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    842a:	2440      	movs	r4, #64	; 0x40
    842c:	e000      	b.n	8430 <cc2400_txtest+0x14>
void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    842e:	2429      	movs	r4, #41	; 0x29
		mdmctrl = 0x0040; // 250 kHz frequency deviation
	} else {
		/* oops */
		return;
	}
	cc2400_set(LMTST,   0x2b22);
    8430:	2012      	movs	r0, #18
    8432:	f642 3122 	movw	r1, #11042	; 0x2b22
    8436:	f000 ff42 	bl	92be <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    843a:	2014      	movs	r0, #20
    843c:	f243 314b 	movw	r1, #13131	; 0x334b
    8440:	f000 ff3d 	bl	92be <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    8444:	2020      	movs	r0, #32
    8446:	f640 51f1 	movw	r1, #3569	; 0xdf1
    844a:	f000 ff38 	bl	92be <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    844e:	8829      	ldrh	r1, [r5, #0]
    8450:	2002      	movs	r0, #2
    8452:	b289      	uxth	r1, r1
    8454:	f000 ff33 	bl	92be <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    8458:	2003      	movs	r0, #3
    845a:	4621      	mov	r1, r4
    845c:	f000 ff2f 	bl	92be <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8460:	f000 ffce 	bl	9400 <cc2400_status>
    8464:	0642      	lsls	r2, r0, #25
    8466:	d5fb      	bpl.n	8460 <cc2400_txtest+0x44>
	cc2400_strobe(SFSON);
    8468:	2061      	movs	r0, #97	; 0x61
    846a:	f000 ffd0 	bl	940e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    846e:	f000 ffc7 	bl	9400 <cc2400_status>
    8472:	0743      	lsls	r3, r0, #29
    8474:	d5fb      	bpl.n	846e <cc2400_txtest+0x52>
	TXLED_SET;
    8476:	4b05      	ldr	r3, [pc, #20]	; (848c <cc2400_txtest+0x70>)
    8478:	f44f 7280 	mov.w	r2, #256	; 0x100
    847c:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    847e:	2063      	movs	r0, #99	; 0x63
    8480:	f000 ffc5 	bl	940e <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8484:	4b02      	ldr	r3, [pc, #8]	; (8490 <cc2400_txtest+0x74>)
    8486:	2280      	movs	r2, #128	; 0x80
    8488:	601a      	str	r2, [r3, #0]
    848a:	bd38      	pop	{r3, r4, r5, pc}
    848c:	2009c038 	.word	0x2009c038
    8490:	2009c058 	.word	0x2009c058

00008494 <ssp_stop>:
	DIO_SSEL_CLR;
}

static void ssp_stop() {
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    8494:	4b04      	ldr	r3, [pc, #16]	; (84a8 <ssp_stop+0x14>)
    8496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    849a:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    849c:	4a03      	ldr	r2, [pc, #12]	; (84ac <ssp_stop+0x18>)
    849e:	6813      	ldr	r3, [r2, #0]
    84a0:	f023 0302 	bic.w	r3, r3, #2
    84a4:	6013      	str	r3, [r2, #0]
    84a6:	4770      	bx	lr
    84a8:	2009c098 	.word	0x2009c098
    84ac:	40030004 	.word	0x40030004

000084b0 <do_rx>:
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);

	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
    84b0:	1e43      	subs	r3, r0, #1
    84b2:	3023      	adds	r0, #35	; 0x23
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    84b4:	4a05      	ldr	r2, [pc, #20]	; (84cc <do_rx+0x1c>)
    84b6:	6812      	ldr	r2, [r2, #0]
    84b8:	0752      	lsls	r2, r2, #29
    84ba:	d5fb      	bpl.n	84b4 <do_rx+0x4>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    84bc:	4a04      	ldr	r2, [pc, #16]	; (84d0 <do_rx+0x20>)
    84be:	6812      	ldr	r2, [r2, #0]
    84c0:	f803 2f01 	strb.w	r2, [r3, #1]!
	cc2400_strobe(SRX);
}

static void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    84c4:	4283      	cmp	r3, r0
    84c6:	d1f5      	bne.n	84b4 <do_rx+0x4>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    84c8:	4770      	bx	lr
    84ca:	bf00      	nop
    84cc:	4003000c 	.word	0x4003000c
    84d0:	40030008 	.word	0x40030008

000084d4 <sleep_ms>:
static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
}

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    84d4:	b510      	push	{r4, lr}
	state->sleep_start = CLK100NS;
    84d6:	f640 4435 	movw	r4, #3125	; 0xc35
    84da:	4b07      	ldr	r3, [pc, #28]	; (84f8 <sleep_ms+0x24>)
    84dc:	681a      	ldr	r2, [r3, #0]
    84de:	4b07      	ldr	r3, [pc, #28]	; (84fc <sleep_ms+0x28>)
    84e0:	f3c2 0213 	ubfx	r2, r2, #0, #20
    84e4:	681b      	ldr	r3, [r3, #0]
    84e6:	fb04 3302 	mla	r3, r4, r2, r3
    84ea:	6083      	str	r3, [r0, #8]
	state->sleep_duration = duration * 1000*10;
    84ec:	f242 7310 	movw	r3, #10000	; 0x2710
    84f0:	4359      	muls	r1, r3
    84f2:	60c1      	str	r1, [r0, #12]
    84f4:	bd10      	pop	{r4, pc}
    84f6:	bf00      	nop
    84f8:	1000124c 	.word	0x1000124c
    84fc:	40004008 	.word	0x40004008

00008500 <sleep_elapsed>:
	state->sleep_start = state->anchor;
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
    8500:	f640 4135 	movw	r1, #3125	; 0xc35
    8504:	4b0a      	ldr	r3, [pc, #40]	; (8530 <sleep_elapsed+0x30>)
    8506:	681a      	ldr	r2, [r3, #0]
    8508:	4b0a      	ldr	r3, [pc, #40]	; (8534 <sleep_elapsed+0x34>)
    850a:	f3c2 0213 	ubfx	r2, r2, #0, #20
    850e:	681b      	ldr	r3, [r3, #0]
    8510:	fb01 3302 	mla	r3, r1, r2, r3
	if (now < state->sleep_start)
    8514:	6882      	ldr	r2, [r0, #8]
		now += 3276800000;
	return (now - state->sleep_start) >= state->sleep_duration;
    8516:	68c0      	ldr	r0, [r0, #12]
	state->sleep_duration = duration * 1000*10;
}

static inline int sleep_elapsed(ego_fsm_state_t *state) {
	u32 now = CLK100NS;
	if (now < state->sleep_start)
    8518:	4293      	cmp	r3, r2
		now += 3276800000;
    851a:	bf3c      	itt	cc
    851c:	f103 4343 	addcc.w	r3, r3, #3271557120	; 0xc3000000
    8520:	f503 03a0 	addcc.w	r3, r3, #5242880	; 0x500000
	return (now - state->sleep_start) >= state->sleep_duration;
    8524:	1a9b      	subs	r3, r3, r2
}
    8526:	4283      	cmp	r3, r0
    8528:	bf34      	ite	cc
    852a:	2000      	movcc	r0, #0
    852c:	2001      	movcs	r0, #1
    852e:	4770      	bx	lr
    8530:	1000124c 	.word	0x1000124c
    8534:	40004008 	.word	0x40004008

00008538 <nop_state>:

/////////////
// states

// do nothing
static void nop_state(ego_fsm_state_t *state) {
    8538:	4770      	bx	lr
    853a:	0000      	movs	r0, r0

0000853c <init_state>:
}

// used in follow and jam mode, override the channel supplied by user
static void init_state(ego_fsm_state_t *state) {
	state->channel_index = 0;
	channel = channels[state->channel_index];
    853c:	f640 1268 	movw	r2, #2408	; 0x968
static void nop_state(ego_fsm_state_t *state) {
}

// used in follow and jam mode, override the channel supplied by user
static void init_state(ego_fsm_state_t *state) {
	state->channel_index = 0;
    8540:	2300      	movs	r3, #0
    8542:	6043      	str	r3, [r0, #4]
	channel = channels[state->channel_index];
    8544:	4b02      	ldr	r3, [pc, #8]	; (8550 <init_state+0x14>)
    8546:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    8548:	2301      	movs	r3, #1
    854a:	7003      	strb	r3, [r0, #0]
    854c:	4770      	bx	lr
    854e:	bf00      	nop
    8550:	10000448 	.word	0x10000448

00008554 <continuous_init_state>:
	}
}

// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
    8554:	2301      	movs	r3, #1
    8556:	7003      	strb	r3, [r0, #0]
    8558:	4770      	bx	lr
    855a:	0000      	movs	r0, r0

0000855c <start_rf_state>:
	state->channel_index = 0;
	channel = channels[state->channel_index];
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
    855c:	b510      	push	{r4, lr}
	ssp_stop(); // TODO disable SSP
	ICER0 = ICER0_ICE_USB;
}

static void rf_on(void) {
	cc2400_set(MANAND,  0x7fff);
    855e:	f647 71ff 	movw	r1, #32767	; 0x7fff
	state->channel_index = 0;
	channel = channels[state->channel_index];
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
    8562:	4604      	mov	r4, r0
	ssp_stop(); // TODO disable SSP
	ICER0 = ICER0_ICE_USB;
}

static void rf_on(void) {
	cc2400_set(MANAND,  0x7fff);
    8564:	200d      	movs	r0, #13
    8566:	f000 feaa 	bl	92be <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    856a:	2012      	movs	r0, #18
    856c:	f642 3122 	movw	r1, #11042	; 0x2b22
    8570:	f000 fea5 	bl	92be <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    8574:	2014      	movs	r0, #20
    8576:	f241 314b 	movw	r1, #4939	; 0x134b
    857a:	f000 fea0 	bl	92be <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    857e:	2020      	movs	r0, #32
    8580:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    8584:	f000 fe9b 	bl	92be <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    8588:	4b1d      	ldr	r3, [pc, #116]	; (8600 <start_rf_state+0xa4>)
    858a:	2002      	movs	r0, #2
    858c:	8819      	ldrh	r1, [r3, #0]
    858e:	3901      	subs	r1, #1
    8590:	b289      	uxth	r1, r1
    8592:	f000 fe94 	bl	92be <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    8596:	2003      	movs	r0, #3
    8598:	2126      	movs	r1, #38	; 0x26
    859a:	f000 fe90 	bl	92be <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    859e:	2021      	movs	r0, #33	; 0x21
    85a0:	2103      	movs	r1, #3
    85a2:	f000 fe8c 	bl	92be <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    85a6:	202d      	movs	r0, #45	; 0x2d
    85a8:	f246 310f 	movw	r1, #25359	; 0x630f
    85ac:	f000 fe87 	bl	92be <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    85b0:	202c      	movs	r0, #44	; 0x2c
    85b2:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    85b6:	f000 fe82 	bl	92be <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    85ba:	f000 ff21 	bl	9400 <cc2400_status>
    85be:	0642      	lsls	r2, r0, #25
    85c0:	d5fb      	bpl.n	85ba <start_rf_state+0x5e>
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    85c2:	4b10      	ldr	r3, [pc, #64]	; (8604 <start_rf_state+0xa8>)
    85c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    85c8:	490f      	ldr	r1, [pc, #60]	; (8608 <start_rf_state+0xac>)
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    85ca:	601a      	str	r2, [r3, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    85cc:	680b      	ldr	r3, [r1, #0]

	while (!(cc2400_status() & XOSC16M_STABLE));

	ssp_start();

	cc2400_strobe(SFSON);
    85ce:	2061      	movs	r0, #97	; 0x61
static void ssp_start(void) {
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    85d0:	f043 0302 	orr.w	r3, r3, #2
    85d4:	600b      	str	r3, [r1, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    85d6:	4b0d      	ldr	r3, [pc, #52]	; (860c <start_rf_state+0xb0>)
    85d8:	601a      	str	r2, [r3, #0]

	while (!(cc2400_status() & XOSC16M_STABLE));

	ssp_start();

	cc2400_strobe(SFSON);
    85da:	f000 ff18 	bl	940e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    85de:	f000 ff0f 	bl	9400 <cc2400_status>
    85e2:	0743      	lsls	r3, r0, #29
    85e4:	d5fb      	bpl.n	85de <start_rf_state+0x82>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    85e6:	200e      	movs	r0, #14
    85e8:	f000 fe60 	bl	92ac <cc2400_get>
    85ec:	f000 001f 	and.w	r0, r0, #31
    85f0:	280f      	cmp	r0, #15
    85f2:	d1f8      	bne.n	85e6 <start_rf_state+0x8a>

	cc2400_strobe(SRX);
    85f4:	2062      	movs	r0, #98	; 0x62
    85f6:	f000 ff0a 	bl	940e <cc2400_strobe>
	state->state = EGO_ST_START_RX;
}

static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
    85fa:	2302      	movs	r3, #2
    85fc:	7023      	strb	r3, [r4, #0]
    85fe:	bd10      	pop	{r4, pc}
    8600:	10000448 	.word	0x10000448
    8604:	2009c098 	.word	0x2009c098
    8608:	40030004 	.word	0x40030004
    860c:	2009c09c 	.word	0x2009c09c

00008610 <start_jamming_state>:
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    8610:	b510      	push	{r4, lr}
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    8612:	f647 71ff 	movw	r1, #32767	; 0x7fff
		cc2400_strobe(SRFOFF);
		ssp_stop();
	}
}

static void start_jamming_state(ego_fsm_state_t *state) {
    8616:	4604      	mov	r4, r0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    8618:	200d      	movs	r0, #13
    861a:	f000 fe50 	bl	92be <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    861e:	2012      	movs	r0, #18
    8620:	f642 3122 	movw	r1, #11042	; 0x2b22
    8624:	f000 fe4b 	bl	92be <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    8628:	2014      	movs	r0, #20
    862a:	f243 314b 	movw	r1, #13131	; 0x334b
    862e:	f000 fe46 	bl	92be <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    8632:	2020      	movs	r0, #32
    8634:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    8638:	f000 fe41 	bl	92be <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    863c:	4b1a      	ldr	r3, [pc, #104]	; (86a8 <start_jamming_state+0x98>)
    863e:	2002      	movs	r0, #2
    8640:	8819      	ldrh	r1, [r3, #0]
    8642:	b289      	uxth	r1, r1
    8644:	f000 fe3b 	bl	92be <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    8648:	2003      	movs	r0, #3
    864a:	2126      	movs	r1, #38	; 0x26
    864c:	f000 fe37 	bl	92be <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    8650:	2021      	movs	r0, #33	; 0x21
    8652:	2103      	movs	r1, #3
    8654:	f000 fe33 	bl	92be <cc2400_set>
	cc2400_set(FREND, 0xf);
    8658:	2005      	movs	r0, #5
    865a:	210f      	movs	r1, #15
    865c:	f000 fe2f 	bl	92be <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8660:	f000 fece 	bl	9400 <cc2400_status>
    8664:	0642      	lsls	r2, r0, #25
    8666:	d5fb      	bpl.n	8660 <start_jamming_state+0x50>

	cc2400_strobe(SFSON);
    8668:	2061      	movs	r0, #97	; 0x61
    866a:	f000 fed0 	bl	940e <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    866e:	f000 fec7 	bl	9400 <cc2400_status>
    8672:	0743      	lsls	r3, r0, #29
    8674:	d5fb      	bpl.n	866e <start_jamming_state+0x5e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8676:	200e      	movs	r0, #14
    8678:	f000 fe18 	bl	92ac <cc2400_get>
    867c:	f000 001f 	and.w	r0, r0, #31
    8680:	280f      	cmp	r0, #15
    8682:	d1f8      	bne.n	8676 <start_jamming_state+0x66>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8684:	4b09      	ldr	r3, [pc, #36]	; (86ac <start_jamming_state+0x9c>)
    8686:	2280      	movs	r2, #128	; 0x80
    8688:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    868a:	2063      	movs	r0, #99	; 0x63
    868c:	f000 febf 	bl	940e <cc2400_strobe>
	TXLED_SET;
    8690:	4b07      	ldr	r3, [pc, #28]	; (86b0 <start_jamming_state+0xa0>)
    8692:	f44f 7280 	mov.w	r2, #256	; 0x100
    8696:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    8698:	2305      	movs	r3, #5
    869a:	7023      	strb	r3, [r4, #0]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    869c:	69a3      	ldr	r3, [r4, #24]
    869e:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    86a0:	f644 6320 	movw	r3, #20000	; 0x4e20
    86a4:	60e3      	str	r3, [r4, #12]
    86a6:	bd10      	pop	{r4, pc}
    86a8:	10000448 	.word	0x10000448
    86ac:	2009c058 	.word	0x2009c058
    86b0:	2009c038 	.word	0x2009c038

000086b4 <sleep_state>:
		ssp_stop();
		state->timer_active = 1;
	}
}

static void sleep_state(ego_fsm_state_t *state) {
    86b4:	b510      	push	{r4, lr}
    86b6:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    86b8:	f7ff ff22 	bl	8500 <sleep_elapsed>
    86bc:	b1c0      	cbz	r0, 86f0 <sleep_state+0x3c>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    86be:	6863      	ldr	r3, [r4, #4]
		channel = channels[state->channel_index];

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    86c0:	4620      	mov	r0, r4
}

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    86c2:	1c5a      	adds	r2, r3, #1
    86c4:	4b0b      	ldr	r3, [pc, #44]	; (86f4 <sleep_state+0x40>)
		channel = channels[state->channel_index];

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    86c6:	2107      	movs	r1, #7
}

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    86c8:	4013      	ands	r3, r2
    86ca:	2b00      	cmp	r3, #0
    86cc:	bfbc      	itt	lt
    86ce:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
    86d2:	f063 0303 	ornlt	r3, r3, #3
		channel = channels[state->channel_index];
    86d6:	4a08      	ldr	r2, [pc, #32]	; (86f8 <sleep_state+0x44>)
}

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    86d8:	bfb8      	it	lt
    86da:	3301      	addlt	r3, #1
		channel = channels[state->channel_index];
    86dc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
}

static void sleep_state(ego_fsm_state_t *state) {
	if (sleep_elapsed(state)) {
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    86e0:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    86e2:	4b06      	ldr	r3, [pc, #24]	; (86fc <sleep_state+0x48>)
    86e4:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    86e6:	f7ff fef5 	bl	84d4 <sleep_ms>
		state->timer_active = 1;
    86ea:	2301      	movs	r3, #1
    86ec:	6123      	str	r3, [r4, #16]

		state->state = EGO_ST_START_RX;
    86ee:	7023      	strb	r3, [r4, #0]
    86f0:	bd10      	pop	{r4, pc}
    86f2:	bf00      	nop
    86f4:	80000003 	.word	0x80000003
    86f8:	0000afd0 	.word	0x0000afd0
    86fc:	10000448 	.word	0x10000448

00008700 <jam_sleep_state>:
		state->state = EGO_ST_SLEEP;
		sleep_ms_anchor(state, 6);
	}
}

static void jam_sleep_state(ego_fsm_state_t *state) {
    8700:	b510      	push	{r4, lr}
    8702:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    8704:	f7ff fefc 	bl	8500 <sleep_elapsed>
    8708:	b130      	cbz	r0, 8718 <jam_sleep_state+0x18>
		state->state = EGO_ST_START_RX;
    870a:	2301      	movs	r3, #1
    870c:	7023      	strb	r3, [r4, #0]
		state->timer_active = 1;
    870e:	6123      	str	r3, [r4, #16]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    8710:	69a3      	ldr	r3, [r4, #24]
    8712:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    8714:	4b01      	ldr	r3, [pc, #4]	; (871c <jam_sleep_state+0x1c>)
    8716:	60e3      	str	r3, [r4, #12]
    8718:	bd10      	pop	{r4, pc}
    871a:	bf00      	nop
    871c:	0001adb0 	.word	0x0001adb0

00008720 <jamming_state>:

	state->state = EGO_ST_JAMMING;
	sleep_ms_anchor(state, 2);
}

void jamming_state(ego_fsm_state_t *state) {
    8720:	b510      	push	{r4, lr}
    8722:	4604      	mov	r4, r0
	if (sleep_elapsed(state)) {
    8724:	f7ff feec 	bl	8500 <sleep_elapsed>
    8728:	b310      	cbz	r0, 8770 <jamming_state+0x50>
		cc2400_strobe(SRFOFF);
    872a:	2064      	movs	r0, #100	; 0x64
    872c:	f000 fe6f 	bl	940e <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    8730:	4b10      	ldr	r3, [pc, #64]	; (8774 <jamming_state+0x54>)
    8732:	2280      	movs	r2, #128	; 0x80
    8734:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    8736:	f44f 7280 	mov.w	r2, #256	; 0x100
    873a:	f843 2c20 	str.w	r2, [r3, #-32]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    873e:	6863      	ldr	r3, [r4, #4]
    8740:	1c5a      	adds	r2, r3, #1
    8742:	4b0d      	ldr	r3, [pc, #52]	; (8778 <jamming_state+0x58>)
    8744:	4013      	ands	r3, r2
    8746:	2b00      	cmp	r3, #0
    8748:	bfbc      	itt	lt
    874a:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
    874e:	f063 0303 	ornlt	r3, r3, #3
		channel = channels[state->channel_index];
    8752:	4a0a      	ldr	r2, [pc, #40]	; (877c <jamming_state+0x5c>)
		PAEN_CLR;
#endif
		TXLED_CLR;

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    8754:	bfb8      	it	lt
    8756:	3301      	addlt	r3, #1
		channel = channels[state->channel_index];
    8758:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
		PAEN_CLR;
#endif
		TXLED_CLR;

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    875c:	6063      	str	r3, [r4, #4]
		channel = channels[state->channel_index];
    875e:	4b08      	ldr	r3, [pc, #32]	; (8780 <jamming_state+0x60>)
    8760:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    8762:	2303      	movs	r3, #3
    8764:	7023      	strb	r3, [r4, #0]
	state->sleep_duration = duration * 1000*10;
}

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
	state->sleep_start = state->anchor;
    8766:	69a3      	ldr	r3, [r4, #24]
    8768:	60a3      	str	r3, [r4, #8]
	state->sleep_duration = duration * 1000*10;
    876a:	f64e 2360 	movw	r3, #60000	; 0xea60
    876e:	60e3      	str	r3, [r4, #12]
    8770:	bd10      	pop	{r4, pc}
    8772:	bf00      	nop
    8774:	2009c05c 	.word	0x2009c05c
    8778:	80000003 	.word	0x80000003
    877c:	0000afd0 	.word	0x0000afd0
    8780:	10000448 	.word	0x10000448

00008784 <continuous_cap_state>:
// continuous cap states (reuses START_RX state)
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

static void continuous_cap_state(ego_fsm_state_t *state) {
    8784:	b510      	push	{r4, lr}
    8786:	b08a      	sub	sp, #40	; 0x28
	ego_packet_t packet = {
    8788:	2100      	movs	r1, #0
    878a:	2228      	movs	r2, #40	; 0x28
    878c:	4668      	mov	r0, sp
    878e:	f7fb fd33 	bl	41f8 <memset>
		.rxtime = CLK100NS,
    8792:	f640 4135 	movw	r1, #3125	; 0xc35
    8796:	4b16      	ldr	r3, [pc, #88]	; (87f0 <continuous_cap_state+0x6c>)
    8798:	681a      	ldr	r2, [r3, #0]
    879a:	4b16      	ldr	r3, [pc, #88]	; (87f4 <continuous_cap_state+0x70>)
    879c:	f3c2 0213 	ubfx	r2, r2, #0, #20
    87a0:	681b      	ldr	r3, [r3, #0]
    87a2:	fb01 3302 	mla	r3, r1, r2, r3
static void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

static void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    87a6:	9309      	str	r3, [sp, #36]	; 0x24
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    87a8:	f000 fe2a 	bl	9400 <cc2400_status>
static void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    87ac:	06c2      	lsls	r2, r0, #27
    87ae:	d51d      	bpl.n	87ec <continuous_cap_state+0x68>
		RXLED_SET;
    87b0:	4b11      	ldr	r3, [pc, #68]	; (87f8 <continuous_cap_state+0x74>)
    87b2:	2410      	movs	r4, #16
    87b4:	601c      	str	r4, [r3, #0]
		do_rx(&packet);
    87b6:	4668      	mov	r0, sp
    87b8:	f7ff fe7a 	bl	84b0 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    87bc:	2006      	movs	r0, #6
    87be:	4669      	mov	r1, sp
    87c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    87c2:	f7fc fbcb 	bl	4f5c <enqueue_with_ts>
		RXLED_CLR;
    87c6:	4b0d      	ldr	r3, [pc, #52]	; (87fc <continuous_cap_state+0x78>)

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    87c8:	2061      	movs	r0, #97	; 0x61

	if (sync_received()) {
		RXLED_SET;
		do_rx(&packet);
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
		RXLED_CLR;
    87ca:	601c      	str	r4, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    87cc:	f000 fe1f 	bl	940e <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    87d0:	f000 fe16 	bl	9400 <cc2400_status>
    87d4:	0743      	lsls	r3, r0, #29
    87d6:	d5fb      	bpl.n	87d0 <continuous_cap_state+0x4c>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    87d8:	200e      	movs	r0, #14
    87da:	f000 fd67 	bl	92ac <cc2400_get>
    87de:	f000 001f 	and.w	r0, r0, #31
    87e2:	280f      	cmp	r0, #15
    87e4:	d1f8      	bne.n	87d8 <continuous_cap_state+0x54>
		cc2400_strobe(SRX);
    87e6:	2062      	movs	r0, #98	; 0x62
    87e8:	f000 fe11 	bl	940e <cc2400_strobe>
	}
}
    87ec:	b00a      	add	sp, #40	; 0x28
    87ee:	bd10      	pop	{r4, pc}
    87f0:	1000124c 	.word	0x1000124c
    87f4:	40004008 	.word	0x40004008
    87f8:	2009c038 	.word	0x2009c038
    87fc:	2009c03c 	.word	0x2009c03c

00008800 <jam_cap_state>:

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
    8800:	b510      	push	{r4, lr}
    8802:	4604      	mov	r4, r0
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    8804:	f000 fdfc 	bl	9400 <cc2400_status>
	}
}

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
	if (sync_received()) {
    8808:	06c3      	lsls	r3, r0, #27
    880a:	d50e      	bpl.n	882a <jam_cap_state+0x2a>
		state->state = EGO_ST_START_JAMMING;
		state->packet_observed = 1;
		state->anchor = CLK100NS;
    880c:	f640 4135 	movw	r1, #3125	; 0xc35
}

// jammer states
static void jam_cap_state(ego_fsm_state_t *state) {
	if (sync_received()) {
		state->state = EGO_ST_START_JAMMING;
    8810:	2304      	movs	r3, #4
    8812:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 1;
    8814:	2301      	movs	r3, #1
    8816:	6163      	str	r3, [r4, #20]
		state->anchor = CLK100NS;
    8818:	4b10      	ldr	r3, [pc, #64]	; (885c <jam_cap_state+0x5c>)
    881a:	681a      	ldr	r2, [r3, #0]
    881c:	4b10      	ldr	r3, [pc, #64]	; (8860 <jam_cap_state+0x60>)
    881e:	f3c2 0213 	ubfx	r2, r2, #0, #20
    8822:	681b      	ldr	r3, [r3, #0]
    8824:	fb01 3302 	mla	r3, r1, r2, r3
    8828:	61a3      	str	r3, [r4, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    882a:	6923      	ldr	r3, [r4, #16]
    882c:	b15b      	cbz	r3, 8846 <jam_cap_state+0x46>
    882e:	4620      	mov	r0, r4
    8830:	f7ff fe66 	bl	8500 <sleep_elapsed>
    8834:	b138      	cbz	r0, 8846 <jam_cap_state+0x46>
		state->state = EGO_ST_START_JAMMING;
    8836:	2304      	movs	r3, #4
    8838:	7023      	strb	r3, [r4, #0]
		state->packet_observed = 0;
    883a:	2300      	movs	r3, #0
    883c:	6163      	str	r3, [r4, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    883e:	4620      	mov	r0, r4
    8840:	210b      	movs	r1, #11
    8842:	f7ff fe47 	bl	84d4 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    8846:	7823      	ldrb	r3, [r4, #0]
    8848:	2b02      	cmp	r3, #2
    884a:	d006      	beq.n	885a <jam_cap_state+0x5a>
		cc2400_strobe(SRFOFF);
    884c:	2064      	movs	r0, #100	; 0x64
    884e:	f000 fdde 	bl	940e <cc2400_strobe>
		ssp_stop();
	}
}
    8852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
		cc2400_strobe(SRFOFF);
		ssp_stop();
    8856:	f7ff be1d 	b.w	8494 <ssp_stop>
    885a:	bd10      	pop	{r4, pc}
    885c:	1000124c 	.word	0x1000124c
    8860:	40004008 	.word	0x40004008

00008864 <cap_state>:
static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
    8864:	b530      	push	{r4, r5, lr}
    8866:	b08b      	sub	sp, #44	; 0x2c
	ego_packet_t packet = {
    8868:	2100      	movs	r1, #0
static void start_rf_state(ego_fsm_state_t *state) {
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
    886a:	4604      	mov	r4, r0
	ego_packet_t packet = {
    886c:	2228      	movs	r2, #40	; 0x28
    886e:	4668      	mov	r0, sp
    8870:	f7fb fcc2 	bl	41f8 <memset>
		.rxtime = CLK100NS,
    8874:	f640 4135 	movw	r1, #3125	; 0xc35
    8878:	4b1a      	ldr	r3, [pc, #104]	; (88e4 <cap_state+0x80>)
	};

	if (sleep_elapsed(state)) {
    887a:	4620      	mov	r0, r4
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
		.rxtime = CLK100NS,
    887c:	681a      	ldr	r2, [r3, #0]
    887e:	4b1a      	ldr	r3, [pc, #104]	; (88e8 <cap_state+0x84>)
    8880:	f3c2 0213 	ubfx	r2, r2, #0, #20
    8884:	681b      	ldr	r3, [r3, #0]
    8886:	fb01 3302 	mla	r3, r1, r2, r3
	rf_on();
	state->state = EGO_ST_CAP;
}

static void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    888a:	9309      	str	r3, [sp, #36]	; 0x24
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    888c:	f7ff fe38 	bl	8500 <sleep_elapsed>
    8890:	b128      	cbz	r0, 889e <cap_state+0x3a>
		sleep_ms(state, 4);
    8892:	4620      	mov	r0, r4
    8894:	2104      	movs	r1, #4
    8896:	f7ff fe1d 	bl	84d4 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    889a:	2303      	movs	r3, #3
    889c:	7023      	strb	r3, [r4, #0]
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}

static inline int sync_received(void) {
	return cc2400_status() & SYNC_RECEIVED;
    889e:	f000 fdaf 	bl	9400 <cc2400_status>
	if (sleep_elapsed(state)) {
		sleep_ms(state, 4);
		state->state = EGO_ST_SLEEP;
	}

	if (sync_received()) {
    88a2:	06c3      	lsls	r3, r0, #27
    88a4:	d512      	bpl.n	88cc <cap_state+0x68>
		RXLED_SET;
    88a6:	4b11      	ldr	r3, [pc, #68]	; (88ec <cap_state+0x88>)
    88a8:	2510      	movs	r5, #16
    88aa:	601d      	str	r5, [r3, #0]
		do_rx(&packet);
    88ac:	4668      	mov	r0, sp
    88ae:	f7ff fdff 	bl	84b0 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    88b2:	4669      	mov	r1, sp
    88b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    88b6:	2006      	movs	r0, #6
    88b8:	f7fc fb50 	bl	4f5c <enqueue_with_ts>
		RXLED_CLR;
    88bc:	4b0c      	ldr	r3, [pc, #48]	; (88f0 <cap_state+0x8c>)

		sleep_ms(state, 6);
    88be:	4620      	mov	r0, r4

	if (sync_received()) {
		RXLED_SET;
		do_rx(&packet);
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
		RXLED_CLR;
    88c0:	601d      	str	r5, [r3, #0]

		sleep_ms(state, 6);
    88c2:	2106      	movs	r1, #6
    88c4:	f7ff fe06 	bl	84d4 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    88c8:	2303      	movs	r3, #3
    88ca:	7023      	strb	r3, [r4, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    88cc:	7823      	ldrb	r3, [r4, #0]
    88ce:	2b02      	cmp	r3, #2
    88d0:	d006      	beq.n	88e0 <cap_state+0x7c>
		cc2400_strobe(SRFOFF);
    88d2:	2064      	movs	r0, #100	; 0x64
    88d4:	f000 fd9b 	bl	940e <cc2400_strobe>
		ssp_stop();
    88d8:	f7ff fddc 	bl	8494 <ssp_stop>
		state->timer_active = 1;
    88dc:	2301      	movs	r3, #1
    88de:	6123      	str	r3, [r4, #16]
	}
}
    88e0:	b00b      	add	sp, #44	; 0x2c
    88e2:	bd30      	pop	{r4, r5, pc}
    88e4:	1000124c 	.word	0x1000124c
    88e8:	40004008 	.word	0x40004008
    88ec:	2009c038 	.word	0x2009c038
    88f0:	2009c03c 	.word	0x2009c03c

000088f4 <ego_main>:
		state->timer_active = 1;
		sleep_ms_anchor(state, 11);
	}
}

void ego_main(ego_mode_t mode) {
    88f4:	b530      	push	{r4, r5, lr}
    88f6:	b089      	sub	sp, #36	; 0x24
    88f8:	4604      	mov	r4, r0
	const ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    88fa:	2100      	movs	r1, #0
    88fc:	a801      	add	r0, sp, #4
    88fe:	221c      	movs	r2, #28
    8900:	f7fb fc7a 	bl	41f8 <memset>
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    8904:	2c01      	cmp	r4, #1
    8906:	4d14      	ldr	r5, [pc, #80]	; (8958 <ego_main+0x64>)
    8908:	d005      	beq.n	8916 <ego_main+0x22>
    890a:	d306      	bcc.n	891a <ego_main+0x26>
    890c:	2c02      	cmp	r4, #2
    890e:	d006      	beq.n	891e <ego_main+0x2a>
		case EGO_JAM:
			handler = jam_handler;
			break;
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    8910:	2300      	movs	r3, #0
    8912:	702b      	strb	r3, [r5, #0]
    8914:	e01d      	b.n	8952 <ego_main+0x5e>
	switch (mode) {
		case EGO_FOLLOW:
			handler = follow_handler;
			break;
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    8916:	4c11      	ldr	r4, [pc, #68]	; (895c <ego_main+0x68>)
    8918:	e002      	b.n	8920 <ego_main+0x2c>
		jamming_state,
	};

	switch (mode) {
		case EGO_FOLLOW:
			handler = follow_handler;
    891a:	4c11      	ldr	r4, [pc, #68]	; (8960 <ego_main+0x6c>)
    891c:	e000      	b.n	8920 <ego_main+0x2c>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
			break;
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    891e:	4c11      	ldr	r4, [pc, #68]	; (8964 <ego_main+0x70>)
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
}

static void ego_init(void) {
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    8920:	4b11      	ldr	r3, [pc, #68]	; (8968 <ego_main+0x74>)
    8922:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8926:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    8928:	f000 fc3a 	bl	91a0 <dio_ssp_init>
	}

	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
    892c:	782b      	ldrb	r3, [r5, #0]
    892e:	2b0d      	cmp	r3, #13
    8930:	d106      	bne.n	8940 <ego_main+0x4c>
			break;
		handler[state.state](&state);
    8932:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8936:	a801      	add	r0, sp, #4
    8938:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    893c:	4798      	blx	r3
	}
    893e:	e7f5      	b.n	892c <ego_main+0x38>

	dio_ssp_init();
}

static void ego_deinit(void) {
	cc2400_strobe(SRFOFF);
    8940:	2064      	movs	r0, #100	; 0x64
    8942:	f000 fd64 	bl	940e <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    8946:	f7ff fda5 	bl	8494 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    894a:	4b08      	ldr	r3, [pc, #32]	; (896c <ego_main+0x78>)
    894c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8950:	601a      	str	r2, [r3, #0]
			break;
		handler[state.state](&state);
	}

	ego_deinit();
}
    8952:	b009      	add	sp, #36	; 0x24
    8954:	bd30      	pop	{r4, r5, pc}
    8956:	bf00      	nop
    8958:	10000a36 	.word	0x10000a36
    895c:	0000aff4 	.word	0x0000aff4
    8960:	0000afd8 	.word	0x0000afd8
    8964:	0000b00c 	.word	0x0000b00c
    8968:	e000e100 	.word	0xe000e100
    896c:	e000e180 	.word	0xe000e180

00008970 <debug_uart_init>:
int debug_dma_active = 0;
char debug_buffer[256];

void debug_uart_init(int flow_control) {
	// power on UART1 peripheral
	PCONP |= PCONP_PCUART1;
    8970:	4a27      	ldr	r2, [pc, #156]	; (8a10 <debug_uart_init+0xa0>)

	// 8N1, enable access to divisor latches
	U1LCR = 0b10000011;

	// divisor: 11, fractional: 3/13. final baud: 115,411
	U1DLL = 11;
    8972:	210b      	movs	r1, #11
int debug_dma_active = 0;
char debug_buffer[256];

void debug_uart_init(int flow_control) {
	// power on UART1 peripheral
	PCONP |= PCONP_PCUART1;
    8974:	6813      	ldr	r3, [r2, #0]
    8976:	f043 0310 	orr.w	r3, r3, #16
    897a:	6013      	str	r3, [r2, #0]

	// 8N1, enable access to divisor latches
	U1LCR = 0b10000011;
    897c:	4b25      	ldr	r3, [pc, #148]	; (8a14 <debug_uart_init+0xa4>)
    897e:	2283      	movs	r2, #131	; 0x83
    8980:	601a      	str	r2, [r3, #0]

	// divisor: 11, fractional: 3/13. final baud: 115,411
	U1DLL = 11;
    8982:	4a25      	ldr	r2, [pc, #148]	; (8a18 <debug_uart_init+0xa8>)
    8984:	3304      	adds	r3, #4
    8986:	6011      	str	r1, [r2, #0]
	U1DLM = 0;
    8988:	2100      	movs	r1, #0
    898a:	6051      	str	r1, [r2, #4]
	U1FDR = (3 << 0) | (13 << 4);
    898c:	21d3      	movs	r1, #211	; 0xd3
    898e:	6291      	str	r1, [r2, #40]	; 0x28

	// block access to divisor latches
	U1LCR &= ~0b10000000;
    8990:	f853 2c04 	ldr.w	r2, [r3, #-4]
    8994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    8998:	f843 2c04 	str.w	r2, [r3, #-4]

	// enable auto RTS/CTS
	if (flow_control)
    899c:	b110      	cbz	r0, 89a4 <debug_uart_init+0x34>
		U1MCR = 0b11000000;
    899e:	22c0      	movs	r2, #192	; 0xc0
    89a0:	601a      	str	r2, [r3, #0]
    89a2:	e000      	b.n	89a6 <debug_uart_init+0x36>
	else
		U1MCR = 0;
    89a4:	6018      	str	r0, [r3, #0]

	// enable FIFO and DMA
	U1FCR = 0b1001;
    89a6:	4b1d      	ldr	r3, [pc, #116]	; (8a1c <debug_uart_init+0xac>)
    89a8:	2209      	movs	r2, #9
    89aa:	601a      	str	r2, [r3, #0]

	// set P0.15 as TXD1, with pullup
	PINSEL0  = (PINSEL0  & ~(0b11 << 30)) | (0b01 << 30);
    89ac:	4a1c      	ldr	r2, [pc, #112]	; (8a20 <debug_uart_init+0xb0>)
    89ae:	6813      	ldr	r3, [r2, #0]
	PINMODE0 = (PINMODE0 & ~(0b11 << 30)) | (0b00 << 30);

	// set P0.16 as RXD1, with pullup
	PINSEL1  = (PINSEL1  & ~(0b11 <<  0)) | (0b01 <<  0);
    89b0:	3204      	adds	r2, #4

	// enable FIFO and DMA
	U1FCR = 0b1001;

	// set P0.15 as TXD1, with pullup
	PINSEL0  = (PINSEL0  & ~(0b11 << 30)) | (0b01 << 30);
    89b2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    89b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    89ba:	f842 3c04 	str.w	r3, [r2, #-4]
	PINMODE0 = (PINMODE0 & ~(0b11 << 30)) | (0b00 << 30);
    89be:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    89c0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
    89c4:	63d3      	str	r3, [r2, #60]	; 0x3c

	// set P0.16 as RXD1, with pullup
	PINSEL1  = (PINSEL1  & ~(0b11 <<  0)) | (0b01 <<  0);
    89c6:	6813      	ldr	r3, [r2, #0]
    89c8:	f023 0303 	bic.w	r3, r3, #3
    89cc:	f043 0301 	orr.w	r3, r3, #1
    89d0:	6013      	str	r3, [r2, #0]
	PINMODE1 = (PINMODE1 & ~(0b11 <<  0)) | (0b00 <<  0);
    89d2:	4b14      	ldr	r3, [pc, #80]	; (8a24 <debug_uart_init+0xb4>)
    89d4:	6819      	ldr	r1, [r3, #0]
    89d6:	f021 0103 	bic.w	r1, r1, #3
    89da:	6019      	str	r1, [r3, #0]

	if (flow_control) {
    89dc:	b1b8      	cbz	r0, 8a0e <debug_uart_init+0x9e>
		// set P0.17 as CTS1, no pullup/down
		PINSEL1  = (PINSEL1  & ~(0b11 <<  2)) | (0b01 <<  2);
    89de:	6811      	ldr	r1, [r2, #0]
    89e0:	f021 010c 	bic.w	r1, r1, #12
    89e4:	f041 0104 	orr.w	r1, r1, #4
    89e8:	6011      	str	r1, [r2, #0]
		PINMODE1 = (PINMODE1 & ~(0b11 <<  2)) | (0b10 <<  2);
    89ea:	6819      	ldr	r1, [r3, #0]
    89ec:	f021 010c 	bic.w	r1, r1, #12
    89f0:	f041 0108 	orr.w	r1, r1, #8
    89f4:	6019      	str	r1, [r3, #0]

		// set P0.22 as RTS1, no pullup/down
		PINSEL1  = (PINSEL1  & ~(0b11 << 12)) | (0b01 << 12);
    89f6:	6811      	ldr	r1, [r2, #0]
    89f8:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
    89fc:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    8a00:	6011      	str	r1, [r2, #0]
		PINMODE1 = (PINMODE1 & ~(0b11 << 12)) | (0b10 << 12);
    8a02:	681a      	ldr	r2, [r3, #0]
    8a04:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    8a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    8a0c:	601a      	str	r2, [r3, #0]
    8a0e:	4770      	bx	lr
    8a10:	400fc0c4 	.word	0x400fc0c4
    8a14:	4001000c 	.word	0x4001000c
    8a18:	40010000 	.word	0x40010000
    8a1c:	40010008 	.word	0x40010008
    8a20:	4002c000 	.word	0x4002c000
    8a24:	4002c044 	.word	0x4002c044

00008a28 <debug_printf>:
			DMACCxConfig_ITC  ; // allow terminal count interrupts

	DMACC7Config |= 1;
}

void debug_printf(char *fmt, ...) {
    8a28:	b40f      	push	{r0, r1, r2, r3}
    8a2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	va_list ap;
	void *ret;

	// TODO warn user?
	if (debug_dma_active)
    8a2c:	4b13      	ldr	r3, [pc, #76]	; (8a7c <debug_printf+0x54>)
    8a2e:	681d      	ldr	r5, [r3, #0]
    8a30:	b9fd      	cbnz	r5, 8a72 <debug_printf+0x4a>
		return;
	debug_dma_active = 1;

	va_start(ap, fmt);
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    8a32:	4c13      	ldr	r4, [pc, #76]	; (8a80 <debug_printf+0x58>)
	void *ret;

	// TODO warn user?
	if (debug_dma_active)
		return;
	debug_dma_active = 1;
    8a34:	2201      	movs	r2, #1
    8a36:	601a      	str	r2, [r3, #0]

	va_start(ap, fmt);
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    8a38:	21ff      	movs	r1, #255	; 0xff
	// TODO warn user?
	if (debug_dma_active)
		return;
	debug_dma_active = 1;

	va_start(ap, fmt);
    8a3a:	ab07      	add	r3, sp, #28
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    8a3c:	9a06      	ldr	r2, [sp, #24]
    8a3e:	4620      	mov	r0, r4
	// TODO warn user?
	if (debug_dma_active)
		return;
	debug_dma_active = 1;

	va_start(ap, fmt);
    8a40:	9301      	str	r3, [sp, #4]
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
    8a42:	f000 faf5 	bl	9030 <tfp_vsnprintf>
	va_end(ap);
	debug_buffer[sizeof(debug_buffer) - 1] = 0;

	size_t len = strlen(debug_buffer);
    8a46:	4620      	mov	r0, r4
	debug_dma_active = 1;

	va_start(ap, fmt);
	tfp_vsnprintf(debug_buffer, sizeof(debug_buffer) - 1, fmt, ap);
	va_end(ap);
	debug_buffer[sizeof(debug_buffer) - 1] = 0;
    8a48:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff

	size_t len = strlen(debug_buffer);
    8a4c:	f001 fd52 	bl	a4f4 <strlen>
		U1THR = str[i];
	}
}

static void debug_send_dma(size_t size) {
	DMACC7SrcAddr = (uint32_t)debug_buffer;
    8a50:	4b0c      	ldr	r3, [pc, #48]	; (8a84 <debug_printf+0x5c>)
	DMACC7DestAddr = (uint32_t)&U1THR;
    8a52:	4a0d      	ldr	r2, [pc, #52]	; (8a88 <debug_printf+0x60>)
		U1THR = str[i];
	}
}

static void debug_send_dma(size_t size) {
	DMACC7SrcAddr = (uint32_t)debug_buffer;
    8a54:	601c      	str	r4, [r3, #0]
	DMACC7DestAddr = (uint32_t)&U1THR;
    8a56:	605a      	str	r2, [r3, #4]
			(size & 0xfff)   | // transfer size
			(0b000 << 12)    | // source burst: 1 byte
			(0b000 << 15)    | // dest burst: 1 byte
			DMACCxControl_SI | // source increment
			DMACCxControl_I  ; // terminal count interrupt enable
	DMACC7Config =
    8a58:	f64c 2280 	movw	r2, #51840	; 0xca80
	DMACC7SrcAddr = (uint32_t)debug_buffer;
	DMACC7DestAddr = (uint32_t)&U1THR;
	DMACC7LLI = 0;
	DMACC7Control =
			(size & 0xfff)   | // transfer size
			(0b000 << 12)    | // source burst: 1 byte
    8a5c:	f3c0 000b 	ubfx	r0, r0, #0, #12
			(0b000 << 15)    | // dest burst: 1 byte
			DMACCxControl_SI | // source increment
    8a60:	f040 4004 	orr.w	r0, r0, #2214592512	; 0x84000000
}

static void debug_send_dma(size_t size) {
	DMACC7SrcAddr = (uint32_t)debug_buffer;
	DMACC7DestAddr = (uint32_t)&U1THR;
	DMACC7LLI = 0;
    8a64:	609d      	str	r5, [r3, #8]
	DMACC7Control =
    8a66:	60d8      	str	r0, [r3, #12]
			(size & 0xfff)   | // transfer size
			(0b000 << 12)    | // source burst: 1 byte
			(0b000 << 15)    | // dest burst: 1 byte
			DMACCxControl_SI | // source increment
			DMACCxControl_I  ; // terminal count interrupt enable
	DMACC7Config =
    8a68:	611a      	str	r2, [r3, #16]
			(10 << 6)         | // UART1 TX
			(0b001 << 11)     | // memory to peripheral
			DMACCxConfig_IE   | // allow error interrupts
			DMACCxConfig_ITC  ; // allow terminal count interrupts

	DMACC7Config |= 1;
    8a6a:	691a      	ldr	r2, [r3, #16]
    8a6c:	f042 0201 	orr.w	r2, r2, #1
    8a70:	611a      	str	r2, [r3, #16]
	va_end(ap);
	debug_buffer[sizeof(debug_buffer) - 1] = 0;

	size_t len = strlen(debug_buffer);
	debug_send_dma(len);
}
    8a72:	b003      	add	sp, #12
    8a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    8a78:	b004      	add	sp, #16
    8a7a:	4770      	bx	lr
    8a7c:	10001188 	.word	0x10001188
    8a80:	10003a1e 	.word	0x10003a1e
    8a84:	500041e0 	.word	0x500041e0
    8a88:	40010000 	.word	0x40010000

00008a8c <ulli2a>:


#ifdef PRINTF_LONG_LONG_SUPPORT
static void _TFP_GCC_NO_INLINE_ ulli2a(
    unsigned long long int num, struct param *p)
{
    8a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a90:	4680      	mov	r8, r0
    8a92:	4689      	mov	r9, r1
    8a94:	4693      	mov	fp, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    8a96:	f8d2 a010 	ldr.w	sl, [r2, #16]
    while (num / d >= p->base)
    8a9a:	68d6      	ldr	r6, [r2, #12]
    8a9c:	2700      	movs	r7, #0
#ifdef PRINTF_LONG_LONG_SUPPORT
static void _TFP_GCC_NO_INLINE_ ulli2a(
    unsigned long long int num, struct param *p)
{
    int n = 0;
    unsigned long long int d = 1;
    8a9e:	2401      	movs	r4, #1
    8aa0:	2500      	movs	r5, #0
    char *bf = p->bf;
    while (num / d >= p->base)
    8aa2:	4640      	mov	r0, r8
    8aa4:	4649      	mov	r1, r9
    8aa6:	4622      	mov	r2, r4
    8aa8:	462b      	mov	r3, r5
    8aaa:	f001 f9a3 	bl	9df4 <__aeabi_uldivmod>
    8aae:	42b9      	cmp	r1, r7
    8ab0:	bf08      	it	eq
    8ab2:	42b0      	cmpeq	r0, r6
    8ab4:	d307      	bcc.n	8ac6 <ulli2a+0x3a>
        d *= p->base;
    8ab6:	fb04 f307 	mul.w	r3, r4, r7
    8aba:	fb06 3305 	mla	r3, r6, r5, r3
    8abe:	fba4 4506 	umull	r4, r5, r4, r6
    8ac2:	441d      	add	r5, r3
    8ac4:	e7ed      	b.n	8aa2 <ulli2a+0x16>
    unsigned long long int num, struct param *p)
{
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    while (num / d >= p->base)
    8ac6:	2600      	movs	r6, #0
        d *= p->base;
    while (d != 0) {
    8ac8:	ea54 0305 	orrs.w	r3, r4, r5
    8acc:	d031      	beq.n	8b32 <ulli2a+0xa6>
        int dgt = num / d;
    8ace:	4622      	mov	r2, r4
    8ad0:	462b      	mov	r3, r5
    8ad2:	4640      	mov	r0, r8
    8ad4:	4649      	mov	r1, r9
    8ad6:	f001 f98d 	bl	9df4 <__aeabi_uldivmod>
        num %= d;
    8ada:	4649      	mov	r1, r9
    8adc:	4622      	mov	r2, r4
    8ade:	462b      	mov	r3, r5
    unsigned long long int d = 1;
    char *bf = p->bf;
    while (num / d >= p->base)
        d *= p->base;
    while (d != 0) {
        int dgt = num / d;
    8ae0:	4607      	mov	r7, r0
        num %= d;
    8ae2:	4640      	mov	r0, r8
    8ae4:	f001 f986 	bl	9df4 <__aeabi_uldivmod>
        d /= p->base;
    8ae8:	4620      	mov	r0, r4
    8aea:	4629      	mov	r1, r5
    char *bf = p->bf;
    while (num / d >= p->base)
        d *= p->base;
    while (d != 0) {
        int dgt = num / d;
        num %= d;
    8aec:	4690      	mov	r8, r2
    8aee:	4699      	mov	r9, r3
        d /= p->base;
    8af0:	f8db 200c 	ldr.w	r2, [fp, #12]
    8af4:	2300      	movs	r3, #0
    8af6:	f001 f97d 	bl	9df4 <__aeabi_uldivmod>
    8afa:	4604      	mov	r4, r0
    8afc:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
    8afe:	b926      	cbnz	r6, 8b0a <ulli2a+0x7e>
    8b00:	2f00      	cmp	r7, #0
    8b02:	dc02      	bgt.n	8b0a <ulli2a+0x7e>
    8b04:	ea54 0305 	orrs.w	r3, r4, r5
    8b08:	d1de      	bne.n	8ac8 <ulli2a+0x3c>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    8b0a:	2f09      	cmp	r7, #9
    8b0c:	f10a 0101 	add.w	r1, sl, #1
    8b10:	b2fb      	uxtb	r3, r7
    8b12:	dd07      	ble.n	8b24 <ulli2a+0x98>
    8b14:	f89b 2000 	ldrb.w	r2, [fp]
    8b18:	f012 0f04 	tst.w	r2, #4
    8b1c:	bf14      	ite	ne
    8b1e:	2237      	movne	r2, #55	; 0x37
    8b20:	2257      	moveq	r2, #87	; 0x57
    8b22:	e000      	b.n	8b26 <ulli2a+0x9a>
    8b24:	2230      	movs	r2, #48	; 0x30
    8b26:	4413      	add	r3, r2
    8b28:	f88a 3000 	strb.w	r3, [sl]
            ++n;
    8b2c:	3601      	adds	r6, #1
    while (d != 0) {
        int dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    8b2e:	468a      	mov	sl, r1
    8b30:	e7ca      	b.n	8ac8 <ulli2a+0x3c>
            ++n;
        }
    }
    *bf = 0;
    8b32:	2300      	movs	r3, #0
    8b34:	f88a 3000 	strb.w	r3, [sl]
    8b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008b3c <uli2a>:
}
#endif

#ifdef PRINTF_LONG_SUPPORT
static void uli2a(unsigned long int num, struct param *p)
{
    8b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int n = 0;
    unsigned long int d = 1;
    char *bf = p->bf;
    8b3e:	690a      	ldr	r2, [r1, #16]
    while (num / d >= p->base)
    8b40:	68cc      	ldr	r4, [r1, #12]

#ifdef PRINTF_LONG_SUPPORT
static void uli2a(unsigned long int num, struct param *p)
{
    int n = 0;
    unsigned long int d = 1;
    8b42:	2301      	movs	r3, #1
    char *bf = p->bf;
    while (num / d >= p->base)
    8b44:	fbb0 f5f3 	udiv	r5, r0, r3
    8b48:	42a5      	cmp	r5, r4
    8b4a:	d301      	bcc.n	8b50 <uli2a+0x14>
        d *= p->base;
    8b4c:	4363      	muls	r3, r4
    8b4e:	e7f9      	b.n	8b44 <uli2a+0x8>
static void uli2a(unsigned long int num, struct param *p)
{
    int n = 0;
    unsigned long int d = 1;
    char *bf = p->bf;
    while (num / d >= p->base)
    8b50:	2500      	movs	r5, #0
        d *= p->base;
    while (d != 0) {
    8b52:	b1eb      	cbz	r3, 8b90 <uli2a+0x54>
        int dgt = num / d;
    8b54:	fbb0 f4f3 	udiv	r4, r0, r3
        num %= d;
        d /= p->base;
    8b58:	68ce      	ldr	r6, [r1, #12]
    char *bf = p->bf;
    while (num / d >= p->base)
        d *= p->base;
    while (d != 0) {
        int dgt = num / d;
        num %= d;
    8b5a:	fb03 0014 	mls	r0, r3, r4, r0
        d /= p->base;
    8b5e:	fbb3 f3f6 	udiv	r3, r3, r6
        if (n || dgt > 0 || d == 0) {
    8b62:	b91d      	cbnz	r5, 8b6c <uli2a+0x30>
    8b64:	2c00      	cmp	r4, #0
    8b66:	dc01      	bgt.n	8b6c <uli2a+0x30>
    8b68:	2b00      	cmp	r3, #0
    8b6a:	d1f2      	bne.n	8b52 <uli2a+0x16>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    8b6c:	2c09      	cmp	r4, #9
    8b6e:	f102 0701 	add.w	r7, r2, #1
    8b72:	b2e6      	uxtb	r6, r4
    8b74:	dd06      	ble.n	8b84 <uli2a+0x48>
    8b76:	780c      	ldrb	r4, [r1, #0]
    8b78:	f014 0f04 	tst.w	r4, #4
    8b7c:	bf14      	ite	ne
    8b7e:	2437      	movne	r4, #55	; 0x37
    8b80:	2457      	moveq	r4, #87	; 0x57
    8b82:	e000      	b.n	8b86 <uli2a+0x4a>
    8b84:	2430      	movs	r4, #48	; 0x30
    8b86:	4434      	add	r4, r6
    8b88:	7014      	strb	r4, [r2, #0]
            ++n;
    8b8a:	3501      	adds	r5, #1
    while (d != 0) {
        int dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    8b8c:	463a      	mov	r2, r7
    8b8e:	e7e0      	b.n	8b52 <uli2a+0x16>
            ++n;
        }
    }
    *bf = 0;
    8b90:	7013      	strb	r3, [r2, #0]
    8b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008b94 <ui2a>:
    uli2a(num, p);
}
#endif

static void ui2a(unsigned int num, struct param *p)
{
    8b94:	b5f0      	push	{r4, r5, r6, r7, lr}
    int n = 0;
    unsigned int d = 1;
    char *bf = p->bf;
    8b96:	690a      	ldr	r2, [r1, #16]
    while (num / d >= p->base)
    8b98:	68cc      	ldr	r4, [r1, #12]
#endif

static void ui2a(unsigned int num, struct param *p)
{
    int n = 0;
    unsigned int d = 1;
    8b9a:	2301      	movs	r3, #1
    char *bf = p->bf;
    while (num / d >= p->base)
    8b9c:	fbb0 f5f3 	udiv	r5, r0, r3
    8ba0:	42a5      	cmp	r5, r4
    8ba2:	d301      	bcc.n	8ba8 <ui2a+0x14>
        d *= p->base;
    8ba4:	4363      	muls	r3, r4
    8ba6:	e7f9      	b.n	8b9c <ui2a+0x8>
static void ui2a(unsigned int num, struct param *p)
{
    int n = 0;
    unsigned int d = 1;
    char *bf = p->bf;
    while (num / d >= p->base)
    8ba8:	2500      	movs	r5, #0
        d *= p->base;
    while (d != 0) {
    8baa:	b1eb      	cbz	r3, 8be8 <ui2a+0x54>
        int dgt = num / d;
    8bac:	fbb0 f4f3 	udiv	r4, r0, r3
        num %= d;
        d /= p->base;
    8bb0:	68ce      	ldr	r6, [r1, #12]
    char *bf = p->bf;
    while (num / d >= p->base)
        d *= p->base;
    while (d != 0) {
        int dgt = num / d;
        num %= d;
    8bb2:	fb03 0014 	mls	r0, r3, r4, r0
        d /= p->base;
    8bb6:	fbb3 f3f6 	udiv	r3, r3, r6
        if (n || dgt > 0 || d == 0) {
    8bba:	b91d      	cbnz	r5, 8bc4 <ui2a+0x30>
    8bbc:	2c00      	cmp	r4, #0
    8bbe:	dc01      	bgt.n	8bc4 <ui2a+0x30>
    8bc0:	2b00      	cmp	r3, #0
    8bc2:	d1f2      	bne.n	8baa <ui2a+0x16>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    8bc4:	2c09      	cmp	r4, #9
    8bc6:	f102 0701 	add.w	r7, r2, #1
    8bca:	b2e6      	uxtb	r6, r4
    8bcc:	dd06      	ble.n	8bdc <ui2a+0x48>
    8bce:	780c      	ldrb	r4, [r1, #0]
    8bd0:	f014 0f04 	tst.w	r4, #4
    8bd4:	bf14      	ite	ne
    8bd6:	2437      	movne	r4, #55	; 0x37
    8bd8:	2457      	moveq	r4, #87	; 0x57
    8bda:	e000      	b.n	8bde <ui2a+0x4a>
    8bdc:	2430      	movs	r4, #48	; 0x30
    8bde:	4434      	add	r4, r6
    8be0:	7014      	strb	r4, [r2, #0]
            ++n;
    8be2:	3501      	adds	r5, #1
    while (d != 0) {
        int dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    8be4:	463a      	mov	r2, r7
    8be6:	e7e0      	b.n	8baa <ui2a+0x16>
            ++n;
        }
    }
    *bf = 0;
    8be8:	7013      	strb	r3, [r2, #0]
    8bea:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008bec <putchw>:
    *nump = num;
    return ch;
}

static void putchw(void *putp, putcf putf, struct param *p)
{
    8bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bf0:	4606      	mov	r6, r0
    8bf2:	460f      	mov	r7, r1
    8bf4:	4615      	mov	r5, r2
    char ch;
    int n = p->width;
    8bf6:	6854      	ldr	r4, [r2, #4]
    char *bf = p->bf;
    8bf8:	6913      	ldr	r3, [r2, #16]

    /* Number of filling characters */
    while (*bf++ && n > 0)
    8bfa:	f813 2b01 	ldrb.w	r2, [r3], #1
    8bfe:	b91a      	cbnz	r2, 8c08 <putchw+0x1c>
        n--;
    if (p->sign)
    8c00:	7a2b      	ldrb	r3, [r5, #8]
    8c02:	b12b      	cbz	r3, 8c10 <putchw+0x24>
        n--;
    8c04:	3c01      	subs	r4, #1
    8c06:	e003      	b.n	8c10 <putchw+0x24>
    char ch;
    int n = p->width;
    char *bf = p->bf;

    /* Number of filling characters */
    while (*bf++ && n > 0)
    8c08:	2c00      	cmp	r4, #0
    8c0a:	ddf9      	ble.n	8c00 <putchw+0x14>
        n--;
    8c0c:	3c01      	subs	r4, #1
    8c0e:	e7f4      	b.n	8bfa <putchw+0xe>
    if (p->sign)
        n--;
    if (p->alt && p->base == 16)
    8c10:	782b      	ldrb	r3, [r5, #0]
    8c12:	0799      	lsls	r1, r3, #30
    8c14:	d508      	bpl.n	8c28 <putchw+0x3c>
    8c16:	68ea      	ldr	r2, [r5, #12]
    8c18:	2a10      	cmp	r2, #16
    8c1a:	d101      	bne.n	8c20 <putchw+0x34>
        n -= 2;
    8c1c:	3c02      	subs	r4, #2
    8c1e:	e003      	b.n	8c28 <putchw+0x3c>
    else if (p->alt && p->base == 8)
    8c20:	2a08      	cmp	r2, #8
        n--;
    8c22:	bf08      	it	eq
    8c24:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff

    /* Fill with space to align to the right, before alternate or sign */
    if (!p->lz && !p->align_left) {
    8c28:	f013 0f09 	tst.w	r3, #9
    8c2c:	d10e      	bne.n	8c4c <putchw+0x60>
    8c2e:	46a0      	mov	r8, r4
        while (n-- > 0)
    8c30:	f1b8 0f00 	cmp.w	r8, #0
    8c34:	dd05      	ble.n	8c42 <putchw+0x56>
            putf(putp, ' ');
    8c36:	4630      	mov	r0, r6
    8c38:	2120      	movs	r1, #32
    8c3a:	47b8      	blx	r7
    8c3c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    8c40:	e7f6      	b.n	8c30 <putchw+0x44>
    8c42:	1e63      	subs	r3, r4, #1
    8c44:	2c00      	cmp	r4, #0
    8c46:	bfb4      	ite	lt
    8c48:	461c      	movlt	r4, r3
    8c4a:	1b1c      	subge	r4, r3, r4
    }

    /* print sign */
    if (p->sign)
    8c4c:	7a29      	ldrb	r1, [r5, #8]
    8c4e:	b109      	cbz	r1, 8c54 <putchw+0x68>
        putf(putp, p->sign);
    8c50:	4630      	mov	r0, r6
    8c52:	47b8      	blx	r7

    /* Alternate */
    if (p->alt && p->base == 16) {
    8c54:	782b      	ldrb	r3, [r5, #0]
    8c56:	079a      	lsls	r2, r3, #30
    8c58:	d512      	bpl.n	8c80 <putchw+0x94>
    8c5a:	68eb      	ldr	r3, [r5, #12]
    8c5c:	2b10      	cmp	r3, #16
    8c5e:	d10a      	bne.n	8c76 <putchw+0x8a>
        putf(putp, '0');
    8c60:	2130      	movs	r1, #48	; 0x30
    8c62:	4630      	mov	r0, r6
    8c64:	47b8      	blx	r7
        putf(putp, (p->uc ? 'X' : 'x'));
    8c66:	782b      	ldrb	r3, [r5, #0]
    8c68:	4630      	mov	r0, r6
    8c6a:	f013 0f04 	tst.w	r3, #4
    8c6e:	bf14      	ite	ne
    8c70:	2158      	movne	r1, #88	; 0x58
    8c72:	2178      	moveq	r1, #120	; 0x78
    8c74:	e003      	b.n	8c7e <putchw+0x92>
    } else if (p->alt && p->base == 8) {
    8c76:	2b08      	cmp	r3, #8
    8c78:	d102      	bne.n	8c80 <putchw+0x94>
        putf(putp, '0');
    8c7a:	4630      	mov	r0, r6
    8c7c:	2130      	movs	r1, #48	; 0x30
    8c7e:	47b8      	blx	r7
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    8c80:	782b      	ldrb	r3, [r5, #0]
    8c82:	07db      	lsls	r3, r3, #31
    8c84:	d50e      	bpl.n	8ca4 <putchw+0xb8>
    8c86:	46a0      	mov	r8, r4
        while (n-- > 0)
    8c88:	f1b8 0f00 	cmp.w	r8, #0
    8c8c:	dd05      	ble.n	8c9a <putchw+0xae>
            putf(putp, '0');
    8c8e:	4630      	mov	r0, r6
    8c90:	2130      	movs	r1, #48	; 0x30
    8c92:	47b8      	blx	r7
    8c94:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    8c98:	e7f6      	b.n	8c88 <putchw+0x9c>
    8c9a:	1e63      	subs	r3, r4, #1
    8c9c:	2c00      	cmp	r4, #0
    8c9e:	bfb4      	ite	lt
    8ca0:	461c      	movlt	r4, r3
    8ca2:	1b1c      	subge	r4, r3, r4
    }

    /* Put actual buffer */
    bf = p->bf;
    8ca4:	f8d5 8010 	ldr.w	r8, [r5, #16]
    while ((ch = *bf++))
    8ca8:	f818 1b01 	ldrb.w	r1, [r8], #1
    8cac:	b111      	cbz	r1, 8cb4 <putchw+0xc8>
        putf(putp, ch);
    8cae:	4630      	mov	r0, r6
    8cb0:	47b8      	blx	r7
    8cb2:	e7f9      	b.n	8ca8 <putchw+0xbc>

    /* Fill with space to align to the left, after string */
    if (!p->lz && p->align_left) {
    8cb4:	782b      	ldrb	r3, [r5, #0]
    8cb6:	f003 0309 	and.w	r3, r3, #9
    8cba:	2b08      	cmp	r3, #8
    8cbc:	d106      	bne.n	8ccc <putchw+0xe0>
        while (n-- > 0)
    8cbe:	2c00      	cmp	r4, #0
    8cc0:	dd04      	ble.n	8ccc <putchw+0xe0>
            putf(putp, ' ');
    8cc2:	4630      	mov	r0, r6
    8cc4:	2120      	movs	r1, #32
    8cc6:	47b8      	blx	r7
    8cc8:	3c01      	subs	r4, #1
    8cca:	e7f8      	b.n	8cbe <putchw+0xd2>
    8ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008cd0 <_vsnprintf_putcf>:
};

static void _vsnprintf_putcf(void *p, char c)
{
  struct _vsnprintf_putcf_data *data = (struct _vsnprintf_putcf_data*)p;
  if (data->num_chars < data->dest_capacity)
    8cd0:	6883      	ldr	r3, [r0, #8]
    8cd2:	6802      	ldr	r2, [r0, #0]
    8cd4:	4293      	cmp	r3, r2
    data->dest[data->num_chars] = c;
    8cd6:	bf3c      	itt	cc
    8cd8:	6842      	ldrcc	r2, [r0, #4]
    8cda:	54d1      	strbcc	r1, [r2, r3]
  data->num_chars ++;
    8cdc:	6883      	ldr	r3, [r0, #8]
    8cde:	3301      	adds	r3, #1
    8ce0:	6083      	str	r3, [r0, #8]
    8ce2:	4770      	bx	lr

00008ce4 <tfp_format>:
            putf(putp, ' ');
    }
}

void tfp_format(void *putp, putcf putf, const char *fmt, va_list va)
{
    8ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8ce8:	b08d      	sub	sp, #52	; 0x34
    8cea:	4607      	mov	r7, r0
    8cec:	4688      	mov	r8, r1
    8cee:	461c      	mov	r4, r3
    char bf[23];  /* long = 64b on some architectures */
#else
    char bf[12];  /* int = 32b on some architectures */
#endif
    char ch;
    p.bf = bf;
    8cf0:	ae06      	add	r6, sp, #24
    8cf2:	9605      	str	r6, [sp, #20]

    while ((ch = *(fmt++))) {
    8cf4:	f892 9000 	ldrb.w	r9, [r2]
    8cf8:	1c55      	adds	r5, r2, #1
    8cfa:	f1b9 0f00 	cmp.w	r9, #0
    8cfe:	f000 8193 	beq.w	9028 <tfp_format+0x344>
        if (ch != '%') {
    8d02:	f1b9 0f25 	cmp.w	r9, #37	; 0x25
    8d06:	d008      	beq.n	8d1a <tfp_format+0x36>
			// Ubertooth-specific hack: turn \n into \r\n
			if (ch == '\n')
    8d08:	f1b9 0f0a 	cmp.w	r9, #10
    8d0c:	d102      	bne.n	8d14 <tfp_format+0x30>
				putf(putp, '\r');
    8d0e:	4638      	mov	r0, r7
    8d10:	210d      	movs	r1, #13
    8d12:	47c0      	blx	r8
            putf(putp, ch);
    8d14:	4638      	mov	r0, r7
    8d16:	4649      	mov	r1, r9
    8d18:	e13b      	b.n	8f92 <tfp_format+0x2ae>
        } else {
#ifdef PRINTF_LONG_SUPPORT
            char lng = 0;  /* 1 for long, 2 for long long */
#endif
            /* Init parameter struct */
            p.lz = 0;
    8d1a:	f89d 2004 	ldrb.w	r2, [sp, #4]
            p.alt = 0;
            p.width = 0;
    8d1e:	2300      	movs	r3, #0
            p.align_left = 0;
    8d20:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    8d24:	f363 02c3 	bfi	r2, r3, #3, #1
    8d28:	f88d 2004 	strb.w	r2, [sp, #4]
    8d2c:	b2d2      	uxtb	r2, r2
    8d2e:	f3c2 0ec0 	ubfx	lr, r2, #3, #1
    8d32:	f002 0001 	and.w	r0, r2, #1
            char lng = 0;  /* 1 for long, 2 for long long */
#endif
            /* Init parameter struct */
            p.lz = 0;
            p.alt = 0;
            p.width = 0;
    8d36:	9302      	str	r3, [sp, #8]
            p.align_left = 0;
            p.sign = 0;
    8d38:	f88d 300c 	strb.w	r3, [sp, #12]
    8d3c:	f3c2 0240 	ubfx	r2, r2, #1, #1

            /* Flags */
            while ((ch = *(fmt++))) {
    8d40:	f815 3b01 	ldrb.w	r3, [r5], #1
    8d44:	b163      	cbz	r3, 8d60 <tfp_format+0x7c>
                switch (ch) {
    8d46:	2b2d      	cmp	r3, #45	; 0x2d
    8d48:	d005      	beq.n	8d56 <tfp_format+0x72>
    8d4a:	2b30      	cmp	r3, #48	; 0x30
    8d4c:	d006      	beq.n	8d5c <tfp_format+0x78>
    8d4e:	2b23      	cmp	r3, #35	; 0x23
    8d50:	d106      	bne.n	8d60 <tfp_format+0x7c>
                    continue;
                case '0':
                    p.lz = 1;
                    continue;
                case '#':
                    p.alt = 1;
    8d52:	2201      	movs	r2, #1
                    continue;
    8d54:	e7f4      	b.n	8d40 <tfp_format+0x5c>

            /* Flags */
            while ((ch = *(fmt++))) {
                switch (ch) {
                case '-':
                    p.align_left = 1;
    8d56:	f04f 0e01 	mov.w	lr, #1
    8d5a:	e7f1      	b.n	8d40 <tfp_format+0x5c>
                    continue;
                case '0':
                    p.lz = 1;
    8d5c:	2001      	movs	r0, #1
    8d5e:	e7ef      	b.n	8d40 <tfp_format+0x5c>
    8d60:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8d64:	f36e 01c3 	bfi	r1, lr, #3, #1
    8d68:	f360 0100 	bfi	r1, r0, #0, #1
    8d6c:	f362 0141 	bfi	r1, r2, #1, #1
                }
                break;
            }

            /* Width */
            if (ch >= '0' && ch <= '9') {
    8d70:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    8d74:	2a09      	cmp	r2, #9
    8d76:	f88d 1004 	strb.w	r1, [sp, #4]
    8d7a:	d81b      	bhi.n	8db4 <tfp_format+0xd0>
    8d7c:	2100      	movs	r1, #0
    ui2a(num, p);
}

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
    8d7e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    8d82:	b2d0      	uxtb	r0, r2
    8d84:	2809      	cmp	r0, #9
    8d86:	d805      	bhi.n	8d94 <tfp_format+0xb0>
    unsigned int num = 0;
    int digit;
    while ((digit = a2d(ch)) >= 0) {
        if (digit > base)
            break;
        num = num * base + digit;
    8d88:	230a      	movs	r3, #10
    8d8a:	fb03 2101 	mla	r1, r3, r1, r2
        ch = *p++;
    8d8e:	f815 3b01 	ldrb.w	r3, [r5], #1
    8d92:	e7f4      	b.n	8d7e <tfp_format+0x9a>

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
    8d94:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    8d98:	2a05      	cmp	r2, #5
    8d9a:	d802      	bhi.n	8da2 <tfp_format+0xbe>
        return ch - 'a' + 10;
    8d9c:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
    8da0:	e005      	b.n	8dae <tfp_format+0xca>
    else if (ch >= 'A' && ch <= 'F')
    8da2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    8da6:	2a05      	cmp	r2, #5
    8da8:	d803      	bhi.n	8db2 <tfp_format+0xce>
        return ch - 'A' + 10;
    8daa:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
{
    const char *p = *src;
    unsigned int num = 0;
    int digit;
    while ((digit = a2d(ch)) >= 0) {
        if (digit > base)
    8dae:	2a0a      	cmp	r2, #10
    8db0:	ddea      	ble.n	8d88 <tfp_format+0xa4>
            break;
        num = num * base + digit;
        ch = *p++;
    }
    *src = p;
    *nump = num;
    8db2:	9102      	str	r1, [sp, #8]
            }

            /* We accept 'x.y' format but don't support it completely:
             * we ignore the 'y' digit => this ignores 0-fill
             * size and makes it == width (ie. 'x') */
            if (ch == '.') {
    8db4:	2b2e      	cmp	r3, #46	; 0x2e
    8db6:	d10b      	bne.n	8dd0 <tfp_format+0xec>
              p.lz = 1;  /* zero-padding */
    8db8:	f89d 3004 	ldrb.w	r3, [sp, #4]
    8dbc:	f043 0301 	orr.w	r3, r3, #1
    8dc0:	f88d 3004 	strb.w	r3, [sp, #4]
              /* ignore actual 0-fill size: */
              do {
                ch = *(fmt++);
    8dc4:	f815 3b01 	ldrb.w	r3, [r5], #1
              } while ((ch >= '0') && (ch <= '9'));
    8dc8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    8dcc:	2a09      	cmp	r2, #9
    8dce:	d9f9      	bls.n	8dc4 <tfp_format+0xe0>
            }

#ifdef PRINTF_SIZE_T_SUPPORT
# ifdef PRINTF_LONG_SUPPORT
            if (ch == 'z') {
    8dd0:	2b7a      	cmp	r3, #122	; 0x7a
    8dd2:	d101      	bne.n	8dd8 <tfp_format+0xf4>
                ch = *(fmt++);
    8dd4:	782b      	ldrb	r3, [r5, #0]
    8dd6:	e032      	b.n	8e3e <tfp_format+0x15a>
            } else
# endif
#endif

#ifdef PRINTF_LONG_SUPPORT
            if (ch == 'l') {
    8dd8:	2b6c      	cmp	r3, #108	; 0x6c
    8dda:	f040 808b 	bne.w	8ef4 <tfp_format+0x210>
                ch = *(fmt++);
    8dde:	782b      	ldrb	r3, [r5, #0]
                lng = 1;
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (ch == 'l') {
    8de0:	2b6c      	cmp	r3, #108	; 0x6c
    8de2:	d12c      	bne.n	8e3e <tfp_format+0x15a>
                  ch = *(fmt++);
    8de4:	786b      	ldrb	r3, [r5, #1]
    8de6:	f105 0902 	add.w	r9, r5, #2
                  lng = 2;
                }
#endif
            }
#endif
            switch (ch) {
    8dea:	2b69      	cmp	r3, #105	; 0x69
    8dec:	d047      	beq.n	8e7e <tfp_format+0x19a>
    8dee:	d811      	bhi.n	8e14 <tfp_format+0x130>
    8df0:	2b58      	cmp	r3, #88	; 0x58
    8df2:	f000 80d3 	beq.w	8f9c <tfp_format+0x2b8>
    8df6:	d807      	bhi.n	8e08 <tfp_format+0x124>
    8df8:	2b00      	cmp	r3, #0
    8dfa:	f000 8115 	beq.w	9028 <tfp_format+0x344>
    8dfe:	2b25      	cmp	r3, #37	; 0x25
    8e00:	f040 80c9 	bne.w	8f96 <tfp_format+0x2b2>
            if (ch == 'l') {
                ch = *(fmt++);
                lng = 1;
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (ch == 'l') {
                  ch = *(fmt++);
    8e04:	464d      	mov	r5, r9
    8e06:	e0c2      	b.n	8f8e <tfp_format+0x2aa>
                  lng = 2;
                }
#endif
            }
#endif
            switch (ch) {
    8e08:	2b63      	cmp	r3, #99	; 0x63
    8e0a:	f000 80a5 	beq.w	8f58 <tfp_format+0x274>
    8e0e:	2b64      	cmp	r3, #100	; 0x64
    8e10:	d035      	beq.n	8e7e <tfp_format+0x19a>
    8e12:	e0c0      	b.n	8f96 <tfp_format+0x2b2>
    8e14:	2b73      	cmp	r3, #115	; 0x73
    8e16:	f000 80a6 	beq.w	8f66 <tfp_format+0x282>
    8e1a:	d807      	bhi.n	8e2c <tfp_format+0x148>
    8e1c:	2b6f      	cmp	r3, #111	; 0x6f
    8e1e:	f000 808c 	beq.w	8f3a <tfp_format+0x256>
    8e22:	2b70      	cmp	r3, #112	; 0x70
    8e24:	f040 80b7 	bne.w	8f96 <tfp_format+0x2b2>
            if (ch == 'l') {
                ch = *(fmt++);
                lng = 1;
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (ch == 'l') {
                  ch = *(fmt++);
    8e28:	464d      	mov	r5, r9
    8e2a:	e06f      	b.n	8f0c <tfp_format+0x228>
                  lng = 2;
                }
#endif
            }
#endif
            switch (ch) {
    8e2c:	2b75      	cmp	r3, #117	; 0x75
    8e2e:	d003      	beq.n	8e38 <tfp_format+0x154>
    8e30:	2b78      	cmp	r3, #120	; 0x78
    8e32:	f000 80b3 	beq.w	8f9c <tfp_format+0x2b8>
    8e36:	e0ae      	b.n	8f96 <tfp_format+0x2b2>
            if (ch == 'l') {
                ch = *(fmt++);
                lng = 1;
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (ch == 'l') {
                  ch = *(fmt++);
    8e38:	464d      	mov	r5, r9
                  lng = 2;
    8e3a:	2302      	movs	r3, #2
    8e3c:	e00c      	b.n	8e58 <tfp_format+0x174>
                }
#endif
            }
#endif
            switch (ch) {
    8e3e:	2b69      	cmp	r3, #105	; 0x69
# endif
#endif

#ifdef PRINTF_LONG_SUPPORT
            if (ch == 'l') {
                ch = *(fmt++);
    8e40:	f105 0501 	add.w	r5, r5, #1
                  lng = 2;
                }
#endif
            }
#endif
            switch (ch) {
    8e44:	d027      	beq.n	8e96 <tfp_format+0x1b2>
    8e46:	d91d      	bls.n	8e84 <tfp_format+0x1a0>
    8e48:	2b73      	cmp	r3, #115	; 0x73
    8e4a:	f000 808d 	beq.w	8f68 <tfp_format+0x284>
    8e4e:	d959      	bls.n	8f04 <tfp_format+0x220>
    8e50:	2b75      	cmp	r3, #117	; 0x75
    8e52:	f040 80bb 	bne.w	8fcc <tfp_format+0x2e8>
    8e56:	2301      	movs	r3, #1
            case 0:
                goto abort;
            case 'u':
                p.base = 10;
    8e58:	220a      	movs	r2, #10
#ifdef PRINTF_LONG_SUPPORT
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (2 == lng)
    8e5a:	2b02      	cmp	r3, #2
#endif
            switch (ch) {
            case 0:
                goto abort;
            case 'u':
                p.base = 10;
    8e5c:	9204      	str	r2, [sp, #16]
#ifdef PRINTF_LONG_SUPPORT
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (2 == lng)
    8e5e:	d107      	bne.n	8e70 <tfp_format+0x18c>
                    ulli2a(va_arg(va, unsigned long long int), &p);
    8e60:	1de3      	adds	r3, r4, #7
    8e62:	f023 0307 	bic.w	r3, r3, #7
    8e66:	f103 0408 	add.w	r4, r3, #8
    8e6a:	e9d3 0100 	ldrd	r0, r1, [r3]
    8e6e:	e029      	b.n	8ec4 <tfp_format+0x1e0>
                else
#endif
                  if (1 == lng)
    8e70:	2b01      	cmp	r3, #1
                    uli2a(va_arg(va, unsigned long int), &p);
    8e72:	6820      	ldr	r0, [r4, #0]
    8e74:	a901      	add	r1, sp, #4
    8e76:	f104 0904 	add.w	r9, r4, #4
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (2 == lng)
                    ulli2a(va_arg(va, unsigned long long int), &p);
                else
#endif
                  if (1 == lng)
    8e7a:	d155      	bne.n	8f28 <tfp_format+0x244>
    8e7c:	e0b8      	b.n	8ff0 <tfp_format+0x30c>
            if (ch == 'l') {
                ch = *(fmt++);
                lng = 1;
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (ch == 'l') {
                  ch = *(fmt++);
    8e7e:	464d      	mov	r5, r9
                  lng = 2;
    8e80:	2302      	movs	r3, #2
    8e82:	e009      	b.n	8e98 <tfp_format+0x1b4>
                }
#endif
            }
#endif
            switch (ch) {
    8e84:	2b58      	cmp	r3, #88	; 0x58
    8e86:	f000 80a3 	beq.w	8fd0 <tfp_format+0x2ec>
    8e8a:	d97c      	bls.n	8f86 <tfp_format+0x2a2>
    8e8c:	2b63      	cmp	r3, #99	; 0x63
    8e8e:	d064      	beq.n	8f5a <tfp_format+0x276>
    8e90:	2b64      	cmp	r3, #100	; 0x64
    8e92:	f040 8081 	bne.w	8f98 <tfp_format+0x2b4>
    8e96:	2301      	movs	r3, #1
                    ui2a(va_arg(va, unsigned int), &p);
                putchw(putp, putf, &p);
                break;
            case 'd':
            case 'i':
                p.base = 10;
    8e98:	220a      	movs	r2, #10
#ifdef PRINTF_LONG_SUPPORT
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (2 == lng)
    8e9a:	2b02      	cmp	r3, #2
                    ui2a(va_arg(va, unsigned int), &p);
                putchw(putp, putf, &p);
                break;
            case 'd':
            case 'i':
                p.base = 10;
    8e9c:	9204      	str	r2, [sp, #16]
#ifdef PRINTF_LONG_SUPPORT
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (2 == lng)
    8e9e:	d115      	bne.n	8ecc <tfp_format+0x1e8>
                    lli2a(va_arg(va, long long int), &p);
    8ea0:	1de3      	adds	r3, r4, #7
    8ea2:	f023 0307 	bic.w	r3, r3, #7
    8ea6:	e9d3 0100 	ldrd	r0, r1, [r3]
    *bf = 0;
}

static void lli2a(long long int num, struct param *p)
{
    if (num < 0) {
    8eaa:	2800      	cmp	r0, #0
            case 'i':
                p.base = 10;
#ifdef PRINTF_LONG_SUPPORT
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (2 == lng)
                    lli2a(va_arg(va, long long int), &p);
    8eac:	f103 0408 	add.w	r4, r3, #8
    *bf = 0;
}

static void lli2a(long long int num, struct param *p)
{
    if (num < 0) {
    8eb0:	f171 0300 	sbcs.w	r3, r1, #0
    8eb4:	da06      	bge.n	8ec4 <tfp_format+0x1e0>
        num = -num;
    8eb6:	4240      	negs	r0, r0
        p->sign = '-';
    8eb8:	f04f 032d 	mov.w	r3, #45	; 0x2d
}

static void lli2a(long long int num, struct param *p)
{
    if (num < 0) {
        num = -num;
    8ebc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = '-';
    8ec0:	f88d 300c 	strb.w	r3, [sp, #12]
    }
    ulli2a(num, p);
    8ec4:	aa01      	add	r2, sp, #4
    8ec6:	f7ff fde1 	bl	8a8c <ulli2a>
    8eca:	e030      	b.n	8f2e <tfp_format+0x24a>
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (2 == lng)
                    lli2a(va_arg(va, long long int), &p);
                else
#endif
                  if (1 == lng)
    8ecc:	2b01      	cmp	r3, #1
                    li2a(va_arg(va, long int), &p);
    8ece:	6820      	ldr	r0, [r4, #0]
    8ed0:	f104 0904 	add.w	r9, r4, #4
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (2 == lng)
                    lli2a(va_arg(va, long long int), &p);
                else
#endif
                  if (1 == lng)
    8ed4:	d107      	bne.n	8ee6 <tfp_format+0x202>
    *bf = 0;
}

static void li2a(long num, struct param *p)
{
    if (num < 0) {
    8ed6:	2800      	cmp	r0, #0
        num = -num;
        p->sign = '-';
    8ed8:	bfbe      	ittt	lt
    8eda:	232d      	movlt	r3, #45	; 0x2d
}

static void li2a(long num, struct param *p)
{
    if (num < 0) {
        num = -num;
    8edc:	4240      	neglt	r0, r0
        p->sign = '-';
    8ede:	f88d 300c 	strblt.w	r3, [sp, #12]
    }
    uli2a(num, p);
    8ee2:	a901      	add	r1, sp, #4
    8ee4:	e084      	b.n	8ff0 <tfp_format+0x30c>
    *bf = 0;
}

static void i2a(int num, struct param *p)
{
    if (num < 0) {
    8ee6:	2800      	cmp	r0, #0
    8ee8:	da1d      	bge.n	8f26 <tfp_format+0x242>
        num = -num;
        p->sign = '-';
    8eea:	232d      	movs	r3, #45	; 0x2d
}

static void i2a(int num, struct param *p)
{
    if (num < 0) {
        num = -num;
    8eec:	4240      	negs	r0, r0
        p->sign = '-';
    8eee:	f88d 300c 	strb.w	r3, [sp, #12]
    8ef2:	e018      	b.n	8f26 <tfp_format+0x242>
                  lng = 2;
                }
#endif
            }
#endif
            switch (ch) {
    8ef4:	2b69      	cmp	r3, #105	; 0x69
    8ef6:	f000 8082 	beq.w	8ffe <tfp_format+0x31a>
    8efa:	d941      	bls.n	8f80 <tfp_format+0x29c>
    8efc:	2b73      	cmp	r3, #115	; 0x73
    8efe:	d033      	beq.n	8f68 <tfp_format+0x284>
    8f00:	f200 808e 	bhi.w	9020 <tfp_format+0x33c>
    8f04:	2b6f      	cmp	r3, #111	; 0x6f
    8f06:	d019      	beq.n	8f3c <tfp_format+0x258>
    8f08:	2b70      	cmp	r3, #112	; 0x70
    8f0a:	d145      	bne.n	8f98 <tfp_format+0x2b4>
                    i2a(va_arg(va, int), &p);
                putchw(putp, putf, &p);
                break;
#ifdef SIZEOF_POINTER
            case 'p':
                p.alt = 1;
    8f0c:	f89d 3004 	ldrb.w	r3, [sp, #4]
                lng = 2;
# endif
#endif
            case 'x':
            case 'X':
                p.base = 16;
    8f10:	2210      	movs	r2, #16
                p.uc = (ch == 'X')?1:0;
    8f12:	f043 0302 	orr.w	r3, r3, #2
    8f16:	f36f 0382 	bfc	r3, #2, #1
                lng = 2;
# endif
#endif
            case 'x':
            case 'X':
                p.base = 16;
    8f1a:	9204      	str	r2, [sp, #16]
                p.uc = (ch == 'X')?1:0;
    8f1c:	f88d 3004 	strb.w	r3, [sp, #4]
#endif
                  if (1 == lng)
                    uli2a(va_arg(va, unsigned long int), &p);
                else
#endif
                    ui2a(va_arg(va, unsigned int), &p);
    8f20:	6820      	ldr	r0, [r4, #0]
    8f22:	f104 0904 	add.w	r9, r4, #4
    8f26:	a901      	add	r1, sp, #4
    8f28:	f7ff fe34 	bl	8b94 <ui2a>
    8f2c:	464c      	mov	r4, r9
                putchw(putp, putf, &p);
    8f2e:	4638      	mov	r0, r7
    8f30:	4641      	mov	r1, r8
    8f32:	aa01      	add	r2, sp, #4
    8f34:	f7ff fe5a 	bl	8bec <putchw>
                break;
    8f38:	e02e      	b.n	8f98 <tfp_format+0x2b4>
            if (ch == 'l') {
                ch = *(fmt++);
                lng = 1;
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (ch == 'l') {
                  ch = *(fmt++);
    8f3a:	464d      	mov	r5, r9
#endif
                    ui2a(va_arg(va, unsigned int), &p);
                putchw(putp, putf, &p);
                break;
            case 'o':
                p.base = 8;
    8f3c:	2308      	movs	r3, #8
                ui2a(va_arg(va, unsigned int), &p);
    8f3e:	6820      	ldr	r0, [r4, #0]
    8f40:	a901      	add	r1, sp, #4
#endif
                    ui2a(va_arg(va, unsigned int), &p);
                putchw(putp, putf, &p);
                break;
            case 'o':
                p.base = 8;
    8f42:	9304      	str	r3, [sp, #16]
                ui2a(va_arg(va, unsigned int), &p);
    8f44:	f7ff fe26 	bl	8b94 <ui2a>
                putchw(putp, putf, &p);
    8f48:	4638      	mov	r0, r7
    8f4a:	4641      	mov	r1, r8
    8f4c:	aa01      	add	r2, sp, #4
                    ui2a(va_arg(va, unsigned int), &p);
                putchw(putp, putf, &p);
                break;
            case 'o':
                p.base = 8;
                ui2a(va_arg(va, unsigned int), &p);
    8f4e:	f104 0904 	add.w	r9, r4, #4
                putchw(putp, putf, &p);
    8f52:	f7ff fe4b 	bl	8bec <putchw>
    8f56:	e011      	b.n	8f7c <tfp_format+0x298>
            if (ch == 'l') {
                ch = *(fmt++);
                lng = 1;
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (ch == 'l') {
                  ch = *(fmt++);
    8f58:	464d      	mov	r5, r9
                p.base = 8;
                ui2a(va_arg(va, unsigned int), &p);
                putchw(putp, putf, &p);
                break;
            case 'c':
                putf(putp, (char)(va_arg(va, int)));
    8f5a:	4638      	mov	r0, r7
    8f5c:	7821      	ldrb	r1, [r4, #0]
    8f5e:	f104 0904 	add.w	r9, r4, #4
    8f62:	47c0      	blx	r8
    8f64:	e00a      	b.n	8f7c <tfp_format+0x298>
            if (ch == 'l') {
                ch = *(fmt++);
                lng = 1;
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (ch == 'l') {
                  ch = *(fmt++);
    8f66:	464d      	mov	r5, r9
                break;
            case 'c':
                putf(putp, (char)(va_arg(va, int)));
                break;
            case 's':
                p.bf = va_arg(va, char *);
    8f68:	6823      	ldr	r3, [r4, #0]
                putchw(putp, putf, &p);
    8f6a:	4638      	mov	r0, r7
    8f6c:	4641      	mov	r1, r8
    8f6e:	aa01      	add	r2, sp, #4
                break;
            case 'c':
                putf(putp, (char)(va_arg(va, int)));
                break;
            case 's':
                p.bf = va_arg(va, char *);
    8f70:	9305      	str	r3, [sp, #20]
    8f72:	f104 0904 	add.w	r9, r4, #4
                putchw(putp, putf, &p);
    8f76:	f7ff fe39 	bl	8bec <putchw>
                p.bf = bf;
    8f7a:	9605      	str	r6, [sp, #20]
                break;
            case 'c':
                putf(putp, (char)(va_arg(va, int)));
                break;
            case 's':
                p.bf = va_arg(va, char *);
    8f7c:	464c      	mov	r4, r9
                putchw(putp, putf, &p);
                p.bf = bf;
                break;
    8f7e:	e00b      	b.n	8f98 <tfp_format+0x2b4>
                  lng = 2;
                }
#endif
            }
#endif
            switch (ch) {
    8f80:	2b58      	cmp	r3, #88	; 0x58
    8f82:	d040      	beq.n	9006 <tfp_format+0x322>
    8f84:	d837      	bhi.n	8ff6 <tfp_format+0x312>
    8f86:	2b00      	cmp	r3, #0
    8f88:	d04e      	beq.n	9028 <tfp_format+0x344>
    8f8a:	2b25      	cmp	r3, #37	; 0x25
    8f8c:	d104      	bne.n	8f98 <tfp_format+0x2b4>
                p.bf = va_arg(va, char *);
                putchw(putp, putf, &p);
                p.bf = bf;
                break;
            case '%':
                putf(putp, ch);
    8f8e:	4638      	mov	r0, r7
    8f90:	2125      	movs	r1, #37	; 0x25
    8f92:	47c0      	blx	r8
    8f94:	e000      	b.n	8f98 <tfp_format+0x2b4>
            if (ch == 'l') {
                ch = *(fmt++);
                lng = 1;
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (ch == 'l') {
                  ch = *(fmt++);
    8f96:	464d      	mov	r5, r9
    8f98:	462a      	mov	r2, r5
    8f9a:	e6ab      	b.n	8cf4 <tfp_format+0x10>
# endif
#endif
            case 'x':
            case 'X':
                p.base = 16;
                p.uc = (ch == 'X')?1:0;
    8f9c:	f1a3 0058 	sub.w	r0, r3, #88	; 0x58
    8fa0:	4243      	negs	r3, r0
    8fa2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8fa6:	4143      	adcs	r3, r0
    8fa8:	f363 0182 	bfi	r1, r3, #2, #1
                lng = 2;
# endif
#endif
            case 'x':
            case 'X':
                p.base = 16;
    8fac:	2210      	movs	r2, #16
                p.uc = (ch == 'X')?1:0;
#ifdef PRINTF_LONG_SUPPORT
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (2 == lng)
                    ulli2a(va_arg(va, unsigned long long int), &p);
    8fae:	1de3      	adds	r3, r4, #7
    8fb0:	f023 0307 	bic.w	r3, r3, #7
                lng = 2;
# endif
#endif
            case 'x':
            case 'X':
                p.base = 16;
    8fb4:	9204      	str	r2, [sp, #16]
                p.uc = (ch == 'X')?1:0;
    8fb6:	aa0c      	add	r2, sp, #48	; 0x30
    8fb8:	f802 1d2c 	strb.w	r1, [r2, #-44]!
#ifdef PRINTF_LONG_SUPPORT
#ifdef PRINTF_LONG_LONG_SUPPORT
                if (2 == lng)
                    ulli2a(va_arg(va, unsigned long long int), &p);
    8fbc:	e9d3 0100 	ldrd	r0, r1, [r3]
    8fc0:	f103 0408 	add.w	r4, r3, #8
    8fc4:	464d      	mov	r5, r9
    8fc6:	f7ff fd61 	bl	8a8c <ulli2a>
    8fca:	e7b0      	b.n	8f2e <tfp_format+0x24a>
                  lng = 2;
                }
#endif
            }
#endif
            switch (ch) {
    8fcc:	2b78      	cmp	r3, #120	; 0x78
    8fce:	d1e3      	bne.n	8f98 <tfp_format+0x2b4>
# endif
#endif
            case 'x':
            case 'X':
                p.base = 16;
                p.uc = (ch == 'X')?1:0;
    8fd0:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
                lng = 2;
# endif
#endif
            case 'x':
            case 'X':
                p.base = 16;
    8fd4:	2210      	movs	r2, #16
                p.uc = (ch == 'X')?1:0;
    8fd6:	424b      	negs	r3, r1
                lng = 2;
# endif
#endif
            case 'x':
            case 'X':
                p.base = 16;
    8fd8:	9204      	str	r2, [sp, #16]
                p.uc = (ch == 'X')?1:0;
    8fda:	f89d 2004 	ldrb.w	r2, [sp, #4]
    8fde:	414b      	adcs	r3, r1
    8fe0:	f363 0282 	bfi	r2, r3, #2, #1
    8fe4:	a90c      	add	r1, sp, #48	; 0x30
                if (2 == lng)
                    ulli2a(va_arg(va, unsigned long long int), &p);
                else
#endif
                  if (1 == lng)
                    uli2a(va_arg(va, unsigned long int), &p);
    8fe6:	6820      	ldr	r0, [r4, #0]
# endif
#endif
            case 'x':
            case 'X':
                p.base = 16;
                p.uc = (ch == 'X')?1:0;
    8fe8:	f801 2d2c 	strb.w	r2, [r1, #-44]!
                if (2 == lng)
                    ulli2a(va_arg(va, unsigned long long int), &p);
                else
#endif
                  if (1 == lng)
                    uli2a(va_arg(va, unsigned long int), &p);
    8fec:	f104 0904 	add.w	r9, r4, #4
    8ff0:	f7ff fda4 	bl	8b3c <uli2a>
    8ff4:	e79a      	b.n	8f2c <tfp_format+0x248>
                  lng = 2;
                }
#endif
            }
#endif
            switch (ch) {
    8ff6:	2b63      	cmp	r3, #99	; 0x63
    8ff8:	d0af      	beq.n	8f5a <tfp_format+0x276>
    8ffa:	2b64      	cmp	r3, #100	; 0x64
    8ffc:	d1cc      	bne.n	8f98 <tfp_format+0x2b4>
			if (ch == '\n')
				putf(putp, '\r');
            putf(putp, ch);
        } else {
#ifdef PRINTF_LONG_SUPPORT
            char lng = 0;  /* 1 for long, 2 for long long */
    8ffe:	2300      	movs	r3, #0
    9000:	e74a      	b.n	8e98 <tfp_format+0x1b4>
                  lng = 2;
                }
#endif
            }
#endif
            switch (ch) {
    9002:	2b78      	cmp	r3, #120	; 0x78
    9004:	d1c8      	bne.n	8f98 <tfp_format+0x2b4>
                lng = 2;
# endif
#endif
            case 'x':
            case 'X':
                p.base = 16;
    9006:	2210      	movs	r2, #16
    9008:	9204      	str	r2, [sp, #16]
                p.uc = (ch == 'X')?1:0;
    900a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
    900e:	4253      	negs	r3, r2
    9010:	4153      	adcs	r3, r2
    9012:	f89d 2004 	ldrb.w	r2, [sp, #4]
    9016:	f363 0282 	bfi	r2, r3, #2, #1
    901a:	f88d 2004 	strb.w	r2, [sp, #4]
    901e:	e77f      	b.n	8f20 <tfp_format+0x23c>
                  lng = 2;
                }
#endif
            }
#endif
            switch (ch) {
    9020:	2b75      	cmp	r3, #117	; 0x75
    9022:	d1ee      	bne.n	9002 <tfp_format+0x31e>
			if (ch == '\n')
				putf(putp, '\r');
            putf(putp, ch);
        } else {
#ifdef PRINTF_LONG_SUPPORT
            char lng = 0;  /* 1 for long, 2 for long long */
    9024:	2300      	movs	r3, #0
    9026:	e717      	b.n	8e58 <tfp_format+0x174>
                break;
            }
        }
    }
 abort:;
}
    9028:	b00d      	add	sp, #52	; 0x34
    902a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    902e:	0000      	movs	r0, r0

00009030 <tfp_vsnprintf>:
    data->dest[data->num_chars] = c;
  data->num_chars ++;
}

int tfp_vsnprintf(char *str, size_t size, const char *format, va_list ap)
{
    9030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9032:	2400      	movs	r4, #0
  struct _vsnprintf_putcf_data data;

  if (size < 1)
    9034:	b181      	cbz	r1, 9058 <tfp_vsnprintf+0x28>
    return 0;

  data.dest = str;
  data.dest_capacity = size-1;
    9036:	3901      	subs	r1, #1
  struct _vsnprintf_putcf_data data;

  if (size < 1)
    return 0;

  data.dest = str;
    9038:	9002      	str	r0, [sp, #8]
  data.dest_capacity = size-1;
    903a:	9101      	str	r1, [sp, #4]
  data.num_chars = 0;
  tfp_format(&data, _vsnprintf_putcf, format, ap);
    903c:	a801      	add	r0, sp, #4
    903e:	4908      	ldr	r1, [pc, #32]	; (9060 <tfp_vsnprintf+0x30>)
  if (size < 1)
    return 0;

  data.dest = str;
  data.dest_capacity = size-1;
  data.num_chars = 0;
    9040:	9403      	str	r4, [sp, #12]
  tfp_format(&data, _vsnprintf_putcf, format, ap);
    9042:	f7ff fe4f 	bl	8ce4 <tfp_format>

  if (data.num_chars < data.dest_capacity)
    9046:	9903      	ldr	r1, [sp, #12]
    9048:	9b01      	ldr	r3, [sp, #4]
    904a:	9a02      	ldr	r2, [sp, #8]
    904c:	4299      	cmp	r1, r3
    data.dest[data.num_chars] = '\0';
    904e:	bf34      	ite	cc
    9050:	5454      	strbcc	r4, [r2, r1]
  else
    data.dest[data.dest_capacity] = '\0';
    9052:	54d4      	strbcs	r4, [r2, r3]

  return data.num_chars;
    9054:	9803      	ldr	r0, [sp, #12]
    9056:	e000      	b.n	905a <tfp_vsnprintf+0x2a>
int tfp_vsnprintf(char *str, size_t size, const char *format, va_list ap)
{
  struct _vsnprintf_putcf_data data;

  if (size < 1)
    return 0;
    9058:	4608      	mov	r0, r1
    data.dest[data.num_chars] = '\0';
  else
    data.dest[data.dest_capacity] = '\0';

  return data.num_chars;
}
    905a:	b004      	add	sp, #16
    905c:	bd10      	pop	{r4, pc}
    905e:	bf00      	nop
    9060:	00008cd1 	.word	0x00008cd1

00009064 <USB_IRQHandler>:
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
	USBHwISR();
    9064:	f000 bce4 	b.w	9a30 <USBHwISR>

00009068 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    9068:	b508      	push	{r3, lr}
    906a:	4a0d      	ldr	r2, [pc, #52]	; (90a0 <Reset_Handler+0x38>)
    906c:	4b0d      	ldr	r3, [pc, #52]	; (90a4 <Reset_Handler+0x3c>)
	unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    906e:	490e      	ldr	r1, [pc, #56]	; (90a8 <Reset_Handler+0x40>)
    9070:	428b      	cmp	r3, r1
    9072:	d204      	bcs.n	907e <Reset_Handler+0x16>
	{
		*dest++ = *src++;
    9074:	f852 1f04 	ldr.w	r1, [r2, #4]!
    9078:	f843 1b04 	str.w	r1, [r3], #4
    907c:	e7f7      	b.n	906e <Reset_Handler+0x6>
    907e:	4b0b      	ldr	r3, [pc, #44]	; (90ac <Reset_Handler+0x44>)
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    9080:	4a0b      	ldr	r2, [pc, #44]	; (90b0 <Reset_Handler+0x48>)
    9082:	4293      	cmp	r3, r2
    9084:	d203      	bcs.n	908e <Reset_Handler+0x26>
	{
		*src++ = 0;
    9086:	2200      	movs	r2, #0
    9088:	f843 2b04 	str.w	r2, [r3], #4
    908c:	e7f8      	b.n	9080 <Reset_Handler+0x18>
	}

	__libc_init_array();
    908e:	f7fb f88b 	bl	41a8 <__libc_init_array>

	// Set the vector table location.
	SCB_VTOR = (uint32_t)&_interrupt_vector_table;
    9092:	4b08      	ldr	r3, [pc, #32]	; (90b4 <Reset_Handler+0x4c>)
    9094:	4a08      	ldr	r2, [pc, #32]	; (90b8 <Reset_Handler+0x50>)
    9096:	601a      	str	r2, [r3, #0]

	main();
    9098:	f7fd fc78 	bl	698c <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    909c:	e7fe      	b.n	909c <Reset_Handler+0x34>
    909e:	bf00      	nop
    90a0:	0000b07c 	.word	0x0000b07c
    90a4:	10000020 	.word	0x10000020
    90a8:	10000a05 	.word	0x10000a05
    90ac:	10000a08 	.word	0x10000a08
    90b0:	10003b1e 	.word	0x10003b1e
    90b4:	e000ed08 	.word	0xe000ed08
    90b8:	00004000 	.word	0x00004000

000090bc <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    90bc:	e7fe      	b.n	90bc <ADC_IRQHandler>
    90be:	0000      	movs	r0, r0

000090c0 <spi_delay>:
	cc2400_spi(16, out);
}

static volatile u32 delay_counter;
static void spi_delay() {
       delay_counter = 10;
    90c0:	4b04      	ldr	r3, [pc, #16]	; (90d4 <spi_delay+0x14>)
    90c2:	220a      	movs	r2, #10
    90c4:	601a      	str	r2, [r3, #0]
       while (--delay_counter);
    90c6:	681a      	ldr	r2, [r3, #0]
    90c8:	3a01      	subs	r2, #1
    90ca:	601a      	str	r2, [r3, #0]
    90cc:	2a00      	cmp	r2, #0
    90ce:	d1fa      	bne.n	90c6 <spi_delay+0x6>
}
    90d0:	4770      	bx	lr
    90d2:	bf00      	nop
    90d4:	1000118c 	.word	0x1000118c

000090d8 <rbit>:
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
  u32 result = 0;
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    90d8:	fa90 f0a0 	rbit	r0, r0
  return result;
}
    90dc:	4770      	bx	lr
    90de:	0000      	movs	r0, r0

000090e0 <wait_us>:
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    90e0:	0883      	lsrs	r3, r0, #2
    90e2:	eb03 03d0 	add.w	r3, r3, r0, lsr #3
    90e6:	eb03 1390 	add.w	r3, r3, r0, lsr #6
    90ea:	eb03 13d0 	add.w	r3, r3, r0, lsr #7
    90ee:	eb03 2390 	add.w	r3, r3, r0, lsr #10
    90f2:	eb03 20d0 	add.w	r0, r3, r0, lsr #11
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    90f6:	4b04      	ldr	r3, [pc, #16]	; (9108 <wait_us+0x28>)
    90f8:	6058      	str	r0, [r3, #4]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    90fa:	685a      	ldr	r2, [r3, #4]
    90fc:	3a01      	subs	r2, #1
    90fe:	605a      	str	r2, [r3, #4]
    9100:	2a00      	cmp	r2, #0
    9102:	d1fa      	bne.n	90fa <wait_us+0x1a>
}
    9104:	4770      	bx	lr
    9106:	bf00      	nop
    9108:	1000118c 	.word	0x1000118c

0000910c <wait>:
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    910c:	4b01      	ldr	r3, [pc, #4]	; (9114 <wait+0x8>)
    910e:	4358      	muls	r0, r3
    9110:	f7ff bfe6 	b.w	90e0 <wait_us>
    9114:	000f4240 	.word	0x000f4240

00009118 <all_pins_off>:
}

void all_pins_off(void)
{
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    9118:	4a10      	ldr	r2, [pc, #64]	; (915c <all_pins_off+0x44>)
    911a:	2300      	movs	r3, #0
    911c:	6013      	str	r3, [r2, #0]
	PINSEL1 = 0;
    911e:	6053      	str	r3, [r2, #4]
	PINSEL2 = 0;
    9120:	6093      	str	r3, [r2, #8]
	PINSEL3 = 0;
    9122:	60d3      	str	r3, [r2, #12]
	PINSEL4 = 0;
    9124:	6113      	str	r3, [r2, #16]
	PINSEL7 = 0;
    9126:	61d3      	str	r3, [r2, #28]
	PINSEL9 = 0;
    9128:	6253      	str	r3, [r2, #36]	; 0x24
	PINSEL10 = 0;
    912a:	6293      	str	r3, [r2, #40]	; 0x28

	/* configure all pins as inputs */
	FIO0DIR = 0;
    912c:	4a0c      	ldr	r2, [pc, #48]	; (9160 <all_pins_off+0x48>)
    912e:	6013      	str	r3, [r2, #0]
	FIO1DIR = 0;
    9130:	6213      	str	r3, [r2, #32]
	FIO2DIR = 0;
    9132:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3DIR = 0;
    9134:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = 0;
    9136:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	/* pull-up on every pin */
	PINMODE0 = 0;
    913a:	4a0a      	ldr	r2, [pc, #40]	; (9164 <all_pins_off+0x4c>)
    913c:	6013      	str	r3, [r2, #0]
	PINMODE1 = 0;
    913e:	6053      	str	r3, [r2, #4]
	PINMODE2 = 0;
    9140:	6093      	str	r3, [r2, #8]
	PINMODE3 = 0;
    9142:	60d3      	str	r3, [r2, #12]
	PINMODE4 = 0;
    9144:	6113      	str	r3, [r2, #16]
	PINMODE7 = 0;
    9146:	61d3      	str	r3, [r2, #28]
	PINMODE9 = 0;
    9148:	6253      	str	r3, [r2, #36]	; 0x24

	/* set all outputs low */
	FIO0PIN = 0;
    914a:	4a07      	ldr	r2, [pc, #28]	; (9168 <all_pins_off+0x50>)
    914c:	6013      	str	r3, [r2, #0]
	FIO1PIN = 0;
    914e:	6213      	str	r3, [r2, #32]
	FIO2PIN = 0;
    9150:	6413      	str	r3, [r2, #64]	; 0x40
	FIO3PIN = 0;
    9152:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4PIN = 0;
    9154:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    9158:	4770      	bx	lr
    915a:	bf00      	nop
    915c:	4002c000 	.word	0x4002c000
    9160:	2009c000 	.word	0x2009c000
    9164:	4002c040 	.word	0x4002c040
    9168:	2009c014 	.word	0x2009c014

0000916c <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    916c:	b508      	push	{r3, lr}
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    916e:	f7ff ffd3 	bl	9118 <all_pins_off>
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    9172:	f24c 7112 	movw	r1, #50962	; 0xc712
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    9176:	4a09      	ldr	r2, [pc, #36]	; (919c <gpio_init+0x30>)
    9178:	2300      	movs	r3, #0
    917a:	6013      	str	r3, [r2, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    917c:	6211      	str	r1, [r2, #32]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    917e:	f240 11b1 	movw	r1, #433	; 0x1b1
    9182:	6411      	str	r1, [r2, #64]	; 0x40
	FIO3DIR = 0;
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    9184:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
	FIO3DIR = 0;
    9188:	6613      	str	r3, [r2, #96]	; 0x60
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    918a:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    918e:	6153      	str	r3, [r2, #20]
	FIO1PIN = 0;
    9190:	6353      	str	r3, [r2, #52]	; 0x34
	FIO2PIN = 0;
    9192:	6553      	str	r3, [r2, #84]	; 0x54
	FIO3PIN = 0;
    9194:	6753      	str	r3, [r2, #116]	; 0x74
	FIO4PIN = 0;
    9196:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    919a:	bd08      	pop	{r3, pc}
    919c:	2009c000 	.word	0x2009c000

000091a0 <dio_ssp_init>:
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    91a0:	4b11      	ldr	r3, [pc, #68]	; (91e8 <dio_ssp_init+0x48>)
    91a2:	681a      	ldr	r2, [r3, #0]
    91a4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
    91a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    91ac:	601a      	str	r2, [r3, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    91ae:	681a      	ldr	r2, [r3, #0]
    91b0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    91b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    91b8:	601a      	str	r2, [r3, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    91ba:	681a      	ldr	r2, [r3, #0]
    91bc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    91c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    91c4:	601a      	str	r2, [r3, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    91c6:	681a      	ldr	r2, [r3, #0]
    91c8:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
    91cc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    91d0:	601a      	str	r2, [r3, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    91d2:	4b06      	ldr	r3, [pc, #24]	; (91ec <dio_ssp_init+0x4c>)
    91d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    91d8:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    91da:	4b05      	ldr	r3, [pc, #20]	; (91f0 <dio_ssp_init+0x50>)
    91dc:	22c7      	movs	r2, #199	; 0xc7
    91de:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    91e0:	220c      	movs	r2, #12
    91e2:	605a      	str	r2, [r3, #4]
    91e4:	4770      	bx	lr
    91e6:	bf00      	nop
    91e8:	4002c000 	.word	0x4002c000
    91ec:	2009c098 	.word	0x2009c098
    91f0:	40030000 	.word	0x40030000

000091f4 <atest_init>:
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    91f4:	4a09      	ldr	r2, [pc, #36]	; (921c <atest_init+0x28>)
    91f6:	6813      	ldr	r3, [r2, #0]
    91f8:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    91fc:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    91fe:	4a08      	ldr	r2, [pc, #32]	; (9220 <atest_init+0x2c>)
    9200:	6813      	ldr	r3, [r2, #0]
    9202:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    9206:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    9208:	4b06      	ldr	r3, [pc, #24]	; (9224 <atest_init+0x30>)
    920a:	681a      	ldr	r2, [r3, #0]
    920c:	f442 1220 	orr.w	r2, r2, #2621440	; 0x280000
    9210:	601a      	str	r2, [r3, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    9212:	681a      	ldr	r2, [r3, #0]
    9214:	f422 12a0 	bic.w	r2, r2, #1310720	; 0x140000
    9218:	601a      	str	r2, [r3, #0]
    921a:	4770      	bx	lr
    921c:	4002c004 	.word	0x4002c004
    9220:	2009c000 	.word	0x2009c000
    9224:	4002c044 	.word	0x4002c044

00009228 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    9228:	b530      	push	{r4, r5, lr}
	u32 msb = 1 << (len - 1);
    922a:	2501      	movs	r5, #1
    922c:	1e43      	subs	r3, r0, #1
    922e:	409d      	lsls	r5, r3

	/* start transaction by dropping CSN */
	CSN_CLR;
    9230:	4b0d      	ldr	r3, [pc, #52]	; (9268 <cc2400_spi+0x40>)
    9232:	2220      	movs	r2, #32

	while (len--) {
    9234:	3801      	subs	r0, #1
    9236:	b2c0      	uxtb	r0, r0
    9238:	28ff      	cmp	r0, #255	; 0xff

		SCLK_SET;
		if (MISO)
			data |= 1;

		SCLK_CLR;
    923a:	601a      	str	r2, [r3, #0]
    923c:	4c0b      	ldr	r4, [pc, #44]	; (926c <cc2400_spi+0x44>)
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    923e:	d00f      	beq.n	9260 <cc2400_spi+0x38>
		if (data & msb)
    9240:	4229      	tst	r1, r5
    9242:	f04f 0201 	mov.w	r2, #1
			MOSI_SET;
    9246:	bf14      	ite	ne
    9248:	6022      	strne	r2, [r4, #0]
		else
			MOSI_CLR;
    924a:	601a      	streq	r2, [r3, #0]
		data <<= 1;

		SCLK_SET;
    924c:	2210      	movs	r2, #16
    924e:	6022      	str	r2, [r4, #0]
		if (MISO)
    9250:	4c07      	ldr	r4, [pc, #28]	; (9270 <cc2400_spi+0x48>)
	while (len--) {
		if (data & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		data <<= 1;
    9252:	0049      	lsls	r1, r1, #1

		SCLK_SET;
		if (MISO)
    9254:	6824      	ldr	r4, [r4, #0]
    9256:	07a4      	lsls	r4, r4, #30
			data |= 1;
    9258:	bf48      	it	mi
    925a:	f041 0101 	orrmi.w	r1, r1, #1
    925e:	e7e9      	b.n	9234 <cc2400_spi+0xc>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    9260:	2320      	movs	r3, #32
    9262:	6023      	str	r3, [r4, #0]

	return data;
}
    9264:	4608      	mov	r0, r1
    9266:	bd30      	pop	{r4, r5, pc}
    9268:	2009c05c 	.word	0x2009c05c
    926c:	2009c058 	.word	0x2009c058
    9270:	2009c054 	.word	0x2009c054

00009274 <cc2400_init>:
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
}

void cc2400_init()
{
    9274:	b510      	push	{r4, lr}
#else
	atest_init();
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    9276:	4c0a      	ldr	r4, [pc, #40]	; (92a0 <cc2400_init+0x2c>)
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    9278:	f7ff ffbc 	bl	91f4 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    927c:	f44f 7300 	mov.w	r3, #512	; 0x200
    9280:	6023      	str	r3, [r4, #0]
	wait_us(50);
    9282:	2032      	movs	r0, #50	; 0x32
    9284:	f7ff ff2c 	bl	90e0 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    9288:	4b06      	ldr	r3, [pc, #24]	; (92a4 <cc2400_init+0x30>)
    928a:	2220      	movs	r2, #32
    928c:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    928e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    9292:	6023      	str	r3, [r4, #0]

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    9294:	2018      	movs	r0, #24
    9296:	4904      	ldr	r1, [pc, #16]	; (92a8 <cc2400_init+0x34>)
	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
}
    9298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    929c:	f7ff bfc4 	b.w	9228 <cc2400_spi>
    92a0:	2009c038 	.word	0x2009c038
    92a4:	2009c058 	.word	0x2009c058
    92a8:	000d7fff 	.word	0x000d7fff

000092ac <cc2400_get>:
	return data;
}

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    92ac:	b508      	push	{r3, lr}
	u32 in;

	u32 out = (reg | 0x80) << 16;
    92ae:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(24, out);
    92b2:	0409      	lsls	r1, r1, #16
    92b4:	2018      	movs	r0, #24
    92b6:	f7ff ffb7 	bl	9228 <cc2400_spi>
	return in & 0xFFFF;
}
    92ba:	b280      	uxth	r0, r0
    92bc:	bd08      	pop	{r3, pc}

000092be <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
    92be:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	cc2400_spi(24, out);
    92c2:	2018      	movs	r0, #24
    92c4:	f7ff bfb0 	b.w	9228 <cc2400_spi>

000092c8 <cc2400_get8>:
}

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    92c8:	b508      	push	{r3, lr}
	u16 in;

	u16 out = (reg | 0x80) << 8;
    92ca:	f040 0180 	orr.w	r1, r0, #128	; 0x80
	in = cc2400_spi(16, out);
    92ce:	0209      	lsls	r1, r1, #8
    92d0:	2010      	movs	r0, #16
    92d2:	f7ff ffa9 	bl	9228 <cc2400_spi>
	return in & 0xFF;
}
    92d6:	b2c0      	uxtb	r0, r0
    92d8:	bd08      	pop	{r3, pc}

000092da <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
	u32 out = (reg << 8) | val;
    92da:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
	cc2400_spi(16, out);
    92de:	2010      	movs	r0, #16
    92e0:	f7ff bfa2 	b.w	9228 <cc2400_spi>

000092e4 <cc2400_fifo_write>:
       while (--delay_counter);
}


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
    92e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    92e6:	4b1f      	ldr	r3, [pc, #124]	; (9364 <cc2400_fifo_write+0x80>)
    92e8:	2220      	movs	r2, #32
    92ea:	601a      	str	r2, [r3, #0]


/* write multiple bytes to SPI */
void cc2400_fifo_write(u8 len, u8 *data) {
	u8 msb = 1 << 7;
	u8 reg = FIFOREG;
    92ec:	2570      	movs	r5, #112	; 0x70
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    92ee:	2208      	movs	r2, #8
    92f0:	4c1d      	ldr	r4, [pc, #116]	; (9368 <cc2400_fifo_write+0x84>)

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
    92f2:	f015 0f80 	tst.w	r5, #128	; 0x80
    92f6:	f04f 0601 	mov.w	r6, #1
    92fa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
			MOSI_SET;
    92fe:	bf14      	ite	ne
    9300:	6026      	strne	r6, [r4, #0]
		else
			MOSI_CLR;
    9302:	601e      	streq	r6, [r3, #0]
		reg <<= 1;
    9304:	006d      	lsls	r5, r5, #1
		SCLK_SET;
    9306:	2610      	movs	r6, #16
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    9308:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
		SCLK_SET;
    930c:	6026      	str	r6, [r4, #0]
	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    930e:	b2ed      	uxtb	r5, r5
		SCLK_SET;
		SCLK_CLR;
    9310:	601e      	str	r6, [r3, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    9312:	d1ed      	bne.n	92f0 <cc2400_fifo_write+0xc>
    9314:	460e      	mov	r6, r1
    9316:	1a72      	subs	r2, r6, r1
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    9318:	b2d2      	uxtb	r2, r2
    931a:	4282      	cmp	r2, r0
    931c:	d214      	bcs.n	9348 <cc2400_fifo_write+0x64>
		temp = data[i];
    931e:	f816 5b01 	ldrb.w	r5, [r6], #1
    9322:	2208      	movs	r2, #8
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
    9324:	f015 0f80 	tst.w	r5, #128	; 0x80
    9328:	f04f 0701 	mov.w	r7, #1
    932c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
				MOSI_SET;
    9330:	bf14      	ite	ne
    9332:	6027      	strne	r7, [r4, #0]
			else
				MOSI_CLR;
    9334:	601f      	streq	r7, [r3, #0]
			temp <<= 1;
    9336:	006d      	lsls	r5, r5, #1
			SCLK_SET;
    9338:	2710      	movs	r7, #16
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    933a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
			SCLK_SET;
    933e:	6027      	str	r7, [r4, #0]
		for (j = 0; j < 8; ++j) {
			if (temp & msb)
				MOSI_SET;
			else
				MOSI_CLR;
			temp <<= 1;
    9340:	b2ed      	uxtb	r5, r5
			SCLK_SET;
			SCLK_CLR;
    9342:	601f      	str	r7, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    9344:	d1ee      	bne.n	9324 <cc2400_fifo_write+0x40>
    9346:	e7e6      	b.n	9316 <cc2400_fifo_write+0x32>
    9348:	2208      	movs	r2, #8
    934a:	3a01      	subs	r2, #1
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
		SCLK_SET;
    934c:	2110      	movs	r1, #16
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    934e:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		SCLK_SET;
    9352:	6021      	str	r1, [r4, #0]
		SCLK_CLR;
    9354:	6019      	str	r1, [r3, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    9356:	d1f8      	bne.n	934a <cc2400_fifo_write+0x66>
		SCLK_SET;
		SCLK_CLR;
	}
	
	spi_delay();
    9358:	f7ff feb2 	bl	90c0 <spi_delay>
	/* end transaction by raising CSN */
	CSN_SET;
    935c:	4b02      	ldr	r3, [pc, #8]	; (9368 <cc2400_fifo_write+0x84>)
    935e:	2220      	movs	r2, #32
    9360:	601a      	str	r2, [r3, #0]
    9362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9364:	2009c05c 	.word	0x2009c05c
    9368:	2009c058 	.word	0x2009c058

0000936c <cc2400_fifo_read>:
}

/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
    936c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;
    9370:	4d20      	ldr	r5, [pc, #128]	; (93f4 <cc2400_fifo_read+0x88>)
    9372:	2320      	movs	r3, #32
    9374:	602b      	str	r3, [r5, #0]
/* read multiple bytes from SPI */
void cc2400_fifo_read(u8 len, u8 *buf) {
	u8 msb = 1 << 7;
	u8 i, j, temp, reg;
	// Set first bit because it's a read
	reg = 0x80 | FIFOREG;
    9376:	22f0      	movs	r2, #240	; 0xf0

	/* start transaction by dropping CSN */
	CSN_CLR;
    9378:	2308      	movs	r3, #8
    937a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 93fc <cc2400_fifo_read+0x90>

	for (i = 0; i < 8; ++i) {
		if (reg & msb)
    937e:	f012 0f80 	tst.w	r2, #128	; 0x80
    9382:	f04f 0401 	mov.w	r4, #1
    9386:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
			MOSI_SET;
    938a:	bf14      	ite	ne
    938c:	f8c8 4000 	strne.w	r4, [r8]
		else
			MOSI_CLR;
    9390:	602c      	streq	r4, [r5, #0]
		reg <<= 1;
    9392:	0052      	lsls	r2, r2, #1
		SCLK_SET;
    9394:	2410      	movs	r4, #16
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    9396:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
		SCLK_SET;
    939a:	f8c8 4000 	str.w	r4, [r8]
	for (i = 0; i < 8; ++i) {
		if (reg & msb)
			MOSI_SET;
		else
			MOSI_CLR;
		reg <<= 1;
    939e:	b2d2      	uxtb	r2, r2
		SCLK_SET;
		SCLK_CLR;
    93a0:	602c      	str	r4, [r5, #0]
	reg = 0x80 | FIFOREG;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    93a2:	d1ea      	bne.n	937a <cc2400_fifo_read+0xe>
    93a4:	3801      	subs	r0, #1
    93a6:	f101 39ff 	add.w	r9, r1, #4294967295	; 0xffffffff
    93aa:	180e      	adds	r6, r1, r0
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    93ac:	45b1      	cmp	r9, r6
    93ae:	d01a      	beq.n	93e6 <cc2400_fifo_read+0x7a>
    93b0:	2708      	movs	r7, #8
    93b2:	2400      	movs	r4, #0
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
    93b4:	f7ff fe84 	bl	90c0 <spi_delay>
			SCLK_SET;
    93b8:	2310      	movs	r3, #16
    93ba:	f8c8 3000 	str.w	r3, [r8]
			temp <<= 1;
			if (MISO)
    93be:	4b0e      	ldr	r3, [pc, #56]	; (93f8 <cc2400_fifo_read+0x8c>)
	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
			temp <<= 1;
    93c0:	0064      	lsls	r4, r4, #1
			if (MISO)
    93c2:	681b      	ldr	r3, [r3, #0]
	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
			spi_delay();
			SCLK_SET;
			temp <<= 1;
    93c4:	b2e4      	uxtb	r4, r4
			if (MISO)
    93c6:	079b      	lsls	r3, r3, #30
    93c8:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
				temp |= 1;
    93cc:	bf48      	it	mi
    93ce:	f044 0401 	orrmi.w	r4, r4, #1
			spi_delay();
    93d2:	f7ff fe75 	bl	90c0 <spi_delay>
			SCLK_CLR;
    93d6:	2310      	movs	r3, #16
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
    93d8:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
			SCLK_SET;
			temp <<= 1;
			if (MISO)
				temp |= 1;
			spi_delay();
			SCLK_CLR;
    93dc:	602b      	str	r3, [r5, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = 0;
		for (j = 0; j < 8; ++j) {
    93de:	d1e9      	bne.n	93b4 <cc2400_fifo_read+0x48>
			if (MISO)
				temp |= 1;
			spi_delay();
			SCLK_CLR;
		}
		buf[i] = temp;
    93e0:	f809 4f01 	strb.w	r4, [r9, #1]!
    93e4:	e7e2      	b.n	93ac <cc2400_fifo_read+0x40>
	}

	/* end transaction by raising CSN */
	spi_delay();
    93e6:	f7ff fe6b 	bl	90c0 <spi_delay>
	CSN_SET;
    93ea:	2320      	movs	r3, #32
    93ec:	f8c8 3000 	str.w	r3, [r8]
    93f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    93f4:	2009c05c 	.word	0x2009c05c
    93f8:	2009c054 	.word	0x2009c054
    93fc:	2009c058 	.word	0x2009c058

00009400 <cc2400_status>:
}

/* get the status */
u8 cc2400_status()
{
    9400:	b508      	push	{r3, lr}
	return cc2400_spi(8, 0);
    9402:	2100      	movs	r1, #0
    9404:	2008      	movs	r0, #8
    9406:	f7ff ff0f 	bl	9228 <cc2400_spi>
}
    940a:	b2c0      	uxtb	r0, r0
    940c:	bd08      	pop	{r3, pc}

0000940e <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    940e:	b508      	push	{r3, lr}
    9410:	4601      	mov	r1, r0
	return cc2400_spi(8, reg);
    9412:	2008      	movs	r0, #8
    9414:	f7ff ff08 	bl	9228 <cc2400_spi>
}
    9418:	b2c0      	uxtb	r0, r0
    941a:	bd08      	pop	{r3, pc}

0000941c <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    941c:	b508      	push	{r3, lr}

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    941e:	2018      	movs	r0, #24
    9420:	2100      	movs	r1, #0
    9422:	f7ff ff01 	bl	9228 <cc2400_spi>
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
    9426:	2000      	movs	r0, #0
    9428:	f7ff ff40 	bl	92ac <cc2400_get>
    942c:	2800      	cmp	r0, #0
    942e:	d1fa      	bne.n	9426 <cc2400_reset+0xa>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    9430:	2018      	movs	r0, #24
    9432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9436:	f7ff fef7 	bl	9228 <cc2400_spi>
void cc2400_reset()
{
	cc2400_set(MAIN, 0x0000);
	while (cc2400_get(MAIN) != 0x0000);
	cc2400_set(MAIN, 0x8000);
	while (cc2400_get(MAIN) != 0x8000);
    943a:	2000      	movs	r0, #0
    943c:	f7ff ff36 	bl	92ac <cc2400_get>
    9440:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    9444:	d1f9      	bne.n	943a <cc2400_reset+0x1e>
}
    9446:	bd08      	pop	{r3, pc}

00009448 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    9448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    944c:	f244 023a 	movw	r2, #16442	; 0x403a
    9450:	4b3e      	ldr	r3, [pc, #248]	; (954c <clock_start+0x104>)

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    9452:	4f3f      	ldr	r7, [pc, #252]	; (9550 <clock_start+0x108>)

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    9454:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    9456:	4d3f      	ldr	r5, [pc, #252]	; (9554 <clock_start+0x10c>)
{
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    9458:	2300      	movs	r3, #0
    945a:	603b      	str	r3, [r7, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    945c:	682b      	ldr	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    945e:	4c3e      	ldr	r4, [pc, #248]	; (9558 <clock_start+0x110>)

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    9460:	f023 0302 	bic.w	r3, r3, #2
    9464:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    9466:	23aa      	movs	r3, #170	; 0xaa
    9468:	6023      	str	r3, [r4, #0]
    946a:	2355      	movs	r3, #85	; 0x55
    946c:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    946e:	4e3b      	ldr	r6, [pc, #236]	; (955c <clock_start+0x114>)
    9470:	6833      	ldr	r3, [r6, #0]
    9472:	0198      	lsls	r0, r3, #6
    9474:	d4fb      	bmi.n	946e <clock_start+0x26>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    9476:	682b      	ldr	r3, [r5, #0]
    9478:	f023 0301 	bic.w	r3, r3, #1
    947c:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    947e:	23aa      	movs	r3, #170	; 0xaa
    9480:	6023      	str	r3, [r4, #0]
    9482:	2355      	movs	r3, #85	; 0x55
    9484:	6023      	str	r3, [r4, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    9486:	6833      	ldr	r3, [r6, #0]
    9488:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
    948c:	d1fb      	bne.n	9486 <clock_start+0x3e>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    948e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 9580 <clock_start+0x138>
    9492:	f8c8 3000 	str.w	r3, [r8]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    9496:	f7ff ffc1 	bl	941c <cc2400_reset>

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
	u32 out = (reg << 16) | val;
	cc2400_spi(24, out);
    949a:	2018      	movs	r0, #24
    949c:	4930      	ldr	r1, [pc, #192]	; (9560 <clock_start+0x118>)
    949e:	f7ff fec3 	bl	9228 <cc2400_spi>
	CCLKCFG = 0;

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
	cc2400_strobe(SXOSCON);
    94a2:	2060      	movs	r0, #96	; 0x60
    94a4:	f7ff ffb3 	bl	940e <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    94a8:	f7ff ffaa 	bl	9400 <cc2400_status>
    94ac:	0641      	lsls	r1, r0, #25
    94ae:	d5fb      	bpl.n	94a8 <clock_start+0x60>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    94b0:	4b2c      	ldr	r3, [pc, #176]	; (9564 <clock_start+0x11c>)
    94b2:	2220      	movs	r2, #32
    94b4:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    94b6:	681a      	ldr	r2, [r3, #0]
    94b8:	0652      	lsls	r2, r2, #25
    94ba:	d5fc      	bpl.n	94b6 <clock_start+0x6e>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2) | (2 << 4); /* TIMER0 and TIMER1 at cclk/2 (50 MHz) */
    94bc:	4b2a      	ldr	r3, [pc, #168]	; (9568 <clock_start+0x120>)
    94be:	2228      	movs	r2, #40	; 0x28
    94c0:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    94c2:	2200      	movs	r2, #0
    94c4:	605a      	str	r2, [r3, #4]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    94c6:	2301      	movs	r3, #1
    94c8:	603b      	str	r3, [r7, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    94ca:	4a28      	ldr	r2, [pc, #160]	; (956c <clock_start+0x124>)
    94cc:	4b28      	ldr	r3, [pc, #160]	; (9570 <clock_start+0x128>)
	PLL0FEED_SEQUENCE;
    94ce:	21aa      	movs	r1, #170	; 0xaa

	/* switch to main oscillator */
	CLKSRCSEL = 1;

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    94d0:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    94d2:	2255      	movs	r2, #85	; 0x55
    94d4:	6021      	str	r1, [r4, #0]
    94d6:	6022      	str	r2, [r4, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    94d8:	682b      	ldr	r3, [r5, #0]
    94da:	f043 0301 	orr.w	r3, r3, #1
    94de:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    94e0:	6021      	str	r1, [r4, #0]
    94e2:	6022      	str	r2, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    94e4:	6833      	ldr	r3, [r6, #0]
    94e6:	01df      	lsls	r7, r3, #7
    94e8:	d5fc      	bpl.n	94e4 <clock_start+0x9c>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    94ea:	2303      	movs	r3, #3
    94ec:	f8c8 3000 	str.w	r3, [r8]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    94f0:	682b      	ldr	r3, [r5, #0]
    94f2:	f043 0302 	orr.w	r3, r3, #2
    94f6:	602b      	str	r3, [r5, #0]
	PLL0FEED_SEQUENCE;
    94f8:	23aa      	movs	r3, #170	; 0xaa
    94fa:	6023      	str	r3, [r4, #0]
    94fc:	2355      	movs	r3, #85	; 0x55
    94fe:	6023      	str	r3, [r4, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    9500:	6833      	ldr	r3, [r6, #0]
    9502:	019d      	lsls	r5, r3, #6
    9504:	d5fc      	bpl.n	9500 <clock_start+0xb8>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    9506:	4b1b      	ldr	r3, [pc, #108]	; (9574 <clock_start+0x12c>)
    9508:	2222      	movs	r2, #34	; 0x22
    950a:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    950c:	24aa      	movs	r4, #170	; 0xaa
    950e:	3308      	adds	r3, #8
    9510:	2055      	movs	r0, #85	; 0x55

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    9512:	4a19      	ldr	r2, [pc, #100]	; (9578 <clock_start+0x130>)
	PLL0FEED_SEQUENCE;
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
	PLL1FEED_SEQUENCE;
    9514:	601c      	str	r4, [r3, #0]
    9516:	6018      	str	r0, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    9518:	6811      	ldr	r1, [r2, #0]
    951a:	f041 0101 	orr.w	r1, r1, #1
    951e:	6011      	str	r1, [r2, #0]
	PLL1FEED_SEQUENCE;
    9520:	601c      	str	r4, [r3, #0]
    9522:	6018      	str	r0, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    9524:	4915      	ldr	r1, [pc, #84]	; (957c <clock_start+0x134>)
    9526:	6808      	ldr	r0, [r1, #0]
    9528:	05c4      	lsls	r4, r0, #23
    952a:	d5fb      	bpl.n	9524 <clock_start+0xdc>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    952c:	6808      	ldr	r0, [r1, #0]
    952e:	0540      	lsls	r0, r0, #21
    9530:	d5fc      	bpl.n	952c <clock_start+0xe4>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    9532:	6810      	ldr	r0, [r2, #0]
    9534:	f040 0002 	orr.w	r0, r0, #2
    9538:	6010      	str	r0, [r2, #0]
	PLL1FEED_SEQUENCE;
    953a:	22aa      	movs	r2, #170	; 0xaa
    953c:	601a      	str	r2, [r3, #0]
    953e:	2255      	movs	r2, #85	; 0x55
    9540:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    9542:	680b      	ldr	r3, [r1, #0]
    9544:	059b      	lsls	r3, r3, #22
    9546:	d5fc      	bpl.n	9542 <clock_start+0xfa>
}
    9548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    954c:	400fc000 	.word	0x400fc000
    9550:	400fc10c 	.word	0x400fc10c
    9554:	400fc080 	.word	0x400fc080
    9558:	400fc08c 	.word	0x400fc08c
    955c:	400fc088 	.word	0x400fc088
    9560:	00081570 	.word	0x00081570
    9564:	400fc1a0 	.word	0x400fc1a0
    9568:	400fc1a8 	.word	0x400fc1a8
    956c:	00010018 	.word	0x00010018
    9570:	400fc084 	.word	0x400fc084
    9574:	400fc0a4 	.word	0x400fc0a4
    9578:	400fc0a0 	.word	0x400fc0a0
    957c:	400fc0a8 	.word	0x400fc0a8
    9580:	400fc104 	.word	0x400fc104

00009584 <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    9584:	b508      	push	{r3, lr}
	gpio_init();
    9586:	f7ff fdf1 	bl	916c <gpio_init>
	cc2400_init();
    958a:	f7ff fe73 	bl	9274 <cc2400_init>
	clock_start();
}
    958e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 */
void ubertooth_init()
{
	gpio_init();
	cc2400_init();
	clock_start();
    9592:	f7ff bf59 	b.w	9448 <clock_start>
    9596:	0000      	movs	r0, r0

00009598 <reset>:
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
}

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    9598:	b508      	push	{r3, lr}
	all_pins_off();
    959a:	f7ff fdbd 	bl	9118 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    959e:	4b09      	ldr	r3, [pc, #36]	; (95c4 <reset+0x2c>)
    95a0:	2202      	movs	r2, #2
    95a2:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    95a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    95a8:	6813      	ldr	r3, [r2, #0]
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    95aa:	4807      	ldr	r0, [pc, #28]	; (95c8 <reset+0x30>)
{
	all_pins_off();

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    95ac:	f043 0303 	orr.w	r3, r3, #3
    95b0:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    95b2:	4b06      	ldr	r3, [pc, #24]	; (95cc <reset+0x34>)
    95b4:	22aa      	movs	r2, #170	; 0xaa
    95b6:	601a      	str	r2, [r3, #0]
    95b8:	2255      	movs	r2, #85	; 0x55
    95ba:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
}
    95bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
const IAP_ENTRY iap_entry = (IAP_ENTRY)IAP_LOCATION;

/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
	wait_us(seconds * 1000000);
    95c0:	f7ff bd8e 	b.w	90e0 <wait_us>
    95c4:	2009c03c 	.word	0x2009c03c
    95c8:	000f4240 	.word	0x000f4240
    95cc:	40000008 	.word	0x40000008

000095d0 <get_part_num>:
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    95d0:	b530      	push	{r4, r5, lr}
    95d2:	b08b      	sub	sp, #44	; 0x2c
    95d4:	4604      	mov	r4, r0
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    95d6:	2336      	movs	r3, #54	; 0x36
    95d8:	a80a      	add	r0, sp, #40	; 0x28
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
}

void get_part_num(uint8_t *buffer, int *len)
{
    95da:	460d      	mov	r5, r1
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
    95dc:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    95e0:	a905      	add	r1, sp, #20
    95e2:	4b08      	ldr	r3, [pc, #32]	; (9604 <get_part_num+0x34>)
    95e4:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    95e6:	9b05      	ldr	r3, [sp, #20]
    95e8:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    95ea:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    95ec:	0a1a      	lsrs	r2, r3, #8
	u32 command[5];
	u32 result[5];
	command[0] = 54; /* read part number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
    95ee:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    95f0:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    95f2:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    95f4:	0e1b      	lsrs	r3, r3, #24
    95f6:	7123      	strb	r3, [r4, #4]
	*len = 5;
    95f8:	2305      	movs	r3, #5
	command[0] = 54; /* read part number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
    95fa:	70e2      	strb	r2, [r4, #3]
	buffer[4] = (result[1] >> 24) & 0xFF;
	*len = 5;
    95fc:	602b      	str	r3, [r5, #0]
	
}
    95fe:	b00b      	add	sp, #44	; 0x2c
    9600:	bd30      	pop	{r4, r5, pc}
    9602:	bf00      	nop
    9604:	1fff1ff1 	.word	0x1fff1ff1

00009608 <get_device_serial>:

void get_device_serial(uint8_t *buffer, int *len)
{
    9608:	b530      	push	{r4, r5, lr}
    960a:	b08b      	sub	sp, #44	; 0x2c
    960c:	4604      	mov	r4, r0
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    960e:	233a      	movs	r3, #58	; 0x3a
    9610:	a80a      	add	r0, sp, #40	; 0x28
	*len = 5;
	
}

void get_device_serial(uint8_t *buffer, int *len)
{
    9612:	460d      	mov	r5, r1
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
    9614:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    9618:	a905      	add	r1, sp, #20
    961a:	4b14      	ldr	r3, [pc, #80]	; (966c <get_device_serial+0x64>)
    961c:	4798      	blx	r3
	buffer[0] = result[0] & 0xFF; /* status */
    961e:	9b05      	ldr	r3, [sp, #20]
    9620:	7023      	strb	r3, [r4, #0]
	buffer[1] = result[1] & 0xFF;
    9622:	9b06      	ldr	r3, [sp, #24]
	buffer[2] = (result[1] >> 8) & 0xFF;
    9624:	0a1a      	lsrs	r2, r3, #8
	u32 command[5];
	u32 result[5];
	command[0] = 58; /* read device serial number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
    9626:	7063      	strb	r3, [r4, #1]
	buffer[2] = (result[1] >> 8) & 0xFF;
    9628:	70a2      	strb	r2, [r4, #2]
	buffer[3] = (result[1] >> 16) & 0xFF;
    962a:	0c1a      	lsrs	r2, r3, #16
	buffer[4] = (result[1] >> 24) & 0xFF;
    962c:	0e1b      	lsrs	r3, r3, #24
    962e:	7123      	strb	r3, [r4, #4]
	buffer[5] = result[2] & 0xFF;
    9630:	9b07      	ldr	r3, [sp, #28]
	command[0] = 58; /* read device serial number */
	iap_entry(command, result);
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
    9632:	70e2      	strb	r2, [r4, #3]
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
    9634:	0a1a      	lsrs	r2, r3, #8
	buffer[0] = result[0] & 0xFF; /* status */
	buffer[1] = result[1] & 0xFF;
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
    9636:	7163      	strb	r3, [r4, #5]
	buffer[6] = (result[2] >> 8) & 0xFF;
    9638:	71a2      	strb	r2, [r4, #6]
	buffer[7] = (result[2] >> 16) & 0xFF;
    963a:	0c1a      	lsrs	r2, r3, #16
	buffer[8] = (result[2] >> 24) & 0xFF;
    963c:	0e1b      	lsrs	r3, r3, #24
    963e:	7223      	strb	r3, [r4, #8]
	buffer[9] = result[3] & 0xFF;
    9640:	9b08      	ldr	r3, [sp, #32]
	buffer[2] = (result[1] >> 8) & 0xFF;
	buffer[3] = (result[1] >> 16) & 0xFF;
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
    9642:	71e2      	strb	r2, [r4, #7]
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
    9644:	0a1a      	lsrs	r2, r3, #8
	buffer[4] = (result[1] >> 24) & 0xFF;
	buffer[5] = result[2] & 0xFF;
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
    9646:	7263      	strb	r3, [r4, #9]
	buffer[10] = (result[3] >> 8) & 0xFF;
    9648:	72a2      	strb	r2, [r4, #10]
	buffer[11] = (result[3] >> 16) & 0xFF;
    964a:	0c1a      	lsrs	r2, r3, #16
	buffer[12] = (result[3] >> 24) & 0xFF;
    964c:	0e1b      	lsrs	r3, r3, #24
    964e:	7323      	strb	r3, [r4, #12]
	buffer[13] = result[4] & 0xFF;
    9650:	9b09      	ldr	r3, [sp, #36]	; 0x24
	buffer[6] = (result[2] >> 8) & 0xFF;
	buffer[7] = (result[2] >> 16) & 0xFF;
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
    9652:	72e2      	strb	r2, [r4, #11]
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
	buffer[14] = (result[4] >> 8) & 0xFF;
    9654:	0a1a      	lsrs	r2, r3, #8
	buffer[8] = (result[2] >> 24) & 0xFF;
	buffer[9] = result[3] & 0xFF;
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
    9656:	7363      	strb	r3, [r4, #13]
	buffer[14] = (result[4] >> 8) & 0xFF;
    9658:	73a2      	strb	r2, [r4, #14]
	buffer[15] = (result[4] >> 16) & 0xFF;
    965a:	0c1a      	lsrs	r2, r3, #16
	buffer[16] = (result[4] >> 24) & 0xFF;
    965c:	0e1b      	lsrs	r3, r3, #24
    965e:	7423      	strb	r3, [r4, #16]
	*len = 17;
    9660:	2311      	movs	r3, #17
	buffer[10] = (result[3] >> 8) & 0xFF;
	buffer[11] = (result[3] >> 16) & 0xFF;
	buffer[12] = (result[3] >> 24) & 0xFF;
	buffer[13] = result[4] & 0xFF;
	buffer[14] = (result[4] >> 8) & 0xFF;
	buffer[15] = (result[4] >> 16) & 0xFF;
    9662:	73e2      	strb	r2, [r4, #15]
	buffer[16] = (result[4] >> 24) & 0xFF;
	*len = 17;
    9664:	602b      	str	r3, [r5, #0]
}
    9666:	b00b      	add	sp, #44	; 0x2c
    9668:	bd30      	pop	{r4, r5, pc}
    966a:	bf00      	nop
    966c:	1fff1ff1 	.word	0x1fff1ff1

00009670 <set_isp>:

void set_isp(void)
{
    9670:	b500      	push	{lr}
    9672:	b08b      	sub	sp, #44	; 0x2c
	u32 command[5];
	u32 result[5];
	command[0] = 57;
    9674:	2339      	movs	r3, #57	; 0x39
    9676:	a80a      	add	r0, sp, #40	; 0x28
    9678:	f840 3d28 	str.w	r3, [r0, #-40]!
	iap_entry(command, result);
    967c:	a905      	add	r1, sp, #20
    967e:	4b02      	ldr	r3, [pc, #8]	; (9688 <set_isp+0x18>)
    9680:	4798      	blx	r3
}
    9682:	b00b      	add	sp, #44	; 0x2c
    9684:	f85d fb04 	ldr.w	pc, [sp], #4
    9688:	1fff1ff1 	.word	0x1fff1ff1

0000968c <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    968c:	b538      	push	{r3, r4, r5, lr}
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    968e:	4c08      	ldr	r4, [pc, #32]	; (96b0 <DataIn+0x24>)
	USBHwEPWrite(0x80, pbData, iChunk);
    9690:	2080      	movs	r0, #128	; 0x80
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    9692:	6825      	ldr	r5, [r4, #0]
	USBHwEPWrite(0x80, pbData, iChunk);
    9694:	6861      	ldr	r1, [r4, #4]
 */
static void DataIn(void)
{
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    9696:	2d40      	cmp	r5, #64	; 0x40
    9698:	bfa8      	it	ge
    969a:	2540      	movge	r5, #64	; 0x40
	USBHwEPWrite(0x80, pbData, iChunk);
    969c:	462a      	mov	r2, r5
    969e:	f000 f957 	bl	9950 <USBHwEPWrite>
	pbData += iChunk;
    96a2:	6863      	ldr	r3, [r4, #4]
    96a4:	442b      	add	r3, r5
    96a6:	6063      	str	r3, [r4, #4]
	iResidue -= iChunk;
    96a8:	6823      	ldr	r3, [r4, #0]
    96aa:	1b5d      	subs	r5, r3, r5
    96ac:	6025      	str	r5, [r4, #0]
    96ae:	bd38      	pop	{r3, r4, r5, pc}
    96b0:	10001194 	.word	0x10001194

000096b4 <_HandleRequest.constprop.1>:
	@param [in,out]	*piLen		Pointer to data length
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
    96b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
{
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    96b6:	4b11      	ldr	r3, [pc, #68]	; (96fc <_HandleRequest.constprop.1+0x48>)
    96b8:	7a1c      	ldrb	r4, [r3, #8]
    96ba:	461d      	mov	r5, r3
    96bc:	f3c4 1441 	ubfx	r4, r4, #5, #2
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    96c0:	2c02      	cmp	r4, #2
    96c2:	d10d      	bne.n	96e0 <_HandleRequest.constprop.1+0x2c>
		BOOL fFilterStatus = FALSE;
    96c4:	2200      	movs	r2, #0
    96c6:	a902      	add	r1, sp, #8
    96c8:	f841 2d04 	str.w	r2, [r1, #-4]!
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    96cc:	f103 0008 	add.w	r0, r3, #8
    96d0:	f103 0210 	add.w	r2, r3, #16
    96d4:	3304      	adds	r3, #4
    96d6:	f000 fa69 	bl	9bac <USBFilterOsVendorMessage>
    96da:	b108      	cbz	r0, 96e0 <_HandleRequest.constprop.1+0x2c>
			return fFilterStatus;
    96dc:	9801      	ldr	r0, [sp, #4]
    96de:	e00a      	b.n	96f6 <_HandleRequest.constprop.1+0x42>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    96e0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    96e4:	6963      	ldr	r3, [r4, #20]
	if (pfnHandler == NULL) {
    96e6:	b12b      	cbz	r3, 96f4 <_HandleRequest.constprop.1+0x40>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
	}

	return pfnHandler(pSetup, piLen, ppbData);
    96e8:	4805      	ldr	r0, [pc, #20]	; (9700 <_HandleRequest.constprop.1+0x4c>)
    96ea:	f100 0108 	add.w	r1, r0, #8
    96ee:	1f02      	subs	r2, r0, #4
    96f0:	4798      	blx	r3
    96f2:	e000      	b.n	96f6 <_HandleRequest.constprop.1+0x42>
	}
	
	pfnHandler = apfnReqHandlers[iType];
	if (pfnHandler == NULL) {
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    96f4:	4618      	mov	r0, r3
	}

	return pfnHandler(pSetup, piLen, ppbData);
}
    96f6:	b003      	add	sp, #12
    96f8:	bd30      	pop	{r4, r5, pc}
    96fa:	bf00      	nop
    96fc:	10001194 	.word	0x10001194
    9700:	1000119c 	.word	0x1000119c

00009704 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    9704:	b510      	push	{r4, lr}
	int iChunk, iType;

	if (bEP == 0x00) {
    9706:	2800      	cmp	r0, #0
    9708:	d14a      	bne.n	97a0 <USBHandleControlTransfer+0x9c>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    970a:	f001 0304 	and.w	r3, r1, #4
    970e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    9712:	4c25      	ldr	r4, [pc, #148]	; (97a8 <USBHandleControlTransfer+0xa4>)
    9714:	b30b      	cbz	r3, 975a <USBHandleControlTransfer+0x56>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    9716:	2208      	movs	r2, #8
    9718:	f104 0108 	add.w	r1, r4, #8
    971c:	f000 f94c 	bl	99b8 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    9720:	7a22      	ldrb	r2, [r4, #8]
    9722:	f3c2 1341 	ubfx	r3, r2, #5, #2
			pbData = apbDataStore[iType];
    9726:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    972c:	6063      	str	r3, [r4, #4]
			iResidue = Setup.wLength;
    972e:	89e3      	ldrh	r3, [r4, #14]
    9730:	6023      	str	r3, [r4, #0]
			iLen = Setup.wLength;
    9732:	6123      	str	r3, [r4, #16]

			if ((Setup.wLength == 0) ||
    9734:	b10b      	cbz	r3, 973a <USBHandleControlTransfer+0x36>
    9736:	09d3      	lsrs	r3, r2, #7
    9738:	d034      	beq.n	97a4 <USBHandleControlTransfer+0xa0>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    973a:	f7ff ffbb 	bl	96b4 <_HandleRequest.constprop.1>
    973e:	b928      	cbnz	r0, 974c <USBHandleControlTransfer+0x48>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    9740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
static void StallControlPipe(U8 bEPStat)
{
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    9744:	2080      	movs	r0, #128	; 0x80
    9746:	2101      	movs	r1, #1
    9748:	f000 b8f6 	b.w	9938 <USBHwEPStall>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
					return;
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    974c:	89e2      	ldrh	r2, [r4, #14]
    974e:	6923      	ldr	r3, [r4, #16]
    9750:	429a      	cmp	r2, r3
    9752:	bfd4      	ite	le
    9754:	6022      	strle	r2, [r4, #0]
    9756:	6023      	strgt	r3, [r4, #0]
    9758:	e019      	b.n	978e <USBHandleControlTransfer+0x8a>
				// send first part (possibly a zero-length status message)
				DataIn();
			}
		}
		else {		
			if (iResidue > 0) {
    975a:	6822      	ldr	r2, [r4, #0]
    975c:	2a00      	cmp	r2, #0
    975e:	dd1a      	ble.n	9796 <USBHandleControlTransfer+0x92>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    9760:	6861      	ldr	r1, [r4, #4]
    9762:	f000 f929 	bl	99b8 <USBHwEPRead>
				if (iChunk < 0) {
    9766:	2800      	cmp	r0, #0
    9768:	dbea      	blt.n	9740 <USBHandleControlTransfer+0x3c>
					StallControlPipe(bEPStat);
					return;
				}
				pbData += iChunk;
    976a:	6863      	ldr	r3, [r4, #4]
    976c:	4403      	add	r3, r0
    976e:	6063      	str	r3, [r4, #4]
				iResidue -= iChunk;
    9770:	6823      	ldr	r3, [r4, #0]
    9772:	1a18      	subs	r0, r3, r0
    9774:	6020      	str	r0, [r4, #0]
				if (iResidue == 0) {
    9776:	b9a8      	cbnz	r0, 97a4 <USBHandleControlTransfer+0xa0>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    9778:	7a23      	ldrb	r3, [r4, #8]
    977a:	f3c3 1341 	ubfx	r3, r3, #5, #2
					pbData = apbDataStore[iType];
    977e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    9782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9784:	6063      	str	r3, [r4, #4]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    9786:	f7ff ff95 	bl	96b4 <_HandleRequest.constprop.1>
    978a:	2800      	cmp	r0, #0
    978c:	d0d8      	beq.n	9740 <USBHandleControlTransfer+0x3c>
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    978e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
						return;
					}
					// send status to host
					DataIn();
    9792:	f7ff bf7b 	b.w	968c <DataIn>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    9796:	460a      	mov	r2, r1
		DataIn();
	}
	else {
		ASSERT(FALSE);
	}
}
    9798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					DataIn();
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    979c:	f000 b90c 	b.w	99b8 <USBHwEPRead>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    97a0:	2880      	cmp	r0, #128	; 0x80
    97a2:	d0f4      	beq.n	978e <USBHandleControlTransfer+0x8a>
    97a4:	bd10      	pop	{r4, pc}
    97a6:	bf00      	nop
    97a8:	10001194 	.word	0x10001194

000097ac <USBRegisterRequestHandler>:
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    97ac:	4b02      	ldr	r3, [pc, #8]	; (97b8 <USBRegisterRequestHandler+0xc>)
    97ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    97b2:	6141      	str	r1, [r0, #20]
	apbDataStore[iType] = pbDataStore;
    97b4:	6242      	str	r2, [r0, #36]	; 0x24
    97b6:	4770      	bx	lr
    97b8:	10001194 	.word	0x10001194

000097bc <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    97bc:	4770      	bx	lr
    97be:	0000      	movs	r0, r0

000097c0 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    97c0:	b510      	push	{r4, lr}
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    97c2:	4c0e      	ldr	r4, [pc, #56]	; (97fc <USBInit+0x3c>)
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
	// init hardware
	USBHwInit();
    97c4:	f000 f99a 	bl	9afc <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    97c8:	480d      	ldr	r0, [pc, #52]	; (9800 <USBInit+0x40>)
    97ca:	f000 f87f 	bl	98cc <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    97ce:	4621      	mov	r1, r4
    97d0:	2000      	movs	r0, #0
    97d2:	f000 f861 	bl	9898 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    97d6:	4621      	mov	r1, r4
    97d8:	2080      	movs	r0, #128	; 0x80
    97da:	f000 f85d 	bl	9898 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    97de:	2000      	movs	r0, #0
    97e0:	2140      	movs	r1, #64	; 0x40
    97e2:	f000 f83b 	bl	985c <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    97e6:	2080      	movs	r0, #128	; 0x80
    97e8:	2140      	movs	r1, #64	; 0x40
    97ea:	f000 f837 	bl	985c <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    97ee:	2000      	movs	r0, #0
    97f0:	4904      	ldr	r1, [pc, #16]	; (9804 <USBInit+0x44>)
    97f2:	4a05      	ldr	r2, [pc, #20]	; (9808 <USBInit+0x48>)
    97f4:	f7ff ffda 	bl	97ac <USBRegisterRequestHandler>

	return TRUE;
}
    97f8:	2001      	movs	r0, #1
    97fa:	bd10      	pop	{r4, pc}
    97fc:	00009705 	.word	0x00009705
    9800:	000097bd 	.word	0x000097bd
    9804:	00009ca5 	.word	0x00009ca5
    9808:	100011c8 	.word	0x100011c8

0000980c <Wait4DevInt>:
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    980c:	4b03      	ldr	r3, [pc, #12]	; (981c <Wait4DevInt+0x10>)
    980e:	681b      	ldr	r3, [r3, #0]
    9810:	4003      	ands	r3, r0
    9812:	4283      	cmp	r3, r0
    9814:	d1fa      	bne.n	980c <Wait4DevInt>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    9816:	4b02      	ldr	r3, [pc, #8]	; (9820 <Wait4DevInt+0x14>)
    9818:	6018      	str	r0, [r3, #0]
    981a:	4770      	bx	lr
    981c:	5000c200 	.word	0x5000c200
    9820:	5000c208 	.word	0x5000c208

00009824 <USBHwCmd>:
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    9824:	4b04      	ldr	r3, [pc, #16]	; (9838 <USBHwCmd+0x14>)
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    9826:	0400      	lsls	r0, r0, #16
    9828:	f440 60a0 	orr.w	r0, r0, #1280	; 0x500
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    982c:	2230      	movs	r2, #48	; 0x30
    982e:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    9830:	6098      	str	r0, [r3, #8]
    Wait4DevInt(CCEMTY);
    9832:	2010      	movs	r0, #16
    9834:	f7ff bfea 	b.w	980c <Wait4DevInt>
    9838:	5000c208 	.word	0x5000c208

0000983c <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    983c:	b510      	push	{r4, lr}
    983e:	460c      	mov	r4, r1
    // write command code
    USBHwCmd(bCmd);
    9840:	f7ff fff0 	bl	9824 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    9844:	0424      	lsls	r4, r4, #16
    9846:	4b04      	ldr	r3, [pc, #16]	; (9858 <USBHwCmdWrite+0x1c>)
    9848:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    984c:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CCEMTY);
    984e:	2010      	movs	r0, #16
}
    9850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // write command code
    USBHwCmd(bCmd);

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    Wait4DevInt(CCEMTY);
    9854:	f7ff bfda 	b.w	980c <Wait4DevInt>
    9858:	5000c210 	.word	0x5000c210

0000985c <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    985c:	b510      	push	{r4, lr}
    int idx;
    
    idx = EP2IDX(bEP);
    985e:	f000 040f 	and.w	r4, r0, #15
    9862:	09c0      	lsrs	r0, r0, #7
    9864:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
    9868:	4809      	ldr	r0, [pc, #36]	; (9890 <USBHwEPConfig+0x34>)
    986a:	2301      	movs	r3, #1
    986c:	6802      	ldr	r2, [r0, #0]
    986e:	40a3      	lsls	r3, r4
    9870:	4313      	orrs	r3, r2
    9872:	6003      	str	r3, [r0, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    9874:	4b07      	ldr	r3, [pc, #28]	; (9894 <USBHwEPConfig+0x38>)
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    Wait4DevInt(EP_RLZED);
    9876:	f44f 7080 	mov.w	r0, #256	; 0x100
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    USBReEp |= (1 << idx);
#ifdef LPC17xx
    USBEpIn = idx;
    987a:	601c      	str	r4, [r3, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    987c:	6059      	str	r1, [r3, #4]
    Wait4DevInt(EP_RLZED);
    987e:	f7ff ffc5 	bl	980c <Wait4DevInt>
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    9882:	f044 0040 	orr.w	r0, r4, #64	; 0x40
    9886:	2100      	movs	r1, #0
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);

    // enable EP
    USBHwEPEnable(idx, TRUE);
}
    9888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    988c:	f7ff bfd6 	b.w	983c <USBHwCmdWrite>
    9890:	5000c244 	.word	0x5000c244
    9894:	5000c248 	.word	0x5000c248

00009898 <USBHwRegisterEPIntHandler>:
    idx = EP2IDX(bEP);

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    9898:	4a09      	ldr	r2, [pc, #36]	; (98c0 <USBHwRegisterEPIntHandler+0x28>)
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    int idx;
    
    idx = EP2IDX(bEP);
    989a:	f000 030f 	and.w	r3, r0, #15

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    989e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    98a2:	4908      	ldr	r1, [pc, #32]	; (98c4 <USBHwRegisterEPIntHandler+0x2c>)
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    int idx;
    
    idx = EP2IDX(bEP);
    98a4:	09c0      	lsrs	r0, r0, #7

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    98a6:	680a      	ldr	r2, [r1, #0]
    idx = EP2IDX(bEP);

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    98a8:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    98ac:	2301      	movs	r3, #1
    98ae:	4083      	lsls	r3, r0
    98b0:	4313      	orrs	r3, r2
    USBDevIntEn |= EP_SLOW;
    98b2:	4a05      	ldr	r2, [pc, #20]	; (98c8 <USBHwRegisterEPIntHandler+0x30>)

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    98b4:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    98b6:	6813      	ldr	r3, [r2, #0]
    98b8:	f043 0304 	orr.w	r3, r3, #4
    98bc:	6013      	str	r3, [r2, #0]
    98be:	4770      	bx	lr
    98c0:	100011d0 	.word	0x100011d0
    98c4:	5000c234 	.word	0x5000c234
    98c8:	5000c204 	.word	0x5000c204

000098cc <USBHwRegisterDevIntHandler>:
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    98cc:	4b03      	ldr	r3, [pc, #12]	; (98dc <USBHwRegisterDevIntHandler+0x10>)
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    98ce:	4a04      	ldr	r2, [pc, #16]	; (98e0 <USBHwRegisterDevIntHandler+0x14>)
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    _pfnDevIntHandler = pfnHandler;
    98d0:	6418      	str	r0, [r3, #64]	; 0x40
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    98d2:	6813      	ldr	r3, [r2, #0]
    98d4:	f043 0308 	orr.w	r3, r3, #8
    98d8:	6013      	str	r3, [r2, #0]
    98da:	4770      	bx	lr
    98dc:	100011d0 	.word	0x100011d0
    98e0:	5000c204 	.word	0x5000c204

000098e4 <USBHwSetAddress>:
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    98e4:	f040 0180 	orr.w	r1, r0, #128	; 0x80
    98e8:	20d0      	movs	r0, #208	; 0xd0
    98ea:	f7ff bfa7 	b.w	983c <USBHwCmdWrite>

000098ee <USBHwConnect>:
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    98ee:	1c01      	adds	r1, r0, #0
    98f0:	bf18      	it	ne
    98f2:	2101      	movne	r1, #1
    98f4:	20fe      	movs	r0, #254	; 0xfe
    98f6:	f7ff bfa1 	b.w	983c <USBHwCmdWrite>

000098fa <USBHwNakIntEnable>:
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    98fa:	4601      	mov	r1, r0
    98fc:	20f3      	movs	r0, #243	; 0xf3
    98fe:	f7ff bf9d 	b.w	983c <USBHwCmdWrite>
    9902:	0000      	movs	r0, r0

00009904 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    9904:	b510      	push	{r4, lr}
    int idx = EP2IDX(bEP);
    9906:	f000 040f 	and.w	r4, r0, #15
    990a:	09c0      	lsrs	r0, r0, #7
    990c:	ea40 0444 	orr.w	r4, r0, r4, lsl #1
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    9910:	4620      	mov	r0, r4
    9912:	f7ff ff87 	bl	9824 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    9916:	0424      	lsls	r4, r4, #16
    9918:	4b05      	ldr	r3, [pc, #20]	; (9930 <USBHwEPGetStatus+0x2c>)
    991a:	f444 7400 	orr.w	r4, r4, #512	; 0x200
    991e:	601c      	str	r4, [r3, #0]
    Wait4DevInt(CDFULL);
    9920:	2020      	movs	r0, #32
    9922:	f7ff ff73 	bl	980c <Wait4DevInt>
    return USBCmdData;
    9926:	4b03      	ldr	r3, [pc, #12]	; (9934 <USBHwEPGetStatus+0x30>)
    9928:	6818      	ldr	r0, [r3, #0]
U8  USBHwEPGetStatus(U8 bEP)
{
    int idx = EP2IDX(bEP);

    return USBHwCmdRead(CMD_EP_SELECT | idx);
}
    992a:	b2c0      	uxtb	r0, r0
    992c:	bd10      	pop	{r4, pc}
    992e:	bf00      	nop
    9930:	5000c210 	.word	0x5000c210
    9934:	5000c214 	.word	0x5000c214

00009938 <USBHwEPStall>:
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    int idx = EP2IDX(bEP);
    9938:	f000 030f 	and.w	r3, r0, #15
    993c:	09c0      	lsrs	r0, r0, #7
    993e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    9942:	3100      	adds	r1, #0
    9944:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    9948:	bf18      	it	ne
    994a:	2101      	movne	r1, #1
    994c:	f7ff bf76 	b.w	983c <USBHwCmdWrite>

00009950 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    9950:	b538      	push	{r3, r4, r5, lr}
    9952:	4615      	mov	r5, r2
    U32 idx;
    
    idx = EP2IDX(bEP);
    9954:	f000 030f 	and.w	r3, r0, #15
    9958:	09c0      	lsrs	r0, r0, #7
    995a:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    995e:	4a13      	ldr	r2, [pc, #76]	; (99ac <USBHwEPWrite+0x5c>)
    9960:	009b      	lsls	r3, r3, #2
    9962:	f043 0302 	orr.w	r3, r3, #2
    9966:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    9968:	4b11      	ldr	r3, [pc, #68]	; (99b0 <USBHwEPWrite+0x60>)
    996a:	601d      	str	r5, [r3, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    996c:	6813      	ldr	r3, [r2, #0]
    996e:	3104      	adds	r1, #4
    9970:	f013 0302 	ands.w	r3, r3, #2
    9974:	d010      	beq.n	9998 <USBHwEPWrite+0x48>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    9976:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    997a:	f811 4c01 	ldrb.w	r4, [r1, #-1]
    997e:	041b      	lsls	r3, r3, #16
    9980:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
    9984:	f811 4c04 	ldrb.w	r4, [r1, #-4]
    9988:	4323      	orrs	r3, r4
    998a:	f811 4c03 	ldrb.w	r4, [r1, #-3]
    998e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    9992:	4c08      	ldr	r4, [pc, #32]	; (99b4 <USBHwEPWrite+0x64>)
    9994:	6023      	str	r3, [r4, #0]
    9996:	e7e9      	b.n	996c <USBHwEPWrite+0x1c>
        pbBuf += 4;
    }

    USBCtrl = 0;
    9998:	4a04      	ldr	r2, [pc, #16]	; (99ac <USBHwEPWrite+0x5c>)
    999a:	6013      	str	r3, [r2, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    999c:	f7ff ff42 	bl	9824 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    99a0:	20fa      	movs	r0, #250	; 0xfa
    99a2:	f7ff ff3f 	bl	9824 <USBHwCmd>
    
    return iLen;
}
    99a6:	4628      	mov	r0, r5
    99a8:	bd38      	pop	{r3, r4, r5, pc}
    99aa:	bf00      	nop
    99ac:	5000c228 	.word	0x5000c228
    99b0:	5000c224 	.word	0x5000c224
    99b4:	5000c21c 	.word	0x5000c21c

000099b8 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    99b8:	b570      	push	{r4, r5, r6, lr}
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    99ba:	4c17      	ldr	r4, [pc, #92]	; (9a18 <USBHwEPRead+0x60>)
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    99bc:	f000 030f 	and.w	r3, r0, #15
    99c0:	4626      	mov	r6, r4
    99c2:	09c0      	lsrs	r0, r0, #7
    99c4:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    99c8:	009b      	lsls	r3, r3, #2
    99ca:	f043 0301 	orr.w	r3, r3, #1
    99ce:	6023      	str	r3, [r4, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    99d0:	4b12      	ldr	r3, [pc, #72]	; (9a1c <USBHwEPRead+0x64>)
    99d2:	681b      	ldr	r3, [r3, #0]
    } while ((dwLen & PKT_RDY) == 0);
    99d4:	051d      	lsls	r5, r3, #20
    99d6:	d5fb      	bpl.n	99d0 <USBHwEPRead+0x18>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    99d8:	055c      	lsls	r4, r3, #21
    99da:	d51a      	bpl.n	9a12 <USBHwEPRead+0x5a>
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    99dc:	2500      	movs	r5, #0
    for (i = 0; i < dwLen; i++) {
    99de:	462c      	mov	r4, r5
    if ((dwLen & DV) == 0) {
        return -1;
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    99e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    99e4:	429c      	cmp	r4, r3
    99e6:	d00b      	beq.n	9a00 <USBHwEPRead+0x48>
        if ((i % 4) == 0) {
    99e8:	f014 0f03 	tst.w	r4, #3
            dwData = USBRxData;
    99ec:	bf04      	itt	eq
    99ee:	4d0c      	ldreq	r5, [pc, #48]	; (9a20 <USBHwEPRead+0x68>)
    99f0:	682d      	ldreq	r5, [r5, #0]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    99f2:	b111      	cbz	r1, 99fa <USBHwEPRead+0x42>
    99f4:	4294      	cmp	r4, r2
            pbBuf[i] = dwData & 0xFF;
    99f6:	bf38      	it	cc
    99f8:	550d      	strbcc	r5, [r1, r4]
        }
        dwData >>= 8;
    99fa:	0a2d      	lsrs	r5, r5, #8
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    99fc:	3401      	adds	r4, #1
    99fe:	e7f1      	b.n	99e4 <USBHwEPRead+0x2c>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    9a00:	2300      	movs	r3, #0
    9a02:	6033      	str	r3, [r6, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    9a04:	f7ff ff0e 	bl	9824 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    9a08:	20f2      	movs	r0, #242	; 0xf2
    9a0a:	f7ff ff0b 	bl	9824 <USBHwCmd>
    
    return dwLen;
    9a0e:	4620      	mov	r0, r4
    9a10:	bd70      	pop	{r4, r5, r6, pc}
        dwLen = USBRxPLen;
    } while ((dwLen & PKT_RDY) == 0);
    
    // packet valid?
    if ((dwLen & DV) == 0) {
        return -1;
    9a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    
    return dwLen;
}
    9a16:	bd70      	pop	{r4, r5, r6, pc}
    9a18:	5000c228 	.word	0x5000c228
    9a1c:	5000c220 	.word	0x5000c220
    9a20:	5000c218 	.word	0x5000c218

00009a24 <USBHwConfigDevice>:
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    9a24:	1c01      	adds	r1, r0, #0
    9a26:	bf18      	it	ne
    9a28:	2101      	movne	r1, #1
    9a2a:	20d8      	movs	r0, #216	; 0xd8
    9a2c:	f7ff bf06 	b.w	983c <USBHwCmdWrite>

00009a30 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    9a30:	b538      	push	{r3, r4, r5, lr}

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    9a32:	4b29      	ldr	r3, [pc, #164]	; (9ad8 <USBHwISR+0xa8>)
    9a34:	681c      	ldr	r4, [r3, #0]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    9a36:	07e1      	lsls	r1, r4, #31
    9a38:	d511      	bpl.n	9a5e <USBHwISR+0x2e>
        // clear int
        USBDevIntClr = FRAME;
    9a3a:	2201      	movs	r2, #1
    9a3c:	609a      	str	r2, [r3, #8]
        // call handler
        if (_pfnFrameHandler != NULL) {
    9a3e:	4b27      	ldr	r3, [pc, #156]	; (9adc <USBHwISR+0xac>)
    9a40:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    9a42:	b165      	cbz	r5, 9a5e <USBHwISR+0x2e>
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    9a44:	20f5      	movs	r0, #245	; 0xf5
    9a46:	f7ff feed 	bl	9824 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    9a4a:	4b25      	ldr	r3, [pc, #148]	; (9ae0 <USBHwISR+0xb0>)
    9a4c:	4a25      	ldr	r2, [pc, #148]	; (9ae4 <USBHwISR+0xb4>)
    Wait4DevInt(CDFULL);
    9a4e:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    9a50:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    9a52:	f7ff fedb 	bl	980c <Wait4DevInt>
    return USBCmdData;
    9a56:	4b24      	ldr	r3, [pc, #144]	; (9ae8 <USBHwISR+0xb8>)
    9a58:	6818      	ldr	r0, [r3, #0]
        // clear int
        USBDevIntClr = FRAME;
        // call handler
        if (_pfnFrameHandler != NULL) {
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
            _pfnFrameHandler(wFrame);
    9a5a:	b2c0      	uxtb	r0, r0
    9a5c:	47a8      	blx	r5
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    9a5e:	0722      	lsls	r2, r4, #28
    9a60:	d517      	bpl.n	9a92 <USBHwISR+0x62>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    9a62:	4b22      	ldr	r3, [pc, #136]	; (9aec <USBHwISR+0xbc>)
    9a64:	2208      	movs	r2, #8
    9a66:	601a      	str	r2, [r3, #0]
    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    // write command code
    USBHwCmd(bCmd);
    9a68:	20fe      	movs	r0, #254	; 0xfe
    9a6a:	f7ff fedb 	bl	9824 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    9a6e:	4b1c      	ldr	r3, [pc, #112]	; (9ae0 <USBHwISR+0xb0>)
    9a70:	4a1f      	ldr	r2, [pc, #124]	; (9af0 <USBHwISR+0xc0>)
    Wait4DevInt(CDFULL);
    9a72:	2020      	movs	r0, #32
{
    // write command code
    USBHwCmd(bCmd);
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    9a74:	601a      	str	r2, [r3, #0]
    Wait4DevInt(CDFULL);
    9a76:	f7ff fec9 	bl	980c <Wait4DevInt>
    return USBCmdData;
    9a7a:	4b1b      	ldr	r3, [pc, #108]	; (9ae8 <USBHwISR+0xb8>)
    9a7c:	6818      	ldr	r0, [r3, #0]
    9a7e:	b2c0      	uxtb	r0, r0
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    9a80:	f010 0f1a 	tst.w	r0, #26
    9a84:	d005      	beq.n	9a92 <USBHwISR+0x62>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    9a86:	4b15      	ldr	r3, [pc, #84]	; (9adc <USBHwISR+0xac>)
    9a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    9a8a:	b113      	cbz	r3, 9a92 <USBHwISR+0x62>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    9a8c:	f000 0015 	and.w	r0, r0, #21
    9a90:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    9a92:	0763      	lsls	r3, r4, #29
    9a94:	d51e      	bpl.n	9ad4 <USBHwISR+0xa4>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    9a96:	4b15      	ldr	r3, [pc, #84]	; (9aec <USBHwISR+0xbc>)
    9a98:	2204      	movs	r2, #4
    9a9a:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    9a9c:	2400      	movs	r4, #0
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
    9a9e:	4a15      	ldr	r2, [pc, #84]	; (9af4 <USBHwISR+0xc4>)
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
    9aa0:	2301      	movs	r3, #1
            if (USBEpIntSt & dwIntBit) {
    9aa2:	6812      	ldr	r2, [r2, #0]
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
    9aa4:	40a3      	lsls	r3, r4
            if (USBEpIntSt & dwIntBit) {
    9aa6:	4213      	tst	r3, r2
    9aa8:	d011      	beq.n	9ace <USBHwISR+0x9e>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    9aaa:	4a13      	ldr	r2, [pc, #76]	; (9af8 <USBHwISR+0xc8>)
                Wait4DevInt(CDFULL);
    9aac:	2020      	movs	r0, #32
        // check all endpoints
        for (i = 0; i < 32; i++) {
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    9aae:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    9ab0:	f7ff feac 	bl	980c <Wait4DevInt>
                bEPStat = USBCmdData;
    9ab4:	4b0c      	ldr	r3, [pc, #48]	; (9ae8 <USBHwISR+0xb8>)
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    9ab6:	1060      	asrs	r0, r4, #1
            dwIntBit = (1 << i);
            if (USBEpIntSt & dwIntBit) {
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
                Wait4DevInt(CDFULL);
                bEPStat = USBCmdData;
    9ab8:	6819      	ldr	r1, [r3, #0]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    9aba:	4b08      	ldr	r3, [pc, #32]	; (9adc <USBHwISR+0xac>)
    9abc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    9ac0:	b12b      	cbz	r3, 9ace <USBHwISR+0x9e>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    9ac2:	ea40 10c4 	orr.w	r0, r0, r4, lsl #7
    9ac6:	b2c0      	uxtb	r0, r0
    9ac8:	f001 011f 	and.w	r1, r1, #31
    9acc:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    9ace:	3401      	adds	r4, #1
    9ad0:	2c20      	cmp	r4, #32
    9ad2:	d1e4      	bne.n	9a9e <USBHwISR+0x6e>
    9ad4:	bd38      	pop	{r3, r4, r5, pc}
    9ad6:	bf00      	nop
    9ad8:	5000c200 	.word	0x5000c200
    9adc:	100011d0 	.word	0x100011d0
    9ae0:	5000c210 	.word	0x5000c210
    9ae4:	00f50200 	.word	0x00f50200
    9ae8:	5000c214 	.word	0x5000c214
    9aec:	5000c208 	.word	0x5000c208
    9af0:	00fe0200 	.word	0x00fe0200
    9af4:	5000c230 	.word	0x5000c230
    9af8:	5000c238 	.word	0x5000c238

00009afc <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    9afc:	b508      	push	{r3, lr}
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    9afe:	4a25      	ldr	r2, [pc, #148]	; (9b94 <USBHwInit+0x98>)
    9b00:	6813      	ldr	r3, [r2, #0]
    9b02:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    9b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    9b0a:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    9b0c:	f852 3c04 	ldr.w	r3, [r2, #-4]
    9b10:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    9b14:	f043 0310 	orr.w	r3, r3, #16
    9b18:	f842 3c04 	str.w	r3, [r2, #-4]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    9b1c:	f852 3c04 	ldr.w	r3, [r2, #-4]
    9b20:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    9b24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    9b28:	f842 3c04 	str.w	r3, [r2, #-4]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    9b2c:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    9b30:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    9b34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    9b38:	f842 3c0c 	str.w	r3, [r2, #-12]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    9b3c:	f852 3c0c 	ldr.w	r3, [r2, #-12]
    9b40:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    9b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    9b48:	f842 3c0c 	str.w	r3, [r2, #-12]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    9b4c:	f502 2250 	add.w	r2, r2, #851968	; 0xd0000
    9b50:	32b4      	adds	r2, #180	; 0xb4
    9b52:	6813      	ldr	r3, [r2, #0]
    9b54:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    9b58:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    9b5a:	4a0f      	ldr	r2, [pc, #60]	; (9b98 <USBHwInit+0x9c>)
    9b5c:	6813      	ldr	r3, [r2, #0]
    9b5e:	f043 0312 	orr.w	r3, r3, #18
    9b62:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    9b64:	4b0d      	ldr	r3, [pc, #52]	; (9b9c <USBHwInit+0xa0>)
    9b66:	681a      	ldr	r2, [r3, #0]
    9b68:	0791      	lsls	r1, r2, #30
    9b6a:	d5fb      	bpl.n	9b64 <USBHwInit+0x68>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    9b6c:	681a      	ldr	r2, [r3, #0]
    9b6e:	06d2      	lsls	r2, r2, #27
    9b70:	d5fc      	bpl.n	9b6c <USBHwInit+0x70>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    9b72:	4b0b      	ldr	r3, [pc, #44]	; (9ba0 <USBHwInit+0xa4>)
    9b74:	2000      	movs	r0, #0
    USBDevIntClr = 0xFFFFFFFF;
    9b76:	4a0b      	ldr	r2, [pc, #44]	; (9ba4 <USBHwInit+0xa8>)
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    9b78:	6018      	str	r0, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    9b7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9b7e:	6013      	str	r3, [r2, #0]
    USBDevIntPri = 0;
    9b80:	6250      	str	r0, [r2, #36]	; 0x24

    USBEpIntEn = 0;
    9b82:	62d0      	str	r0, [r2, #44]	; 0x2c
    USBEpIntClr = 0xFFFFFFFF;
    9b84:	6313      	str	r3, [r2, #48]	; 0x30
    USBEpIntPri = 0;
    9b86:	4b08      	ldr	r3, [pc, #32]	; (9ba8 <USBHwInit+0xac>)
    9b88:	6018      	str	r0, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    9b8a:	f7ff feb6 	bl	98fa <USBHwNakIntEnable>
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
}
    9b8e:	2001      	movs	r0, #1
    9b90:	bd08      	pop	{r3, pc}
    9b92:	bf00      	nop
    9b94:	4002c010 	.word	0x4002c010
    9b98:	5000cff4 	.word	0x5000cff4
    9b9c:	5000cff8 	.word	0x5000cff8
    9ba0:	5000c204 	.word	0x5000c204
    9ba4:	5000c208 	.word	0x5000c208
    9ba8:	5000c240 	.word	0x5000c240

00009bac <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    9bac:	b570      	push	{r4, r5, r6, lr}
	if(bMsVendorIndex == 0)	{
    9bae:	4c16      	ldr	r4, [pc, #88]	; (9c08 <USBFilterOsVendorMessage+0x5c>)
    9bb0:	7825      	ldrb	r5, [r4, #0]
    9bb2:	2400      	movs	r4, #0
    9bb4:	b315      	cbz	r5, 9bfc <USBFilterOsVendorMessage+0x50>
		// Feature is disabled.
		return FALSE;
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    9bb6:	7846      	ldrb	r6, [r0, #1]
    9bb8:	42ae      	cmp	r6, r5
    9bba:	d121      	bne.n	9c00 <USBFilterOsVendorMessage+0x54>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    9bbc:	600c      	str	r4, [r1, #0]
	
		int iRequestLength = pSetup->wLength;
    9bbe:	88c6      	ldrh	r6, [r0, #6]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    9bc0:	8844      	ldrh	r4, [r0, #2]
	
		switch (pSetup->wIndex) {
    9bc2:	8880      	ldrh	r0, [r0, #4]
    9bc4:	2804      	cmp	r0, #4
    9bc6:	d005      	beq.n	9bd4 <USBFilterOsVendorMessage+0x28>
    9bc8:	2805      	cmp	r0, #5
    9bca:	d11b      	bne.n	9c04 <USBFilterOsVendorMessage+0x58>
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    9bcc:	480f      	ldr	r0, [pc, #60]	; (9c0c <USBFilterOsVendorMessage+0x60>)
    9bce:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    9bd0:	2092      	movs	r0, #146	; 0x92
    9bd2:	e002      	b.n	9bda <USBFilterOsVendorMessage+0x2e>
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
	
		switch (pSetup->wIndex) {
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    9bd4:	480e      	ldr	r0, [pc, #56]	; (9c10 <USBFilterOsVendorMessage+0x64>)
    9bd6:	6018      	str	r0, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    9bd8:	2028      	movs	r0, #40	; 0x28
			break;
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    9bda:	6010      	str	r0, [r2, #0]
		default:
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    9bdc:	0a20      	lsrs	r0, r4, #8
		if (*piLen < iPageOffset) {
    9bde:	6814      	ldr	r4, [r2, #0]
		default:
			return TRUE;
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    9be0:	0400      	lsls	r0, r0, #16
		if (*piLen < iPageOffset) {
    9be2:	4284      	cmp	r4, r0
    9be4:	db0e      	blt.n	9c04 <USBFilterOsVendorMessage+0x58>
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    9be6:	681d      	ldr	r5, [r3, #0]
    9be8:	4405      	add	r5, r0
		*piLen -= iPageOffset;
    9bea:	1a20      	subs	r0, r4, r0
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
		}
		*ppbData += iPageOffset;
    9bec:	601d      	str	r5, [r3, #0]
    9bee:	42b0      	cmp	r0, r6
    9bf0:	bfd4      	ite	le
    9bf2:	6010      	strle	r0, [r2, #0]
    9bf4:	6016      	strgt	r6, [r2, #0]
		if (*piLen > iRequestLength) {
			// Clip data longer than the requested length
			*piLen = iRequestLength;
		}
	
		*pfSuccess = TRUE;
    9bf6:	2001      	movs	r0, #1
    9bf8:	6008      	str	r0, [r1, #0]
		return TRUE;
    9bfa:	bd70      	pop	{r4, r5, r6, pc}
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
	if(bMsVendorIndex == 0)	{
		// Feature is disabled.
		return FALSE;
    9bfc:	4628      	mov	r0, r5
    9bfe:	bd70      	pop	{r4, r5, r6, pc}
    9c00:	4620      	mov	r0, r4
    9c02:	bd70      	pop	{r4, r5, r6, pc}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
		if (*piLen < iPageOffset) {
			// Not enough data for the requested offset.
			return TRUE;
    9c04:	2001      	movs	r0, #1
		return TRUE;
	}
	
	// These are not the requests you are looking for
	return FALSE;
}
    9c06:	bd70      	pop	{r4, r5, r6, pc}
    9c08:	10001218 	.word	0x10001218
    9c0c:	10000961 	.word	0x10000961
    9c10:	0000b028 	.word	0x0000b028

00009c14 <USBRegisterWinusbInterface>:
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
	bMsVendorIndex = bVendorRequestIndex;
    9c14:	4b08      	ldr	r3, [pc, #32]	; (9c38 <USBRegisterWinusbInterface+0x24>)
    9c16:	7018      	strb	r0, [r3, #0]
	
	if(!pcInterfaceGuid) {
    9c18:	b161      	cbz	r1, 9c34 <USBRegisterWinusbInterface+0x20>
    9c1a:	4b08      	ldr	r3, [pc, #32]	; (9c3c <USBRegisterWinusbInterface+0x28>)
    9c1c:	1e4a      	subs	r2, r1, #1
    9c1e:	3125      	adds	r1, #37	; 0x25
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
		if(!pcInterfaceGuid[i]) break;
    9c20:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    9c24:	b118      	cbz	r0, 9c2e <USBRegisterWinusbInterface+0x1a>
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    9c26:	428a      	cmp	r2, r1
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    9c28:	f803 0b02 	strb.w	r0, [r3], #2
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    9c2c:	d1f8      	bne.n	9c20 <USBRegisterWinusbInterface+0xc>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    9c2e:	2200      	movs	r2, #0
    9c30:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    9c32:	709a      	strb	r2, [r3, #2]
    9c34:	4770      	bx	lr
    9c36:	bf00      	nop
    9c38:	10001218 	.word	0x10001218
    9c3c:	100009a3 	.word	0x100009a3

00009c40 <USBRegisterDescriptors>:

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(U8 *pabDescriptors)
{
	pabDescrip = pabDescriptors;
    9c40:	4b01      	ldr	r3, [pc, #4]	; (9c48 <USBRegisterDescriptors+0x8>)
    9c42:	6058      	str	r0, [r3, #4]
    9c44:	4770      	bx	lr
    9c46:	bf00      	nop
    9c48:	10001218 	.word	0x10001218

00009c4c <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    9c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    9c4e:	0a06      	lsrs	r6, r0, #8
	bIndex = GET_DESC_INDEX(wTypeIndex);
	
    if (bType == DESC_STRING &&
    9c50:	2e03      	cmp	r6, #3
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
	bIndex = GET_DESC_INDEX(wTypeIndex);
    9c52:	b2c4      	uxtb	r4, r0
    9c54:	4811      	ldr	r0, [pc, #68]	; (9c9c <USBGetDescriptor+0x50>)
	
    if (bType == DESC_STRING &&
    9c56:	d108      	bne.n	9c6a <USBGetDescriptor+0x1e>
    9c58:	2cee      	cmp	r4, #238	; 0xee
    9c5a:	d106      	bne.n	9c6a <USBGetDescriptor+0x1e>
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    9c5c:	4910      	ldr	r1, [pc, #64]	; (9ca0 <USBGetDescriptor+0x54>)
    9c5e:	7800      	ldrb	r0, [r0, #0]
	
	*ppbData = abOsStringDescriptor;
    9c60:	3192      	adds	r1, #146	; 0x92
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    9c62:	7408      	strb	r0, [r1, #16]
	
	*ppbData = abOsStringDescriptor;
    9c64:	6019      	str	r1, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    9c66:	2312      	movs	r3, #18
    9c68:	e012      	b.n	9c90 <USBGetDescriptor+0x44>
            return TRUE;
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    9c6a:	6841      	ldr	r1, [r0, #4]
	iCurIndex = 0;
    9c6c:	2500      	movs	r5, #0
	
	while (pab[DESC_bLength] != 0) {
    9c6e:	e001      	b.n	9c74 <USBGetDescriptor+0x28>
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
			}
			iCurIndex++;
    9c70:	3501      	adds	r5, #1
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    9c72:	4401      	add	r1, r0
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    9c74:	7808      	ldrb	r0, [r1, #0]
    9c76:	b180      	cbz	r0, 9c9a <USBGetDescriptor+0x4e>
		if (pab[DESC_bDescriptorType] == bType) {
    9c78:	784f      	ldrb	r7, [r1, #1]
    9c7a:	42b7      	cmp	r7, r6
    9c7c:	d1f9      	bne.n	9c72 <USBGetDescriptor+0x26>
			if (iCurIndex == bIndex) {
    9c7e:	42a5      	cmp	r5, r4
    9c80:	d1f6      	bne.n	9c70 <USBGetDescriptor+0x24>
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    9c82:	2e02      	cmp	r6, #2
	
	while (pab[DESC_bLength] != 0) {
		if (pab[DESC_bDescriptorType] == bType) {
			if (iCurIndex == bIndex) {
				// set data pointer
				*ppbData = pab;
    9c84:	6019      	str	r1, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    9c86:	d106      	bne.n	9c96 <USBGetDescriptor+0x4a>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    9c88:	78c8      	ldrb	r0, [r1, #3]
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    9c8a:	788b      	ldrb	r3, [r1, #2]
    9c8c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    9c90:	6013      	str	r3, [r2, #0]
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
				}
				return TRUE;
    9c92:	2001      	movs	r0, #1
    9c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    9c96:	780b      	ldrb	r3, [r1, #0]
    9c98:	e7fa      	b.n	9c90 <USBGetDescriptor+0x44>
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
}
    9c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c9c:	10001218 	.word	0x10001218
    9ca0:	10000961 	.word	0x10000961

00009ca4 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    9ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    9ca8:	4e4b      	ldr	r6, [pc, #300]	; (9dd8 <USBHandleStandardRequest+0x134>)
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    9caa:	4605      	mov	r5, r0
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    9cac:	68b3      	ldr	r3, [r6, #8]
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    9cae:	460f      	mov	r7, r1
    9cb0:	4614      	mov	r4, r2
    9cb2:	46b0      	mov	r8, r6
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    9cb4:	b943      	cbnz	r3, 9cc8 <USBHandleStandardRequest+0x24>
		return TRUE;
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    9cb6:	7828      	ldrb	r0, [r5, #0]
    9cb8:	f000 061f 	and.w	r6, r0, #31
    9cbc:	2e01      	cmp	r6, #1
    9cbe:	d055      	beq.n	9d6c <USBHandleStandardRequest+0xc8>
    9cc0:	d306      	bcc.n	9cd0 <USBHandleStandardRequest+0x2c>
    9cc2:	2e02      	cmp	r6, #2
    9cc4:	d064      	beq.n	9d90 <USBHandleStandardRequest+0xec>
    9cc6:	e083      	b.n	9dd0 <USBHandleStandardRequest+0x12c>
	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    9cc8:	4798      	blx	r3
    9cca:	2800      	cmp	r0, #0
    9ccc:	d0f3      	beq.n	9cb6 <USBHandleStandardRequest+0x12>
    9cce:	e04a      	b.n	9d66 <USBHandleStandardRequest+0xc2>
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    9cd0:	786a      	ldrb	r2, [r5, #1]

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;
    9cd2:	6823      	ldr	r3, [r4, #0]

	switch (pSetup->bRequest) {
    9cd4:	2a09      	cmp	r2, #9
    9cd6:	d87b      	bhi.n	9dd0 <USBHandleStandardRequest+0x12c>
    9cd8:	e8df f002 	tbb	[pc, r2]
    9cdc:	7a7a7a05 	.word	0x7a7a7a05
    9ce0:	7a0d097a 	.word	0x7a0d097a
    9ce4:	1c15      	.short	0x1c15
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    9ce6:	2200      	movs	r2, #0
    9ce8:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    9cea:	705a      	strb	r2, [r3, #1]
    9cec:	e047      	b.n	9d7e <USBHandleStandardRequest+0xda>
		*piLen = 2;
		break;
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    9cee:	78a8      	ldrb	r0, [r5, #2]
    9cf0:	f7ff fdf8 	bl	98e4 <USBHwSetAddress>
    9cf4:	e037      	b.n	9d66 <USBHandleStandardRequest+0xc2>
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    9cf6:	8868      	ldrh	r0, [r5, #2]
    9cf8:	88a9      	ldrh	r1, [r5, #4]
    9cfa:	463a      	mov	r2, r7
    9cfc:	4623      	mov	r3, r4
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    9cfe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		USBHwSetAddress(pSetup->wValue);
		break;

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    9d02:	f7ff bfa3 	b.w	9c4c <USBGetDescriptor>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    9d06:	f898 200c 	ldrb.w	r2, [r8, #12]
		*piLen = 1;
    9d0a:	2001      	movs	r0, #1
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    9d0c:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    9d0e:	6038      	str	r0, [r7, #0]
    9d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		break;

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    9d14:	78ae      	ldrb	r6, [r5, #2]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    9d16:	b90e      	cbnz	r6, 9d1c <USBHandleStandardRequest+0x78>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    9d18:	4630      	mov	r0, r6
    9d1a:	e01f      	b.n	9d5c <USBHandleStandardRequest+0xb8>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;
    9d1c:	27ff      	movs	r7, #255	; 0xff
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
    9d1e:	46b9      	mov	r9, r7
		// unconfigure device
		USBHwConfigDevice(FALSE);
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    9d20:	f8d8 4004 	ldr.w	r4, [r8, #4]
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    9d24:	7823      	ldrb	r3, [r4, #0]
    9d26:	b1c3      	cbz	r3, 9d5a <USBHandleStandardRequest+0xb6>

			switch (pab[DESC_bDescriptorType]) {
    9d28:	7863      	ldrb	r3, [r4, #1]
    9d2a:	2b04      	cmp	r3, #4
    9d2c:	d006      	beq.n	9d3c <USBHandleStandardRequest+0x98>
    9d2e:	2b05      	cmp	r3, #5
    9d30:	d006      	beq.n	9d40 <USBHandleStandardRequest+0x9c>
    9d32:	2b02      	cmp	r3, #2
    9d34:	d10e      	bne.n	9d54 <USBHandleStandardRequest+0xb0>

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    9d36:	f894 9005 	ldrb.w	r9, [r4, #5]
    9d3a:	e00b      	b.n	9d54 <USBHandleStandardRequest+0xb0>
				break;

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    9d3c:	78e7      	ldrb	r7, [r4, #3]
    9d3e:	e009      	b.n	9d54 <USBHandleStandardRequest+0xb0>
				break;

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    9d40:	45b1      	cmp	r9, r6
    9d42:	d107      	bne.n	9d54 <USBHandleStandardRequest+0xb0>
    9d44:	b937      	cbnz	r7, 9d54 <USBHandleStandardRequest+0xb0>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    9d46:	7961      	ldrb	r1, [r4, #5]
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    9d48:	7923      	ldrb	r3, [r4, #4]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    9d4a:	78a0      	ldrb	r0, [r4, #2]
    9d4c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    9d50:	f7ff fd84 	bl	985c <USBHwEPConfig>

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    9d54:	7823      	ldrb	r3, [r4, #0]
    9d56:	441c      	add	r4, r3
    9d58:	e7e4      	b.n	9d24 <USBHandleStandardRequest+0x80>
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    9d5a:	2001      	movs	r0, #1
    9d5c:	f7ff fe62 	bl	9a24 <USBHwConfigDevice>
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    9d60:	886b      	ldrh	r3, [r5, #2]
    9d62:	f888 300c 	strb.w	r3, [r8, #12]
	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
	}
	
	return TRUE;
    9d66:	2001      	movs	r0, #1
    9d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    9d6c:	786b      	ldrb	r3, [r5, #1]
    9d6e:	6822      	ldr	r2, [r4, #0]
    9d70:	2b0a      	cmp	r3, #10
    9d72:	d006      	beq.n	9d82 <USBHandleStandardRequest+0xde>
    9d74:	2b0b      	cmp	r3, #11
    9d76:	d007      	beq.n	9d88 <USBHandleStandardRequest+0xe4>
    9d78:	bb53      	cbnz	r3, 9dd0 <USBHandleStandardRequest+0x12c>

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    9d7a:	7013      	strb	r3, [r2, #0]
		pbData[1] = 0;
    9d7c:	7053      	strb	r3, [r2, #1]
		*piLen = 2;
    9d7e:	2302      	movs	r3, #2
    9d80:	e004      	b.n	9d8c <USBHandleStandardRequest+0xe8>
		// not defined for interface
		return FALSE;
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    9d82:	2300      	movs	r3, #0
    9d84:	7013      	strb	r3, [r2, #0]
    9d86:	e016      	b.n	9db6 <USBHandleStandardRequest+0x112>
		*piLen = 1;
		break;
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    9d88:	886b      	ldrh	r3, [r5, #2]
    9d8a:	bb0b      	cbnz	r3, 9dd0 <USBHandleStandardRequest+0x12c>
			return FALSE;
		}
		*piLen = 0;
    9d8c:	603b      	str	r3, [r7, #0]
    9d8e:	e7ea      	b.n	9d66 <USBHandleStandardRequest+0xc2>
    9d90:	f8d4 8000 	ldr.w	r8, [r4]
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
    9d94:	786c      	ldrb	r4, [r5, #1]
    9d96:	2c01      	cmp	r4, #1
    9d98:	d00f      	beq.n	9dba <USBHandleStandardRequest+0x116>
    9d9a:	d302      	bcc.n	9da2 <USBHandleStandardRequest+0xfe>
    9d9c:	2c03      	cmp	r4, #3
    9d9e:	d010      	beq.n	9dc2 <USBHandleStandardRequest+0x11e>
    9da0:	e016      	b.n	9dd0 <USBHandleStandardRequest+0x12c>
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    9da2:	7928      	ldrb	r0, [r5, #4]
    9da4:	f7ff fdae 	bl	9904 <USBHwEPGetStatus>
		pbData[1] = 0;
    9da8:	2300      	movs	r3, #0
	U8	*pbData = *ppbData;

	switch (pSetup->bRequest) {
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    9daa:	f3c0 0040 	ubfx	r0, r0, #1, #1
    9dae:	f888 0000 	strb.w	r0, [r8]
		pbData[1] = 0;
    9db2:	f888 3001 	strb.w	r3, [r8, #1]
		*piLen = 2;
    9db6:	603e      	str	r6, [r7, #0]
    9db8:	e7d5      	b.n	9d66 <USBHandleStandardRequest+0xc2>
		break;
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    9dba:	8869      	ldrh	r1, [r5, #2]
    9dbc:	b941      	cbnz	r1, 9dd0 <USBHandleStandardRequest+0x12c>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    9dbe:	7928      	ldrb	r0, [r5, #4]
    9dc0:	e003      	b.n	9dca <USBHandleStandardRequest+0x126>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    9dc2:	886b      	ldrh	r3, [r5, #2]
    9dc4:	b923      	cbnz	r3, 9dd0 <USBHandleStandardRequest+0x12c>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    9dc6:	7928      	ldrb	r0, [r5, #4]
    9dc8:	2101      	movs	r1, #1
    9dca:	f7ff fdb5 	bl	9938 <USBHwEPStall>
    9dce:	e7ca      	b.n	9d66 <USBHandleStandardRequest+0xc2>
		break;
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
			return FALSE;
    9dd0:	2000      	movs	r0, #0
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
	default: 						return FALSE;
	}
}
    9dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9dd6:	bf00      	nop
    9dd8:	10001218 	.word	0x10001218

00009ddc <__aeabi_llsl>:
    9ddc:	4091      	lsls	r1, r2
    9dde:	1c03      	adds	r3, r0, #0
    9de0:	4090      	lsls	r0, r2
    9de2:	469c      	mov	ip, r3
    9de4:	3a20      	subs	r2, #32
    9de6:	4093      	lsls	r3, r2
    9de8:	4319      	orrs	r1, r3
    9dea:	4252      	negs	r2, r2
    9dec:	4663      	mov	r3, ip
    9dee:	40d3      	lsrs	r3, r2
    9df0:	4319      	orrs	r1, r3
    9df2:	4770      	bx	lr

00009df4 <__aeabi_uldivmod>:
    9df4:	b953      	cbnz	r3, 9e0c <__aeabi_uldivmod+0x18>
    9df6:	b94a      	cbnz	r2, 9e0c <__aeabi_uldivmod+0x18>
    9df8:	2900      	cmp	r1, #0
    9dfa:	bf08      	it	eq
    9dfc:	2800      	cmpeq	r0, #0
    9dfe:	bf1c      	itt	ne
    9e00:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    9e04:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    9e08:	f000 b83c 	b.w	9e84 <__aeabi_idiv0>
    9e0c:	b082      	sub	sp, #8
    9e0e:	46ec      	mov	ip, sp
    9e10:	e92d 5000 	stmdb	sp!, {ip, lr}
    9e14:	f000 f81e 	bl	9e54 <__gnu_uldivmod_helper>
    9e18:	f8dd e004 	ldr.w	lr, [sp, #4]
    9e1c:	b002      	add	sp, #8
    9e1e:	bc0c      	pop	{r2, r3}
    9e20:	4770      	bx	lr
    9e22:	bf00      	nop

00009e24 <__gnu_ldivmod_helper>:
    9e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e28:	9c06      	ldr	r4, [sp, #24]
    9e2a:	4690      	mov	r8, r2
    9e2c:	4606      	mov	r6, r0
    9e2e:	460f      	mov	r7, r1
    9e30:	461d      	mov	r5, r3
    9e32:	f000 f829 	bl	9e88 <__divdi3>
    9e36:	fb08 fc01 	mul.w	ip, r8, r1
    9e3a:	fba8 2300 	umull	r2, r3, r8, r0
    9e3e:	fb00 c505 	mla	r5, r0, r5, ip
    9e42:	1ab2      	subs	r2, r6, r2
    9e44:	442b      	add	r3, r5
    9e46:	eb67 0303 	sbc.w	r3, r7, r3
    9e4a:	4686      	mov	lr, r0
    9e4c:	e9c4 2300 	strd	r2, r3, [r4]
    9e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009e54 <__gnu_uldivmod_helper>:
    9e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e58:	9e08      	ldr	r6, [sp, #32]
    9e5a:	4617      	mov	r7, r2
    9e5c:	4680      	mov	r8, r0
    9e5e:	4689      	mov	r9, r1
    9e60:	461d      	mov	r5, r3
    9e62:	f000 f967 	bl	a134 <__udivdi3>
    9e66:	fb00 f305 	mul.w	r3, r0, r5
    9e6a:	fba0 4507 	umull	r4, r5, r0, r7
    9e6e:	fb07 3701 	mla	r7, r7, r1, r3
    9e72:	ebb8 0404 	subs.w	r4, r8, r4
    9e76:	443d      	add	r5, r7
    9e78:	eb69 0505 	sbc.w	r5, r9, r5
    9e7c:	e9c6 4500 	strd	r4, r5, [r6]
    9e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009e84 <__aeabi_idiv0>:
    9e84:	4770      	bx	lr
    9e86:	bf00      	nop

00009e88 <__divdi3>:
    9e88:	2900      	cmp	r1, #0
    9e8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9e8e:	f2c0 80a8 	blt.w	9fe2 <__divdi3+0x15a>
    9e92:	2600      	movs	r6, #0
    9e94:	2b00      	cmp	r3, #0
    9e96:	f2c0 809e 	blt.w	9fd6 <__divdi3+0x14e>
    9e9a:	4681      	mov	r9, r0
    9e9c:	468e      	mov	lr, r1
    9e9e:	4690      	mov	r8, r2
    9ea0:	469c      	mov	ip, r3
    9ea2:	4617      	mov	r7, r2
    9ea4:	4604      	mov	r4, r0
    9ea6:	460d      	mov	r5, r1
    9ea8:	2b00      	cmp	r3, #0
    9eaa:	d13d      	bne.n	9f28 <__divdi3+0xa0>
    9eac:	428a      	cmp	r2, r1
    9eae:	d959      	bls.n	9f64 <__divdi3+0xdc>
    9eb0:	fab2 f382 	clz	r3, r2
    9eb4:	b13b      	cbz	r3, 9ec6 <__divdi3+0x3e>
    9eb6:	f1c3 0220 	rsb	r2, r3, #32
    9eba:	409d      	lsls	r5, r3
    9ebc:	fa20 f202 	lsr.w	r2, r0, r2
    9ec0:	409f      	lsls	r7, r3
    9ec2:	4315      	orrs	r5, r2
    9ec4:	409c      	lsls	r4, r3
    9ec6:	0c39      	lsrs	r1, r7, #16
    9ec8:	fbb5 f0f1 	udiv	r0, r5, r1
    9ecc:	fa1f fe87 	uxth.w	lr, r7
    9ed0:	fb01 5510 	mls	r5, r1, r0, r5
    9ed4:	fb0e f300 	mul.w	r3, lr, r0
    9ed8:	0c22      	lsrs	r2, r4, #16
    9eda:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
    9ede:	42ab      	cmp	r3, r5
    9ee0:	d909      	bls.n	9ef6 <__divdi3+0x6e>
    9ee2:	19ed      	adds	r5, r5, r7
    9ee4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    9ee8:	f080 810b 	bcs.w	a102 <__divdi3+0x27a>
    9eec:	42ab      	cmp	r3, r5
    9eee:	f240 8108 	bls.w	a102 <__divdi3+0x27a>
    9ef2:	3802      	subs	r0, #2
    9ef4:	443d      	add	r5, r7
    9ef6:	1aed      	subs	r5, r5, r3
    9ef8:	fbb5 f3f1 	udiv	r3, r5, r1
    9efc:	fb01 5513 	mls	r5, r1, r3, r5
    9f00:	fb0e fe03 	mul.w	lr, lr, r3
    9f04:	b2a4      	uxth	r4, r4
    9f06:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    9f0a:	45ae      	cmp	lr, r5
    9f0c:	d908      	bls.n	9f20 <__divdi3+0x98>
    9f0e:	19ed      	adds	r5, r5, r7
    9f10:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    9f14:	f080 80f7 	bcs.w	a106 <__divdi3+0x27e>
    9f18:	45ae      	cmp	lr, r5
    9f1a:	f240 80f4 	bls.w	a106 <__divdi3+0x27e>
    9f1e:	3b02      	subs	r3, #2
    9f20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    9f24:	2200      	movs	r2, #0
    9f26:	e003      	b.n	9f30 <__divdi3+0xa8>
    9f28:	428b      	cmp	r3, r1
    9f2a:	d90f      	bls.n	9f4c <__divdi3+0xc4>
    9f2c:	2200      	movs	r2, #0
    9f2e:	4613      	mov	r3, r2
    9f30:	1c34      	adds	r4, r6, #0
    9f32:	bf18      	it	ne
    9f34:	2401      	movne	r4, #1
    9f36:	4260      	negs	r0, r4
    9f38:	f04f 0500 	mov.w	r5, #0
    9f3c:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
    9f40:	4058      	eors	r0, r3
    9f42:	4051      	eors	r1, r2
    9f44:	1900      	adds	r0, r0, r4
    9f46:	4169      	adcs	r1, r5
    9f48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9f4c:	fab3 f283 	clz	r2, r3
    9f50:	2a00      	cmp	r2, #0
    9f52:	f040 8089 	bne.w	a068 <__divdi3+0x1e0>
    9f56:	428b      	cmp	r3, r1
    9f58:	d302      	bcc.n	9f60 <__divdi3+0xd8>
    9f5a:	4580      	cmp	r8, r0
    9f5c:	f200 80e2 	bhi.w	a124 <__divdi3+0x29c>
    9f60:	2301      	movs	r3, #1
    9f62:	e7e5      	b.n	9f30 <__divdi3+0xa8>
    9f64:	b912      	cbnz	r2, 9f6c <__divdi3+0xe4>
    9f66:	2301      	movs	r3, #1
    9f68:	fbb3 f7f2 	udiv	r7, r3, r2
    9f6c:	fab7 f887 	clz	r8, r7
    9f70:	f1b8 0f00 	cmp.w	r8, #0
    9f74:	d13b      	bne.n	9fee <__divdi3+0x166>
    9f76:	1bed      	subs	r5, r5, r7
    9f78:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    9f7c:	fa1f fe87 	uxth.w	lr, r7
    9f80:	2201      	movs	r2, #1
    9f82:	fbb5 f0fc 	udiv	r0, r5, ip
    9f86:	fb0c 5510 	mls	r5, ip, r0, r5
    9f8a:	fb0e f300 	mul.w	r3, lr, r0
    9f8e:	0c21      	lsrs	r1, r4, #16
    9f90:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
    9f94:	42ab      	cmp	r3, r5
    9f96:	d907      	bls.n	9fa8 <__divdi3+0x120>
    9f98:	19ed      	adds	r5, r5, r7
    9f9a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    9f9e:	d202      	bcs.n	9fa6 <__divdi3+0x11e>
    9fa0:	42ab      	cmp	r3, r5
    9fa2:	f200 80c3 	bhi.w	a12c <__divdi3+0x2a4>
    9fa6:	4608      	mov	r0, r1
    9fa8:	1aed      	subs	r5, r5, r3
    9faa:	fbb5 f3fc 	udiv	r3, r5, ip
    9fae:	fb0c 5513 	mls	r5, ip, r3, r5
    9fb2:	fb0e fe03 	mul.w	lr, lr, r3
    9fb6:	b2a4      	uxth	r4, r4
    9fb8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    9fbc:	45ae      	cmp	lr, r5
    9fbe:	d907      	bls.n	9fd0 <__divdi3+0x148>
    9fc0:	19ed      	adds	r5, r5, r7
    9fc2:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
    9fc6:	d202      	bcs.n	9fce <__divdi3+0x146>
    9fc8:	45ae      	cmp	lr, r5
    9fca:	f200 80ad 	bhi.w	a128 <__divdi3+0x2a0>
    9fce:	460b      	mov	r3, r1
    9fd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    9fd4:	e7ac      	b.n	9f30 <__divdi3+0xa8>
    9fd6:	4252      	negs	r2, r2
    9fd8:	ea6f 0606 	mvn.w	r6, r6
    9fdc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    9fe0:	e75b      	b.n	9e9a <__divdi3+0x12>
    9fe2:	4240      	negs	r0, r0
    9fe4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    9fe8:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    9fec:	e752      	b.n	9e94 <__divdi3+0xc>
    9fee:	fa07 f708 	lsl.w	r7, r7, r8
    9ff2:	f1c8 0220 	rsb	r2, r8, #32
    9ff6:	fa25 f302 	lsr.w	r3, r5, r2
    9ffa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
    9ffe:	fbb3 f1fc 	udiv	r1, r3, ip
    a002:	fa1f fe87 	uxth.w	lr, r7
    a006:	fb0c 3311 	mls	r3, ip, r1, r3
    a00a:	fa24 f202 	lsr.w	r2, r4, r2
    a00e:	fa05 f508 	lsl.w	r5, r5, r8
    a012:	fb0e f901 	mul.w	r9, lr, r1
    a016:	432a      	orrs	r2, r5
    a018:	0c10      	lsrs	r0, r2, #16
    a01a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    a01e:	4599      	cmp	r9, r3
    a020:	fa04 f408 	lsl.w	r4, r4, r8
    a024:	d907      	bls.n	a036 <__divdi3+0x1ae>
    a026:	19db      	adds	r3, r3, r7
    a028:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
    a02c:	d278      	bcs.n	a120 <__divdi3+0x298>
    a02e:	4599      	cmp	r9, r3
    a030:	d976      	bls.n	a120 <__divdi3+0x298>
    a032:	3902      	subs	r1, #2
    a034:	443b      	add	r3, r7
    a036:	ebc9 0303 	rsb	r3, r9, r3
    a03a:	fbb3 f0fc 	udiv	r0, r3, ip
    a03e:	fb0c 3310 	mls	r3, ip, r0, r3
    a042:	fb0e f500 	mul.w	r5, lr, r0
    a046:	b292      	uxth	r2, r2
    a048:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    a04c:	429d      	cmp	r5, r3
    a04e:	d907      	bls.n	a060 <__divdi3+0x1d8>
    a050:	19db      	adds	r3, r3, r7
    a052:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    a056:	d25f      	bcs.n	a118 <__divdi3+0x290>
    a058:	429d      	cmp	r5, r3
    a05a:	d95d      	bls.n	a118 <__divdi3+0x290>
    a05c:	3802      	subs	r0, #2
    a05e:	443b      	add	r3, r7
    a060:	1b5d      	subs	r5, r3, r5
    a062:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
    a066:	e78c      	b.n	9f82 <__divdi3+0xfa>
    a068:	f1c2 0320 	rsb	r3, r2, #32
    a06c:	fa28 f103 	lsr.w	r1, r8, r3
    a070:	fa0c fc02 	lsl.w	ip, ip, r2
    a074:	ea41 0c0c 	orr.w	ip, r1, ip
    a078:	ea4f 401c 	mov.w	r0, ip, lsr #16
    a07c:	fa2e f103 	lsr.w	r1, lr, r3
    a080:	fbb1 f5f0 	udiv	r5, r1, r0
    a084:	fa1f f78c 	uxth.w	r7, ip
    a088:	fb00 1115 	mls	r1, r0, r5, r1
    a08c:	fa29 f303 	lsr.w	r3, r9, r3
    a090:	fa0e fe02 	lsl.w	lr, lr, r2
    a094:	fb07 f905 	mul.w	r9, r7, r5
    a098:	ea43 0e0e 	orr.w	lr, r3, lr
    a09c:	ea4f 431e 	mov.w	r3, lr, lsr #16
    a0a0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    a0a4:	4589      	cmp	r9, r1
    a0a6:	fa08 f802 	lsl.w	r8, r8, r2
    a0aa:	d908      	bls.n	a0be <__divdi3+0x236>
    a0ac:	eb11 010c 	adds.w	r1, r1, ip
    a0b0:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
    a0b4:	d232      	bcs.n	a11c <__divdi3+0x294>
    a0b6:	4589      	cmp	r9, r1
    a0b8:	d930      	bls.n	a11c <__divdi3+0x294>
    a0ba:	3d02      	subs	r5, #2
    a0bc:	4461      	add	r1, ip
    a0be:	ebc9 0101 	rsb	r1, r9, r1
    a0c2:	fbb1 f3f0 	udiv	r3, r1, r0
    a0c6:	fb00 1113 	mls	r1, r0, r3, r1
    a0ca:	fb07 f703 	mul.w	r7, r7, r3
    a0ce:	fa1f fe8e 	uxth.w	lr, lr
    a0d2:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
    a0d6:	4577      	cmp	r7, lr
    a0d8:	d908      	bls.n	a0ec <__divdi3+0x264>
    a0da:	eb1e 0e0c 	adds.w	lr, lr, ip
    a0de:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
    a0e2:	d217      	bcs.n	a114 <__divdi3+0x28c>
    a0e4:	4577      	cmp	r7, lr
    a0e6:	d915      	bls.n	a114 <__divdi3+0x28c>
    a0e8:	3b02      	subs	r3, #2
    a0ea:	44e6      	add	lr, ip
    a0ec:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    a0f0:	fba3 8908 	umull	r8, r9, r3, r8
    a0f4:	ebc7 0e0e 	rsb	lr, r7, lr
    a0f8:	45ce      	cmp	lr, r9
    a0fa:	d309      	bcc.n	a110 <__divdi3+0x288>
    a0fc:	d005      	beq.n	a10a <__divdi3+0x282>
    a0fe:	2200      	movs	r2, #0
    a100:	e716      	b.n	9f30 <__divdi3+0xa8>
    a102:	4610      	mov	r0, r2
    a104:	e6f7      	b.n	9ef6 <__divdi3+0x6e>
    a106:	4613      	mov	r3, r2
    a108:	e70a      	b.n	9f20 <__divdi3+0x98>
    a10a:	4094      	lsls	r4, r2
    a10c:	4544      	cmp	r4, r8
    a10e:	d2f6      	bcs.n	a0fe <__divdi3+0x276>
    a110:	3b01      	subs	r3, #1
    a112:	e7f4      	b.n	a0fe <__divdi3+0x276>
    a114:	460b      	mov	r3, r1
    a116:	e7e9      	b.n	a0ec <__divdi3+0x264>
    a118:	4610      	mov	r0, r2
    a11a:	e7a1      	b.n	a060 <__divdi3+0x1d8>
    a11c:	461d      	mov	r5, r3
    a11e:	e7ce      	b.n	a0be <__divdi3+0x236>
    a120:	4601      	mov	r1, r0
    a122:	e788      	b.n	a036 <__divdi3+0x1ae>
    a124:	4613      	mov	r3, r2
    a126:	e703      	b.n	9f30 <__divdi3+0xa8>
    a128:	3b02      	subs	r3, #2
    a12a:	e751      	b.n	9fd0 <__divdi3+0x148>
    a12c:	3802      	subs	r0, #2
    a12e:	443d      	add	r5, r7
    a130:	e73a      	b.n	9fa8 <__divdi3+0x120>
    a132:	bf00      	nop

0000a134 <__udivdi3>:
    a134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a138:	2b00      	cmp	r3, #0
    a13a:	d144      	bne.n	a1c6 <__udivdi3+0x92>
    a13c:	428a      	cmp	r2, r1
    a13e:	4615      	mov	r5, r2
    a140:	4604      	mov	r4, r0
    a142:	d94f      	bls.n	a1e4 <__udivdi3+0xb0>
    a144:	fab2 f782 	clz	r7, r2
    a148:	460e      	mov	r6, r1
    a14a:	b14f      	cbz	r7, a160 <__udivdi3+0x2c>
    a14c:	f1c7 0320 	rsb	r3, r7, #32
    a150:	40b9      	lsls	r1, r7
    a152:	fa20 f603 	lsr.w	r6, r0, r3
    a156:	fa02 f507 	lsl.w	r5, r2, r7
    a15a:	430e      	orrs	r6, r1
    a15c:	fa00 f407 	lsl.w	r4, r0, r7
    a160:	0c2f      	lsrs	r7, r5, #16
    a162:	fbb6 f0f7 	udiv	r0, r6, r7
    a166:	fa1f fe85 	uxth.w	lr, r5
    a16a:	fb07 6210 	mls	r2, r7, r0, r6
    a16e:	fb0e f100 	mul.w	r1, lr, r0
    a172:	0c26      	lsrs	r6, r4, #16
    a174:	ea46 4302 	orr.w	r3, r6, r2, lsl #16
    a178:	4299      	cmp	r1, r3
    a17a:	d909      	bls.n	a190 <__udivdi3+0x5c>
    a17c:	195b      	adds	r3, r3, r5
    a17e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    a182:	f080 80ee 	bcs.w	a362 <__udivdi3+0x22e>
    a186:	4299      	cmp	r1, r3
    a188:	f240 80eb 	bls.w	a362 <__udivdi3+0x22e>
    a18c:	3802      	subs	r0, #2
    a18e:	442b      	add	r3, r5
    a190:	1a59      	subs	r1, r3, r1
    a192:	fbb1 f3f7 	udiv	r3, r1, r7
    a196:	fb07 1113 	mls	r1, r7, r3, r1
    a19a:	fb0e fe03 	mul.w	lr, lr, r3
    a19e:	b2a4      	uxth	r4, r4
    a1a0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    a1a4:	458e      	cmp	lr, r1
    a1a6:	d908      	bls.n	a1ba <__udivdi3+0x86>
    a1a8:	1949      	adds	r1, r1, r5
    a1aa:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    a1ae:	f080 80da 	bcs.w	a366 <__udivdi3+0x232>
    a1b2:	458e      	cmp	lr, r1
    a1b4:	f240 80d7 	bls.w	a366 <__udivdi3+0x232>
    a1b8:	3b02      	subs	r3, #2
    a1ba:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    a1be:	2600      	movs	r6, #0
    a1c0:	4631      	mov	r1, r6
    a1c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a1c6:	428b      	cmp	r3, r1
    a1c8:	d847      	bhi.n	a25a <__udivdi3+0x126>
    a1ca:	fab3 f683 	clz	r6, r3
    a1ce:	2e00      	cmp	r6, #0
    a1d0:	d148      	bne.n	a264 <__udivdi3+0x130>
    a1d2:	428b      	cmp	r3, r1
    a1d4:	d302      	bcc.n	a1dc <__udivdi3+0xa8>
    a1d6:	4282      	cmp	r2, r0
    a1d8:	f200 80cf 	bhi.w	a37a <__udivdi3+0x246>
    a1dc:	2001      	movs	r0, #1
    a1de:	4631      	mov	r1, r6
    a1e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a1e4:	b912      	cbnz	r2, a1ec <__udivdi3+0xb8>
    a1e6:	2501      	movs	r5, #1
    a1e8:	fbb5 f5f2 	udiv	r5, r5, r2
    a1ec:	fab5 fc85 	clz	ip, r5
    a1f0:	f1bc 0f00 	cmp.w	ip, #0
    a1f4:	d178      	bne.n	a2e8 <__udivdi3+0x1b4>
    a1f6:	1b49      	subs	r1, r1, r5
    a1f8:	0c2f      	lsrs	r7, r5, #16
    a1fa:	fa1f fe85 	uxth.w	lr, r5
    a1fe:	2601      	movs	r6, #1
    a200:	fbb1 f0f7 	udiv	r0, r1, r7
    a204:	fb07 1110 	mls	r1, r7, r0, r1
    a208:	fb0e f200 	mul.w	r2, lr, r0
    a20c:	0c23      	lsrs	r3, r4, #16
    a20e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    a212:	428a      	cmp	r2, r1
    a214:	d907      	bls.n	a226 <__udivdi3+0xf2>
    a216:	1949      	adds	r1, r1, r5
    a218:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    a21c:	d202      	bcs.n	a224 <__udivdi3+0xf0>
    a21e:	428a      	cmp	r2, r1
    a220:	f200 80bc 	bhi.w	a39c <__udivdi3+0x268>
    a224:	4618      	mov	r0, r3
    a226:	1a89      	subs	r1, r1, r2
    a228:	fbb1 f3f7 	udiv	r3, r1, r7
    a22c:	fb07 1113 	mls	r1, r7, r3, r1
    a230:	fb0e fe03 	mul.w	lr, lr, r3
    a234:	b2a4      	uxth	r4, r4
    a236:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
    a23a:	4596      	cmp	lr, r2
    a23c:	d908      	bls.n	a250 <__udivdi3+0x11c>
    a23e:	1952      	adds	r2, r2, r5
    a240:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
    a244:	f080 8091 	bcs.w	a36a <__udivdi3+0x236>
    a248:	4596      	cmp	lr, r2
    a24a:	f240 808e 	bls.w	a36a <__udivdi3+0x236>
    a24e:	3b02      	subs	r3, #2
    a250:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    a254:	4631      	mov	r1, r6
    a256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a25a:	2600      	movs	r6, #0
    a25c:	4630      	mov	r0, r6
    a25e:	4631      	mov	r1, r6
    a260:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a264:	f1c6 0420 	rsb	r4, r6, #32
    a268:	fa22 f504 	lsr.w	r5, r2, r4
    a26c:	40b3      	lsls	r3, r6
    a26e:	432b      	orrs	r3, r5
    a270:	fa21 f704 	lsr.w	r7, r1, r4
    a274:	ea4f 4813 	mov.w	r8, r3, lsr #16
    a278:	fbb7 fcf8 	udiv	ip, r7, r8
    a27c:	fa1f f983 	uxth.w	r9, r3
    a280:	fb08 771c 	mls	r7, r8, ip, r7
    a284:	fa20 fe04 	lsr.w	lr, r0, r4
    a288:	fa01 f506 	lsl.w	r5, r1, r6
    a28c:	fb09 f40c 	mul.w	r4, r9, ip
    a290:	ea4e 0505 	orr.w	r5, lr, r5
    a294:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    a298:	ea4e 4707 	orr.w	r7, lr, r7, lsl #16
    a29c:	42bc      	cmp	r4, r7
    a29e:	fa02 f206 	lsl.w	r2, r2, r6
    a2a2:	d904      	bls.n	a2ae <__udivdi3+0x17a>
    a2a4:	18ff      	adds	r7, r7, r3
    a2a6:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
    a2aa:	d368      	bcc.n	a37e <__udivdi3+0x24a>
    a2ac:	468c      	mov	ip, r1
    a2ae:	1b3f      	subs	r7, r7, r4
    a2b0:	fbb7 f4f8 	udiv	r4, r7, r8
    a2b4:	fb08 7714 	mls	r7, r8, r4, r7
    a2b8:	fb09 f904 	mul.w	r9, r9, r4
    a2bc:	b2ad      	uxth	r5, r5
    a2be:	ea45 4107 	orr.w	r1, r5, r7, lsl #16
    a2c2:	4589      	cmp	r9, r1
    a2c4:	d904      	bls.n	a2d0 <__udivdi3+0x19c>
    a2c6:	18c9      	adds	r1, r1, r3
    a2c8:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
    a2cc:	d35d      	bcc.n	a38a <__udivdi3+0x256>
    a2ce:	462c      	mov	r4, r5
    a2d0:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
    a2d4:	fba4 2302 	umull	r2, r3, r4, r2
    a2d8:	ebc9 0101 	rsb	r1, r9, r1
    a2dc:	4299      	cmp	r1, r3
    a2de:	d349      	bcc.n	a374 <__udivdi3+0x240>
    a2e0:	d045      	beq.n	a36e <__udivdi3+0x23a>
    a2e2:	4620      	mov	r0, r4
    a2e4:	2600      	movs	r6, #0
    a2e6:	e76b      	b.n	a1c0 <__udivdi3+0x8c>
    a2e8:	f1cc 0420 	rsb	r4, ip, #32
    a2ec:	fa05 f50c 	lsl.w	r5, r5, ip
    a2f0:	fa21 f304 	lsr.w	r3, r1, r4
    a2f4:	0c2a      	lsrs	r2, r5, #16
    a2f6:	fbb3 f6f2 	udiv	r6, r3, r2
    a2fa:	fa1f fe85 	uxth.w	lr, r5
    a2fe:	fb02 3816 	mls	r8, r2, r6, r3
    a302:	fa20 f704 	lsr.w	r7, r0, r4
    a306:	fa01 f10c 	lsl.w	r1, r1, ip
    a30a:	fb0e f906 	mul.w	r9, lr, r6
    a30e:	430f      	orrs	r7, r1
    a310:	0c3c      	lsrs	r4, r7, #16
    a312:	ea44 4308 	orr.w	r3, r4, r8, lsl #16
    a316:	4599      	cmp	r9, r3
    a318:	fa00 f40c 	lsl.w	r4, r0, ip
    a31c:	d907      	bls.n	a32e <__udivdi3+0x1fa>
    a31e:	195b      	adds	r3, r3, r5
    a320:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
    a324:	d238      	bcs.n	a398 <__udivdi3+0x264>
    a326:	4599      	cmp	r9, r3
    a328:	d936      	bls.n	a398 <__udivdi3+0x264>
    a32a:	3e02      	subs	r6, #2
    a32c:	442b      	add	r3, r5
    a32e:	ebc9 0303 	rsb	r3, r9, r3
    a332:	fbb3 f0f2 	udiv	r0, r3, r2
    a336:	fb02 3310 	mls	r3, r2, r0, r3
    a33a:	fb0e f100 	mul.w	r1, lr, r0
    a33e:	b2bf      	uxth	r7, r7
    a340:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    a344:	4299      	cmp	r1, r3
    a346:	d907      	bls.n	a358 <__udivdi3+0x224>
    a348:	195b      	adds	r3, r3, r5
    a34a:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
    a34e:	d221      	bcs.n	a394 <__udivdi3+0x260>
    a350:	4299      	cmp	r1, r3
    a352:	d91f      	bls.n	a394 <__udivdi3+0x260>
    a354:	3802      	subs	r0, #2
    a356:	442b      	add	r3, r5
    a358:	4617      	mov	r7, r2
    a35a:	1a59      	subs	r1, r3, r1
    a35c:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
    a360:	e74e      	b.n	a200 <__udivdi3+0xcc>
    a362:	4610      	mov	r0, r2
    a364:	e714      	b.n	a190 <__udivdi3+0x5c>
    a366:	4613      	mov	r3, r2
    a368:	e727      	b.n	a1ba <__udivdi3+0x86>
    a36a:	460b      	mov	r3, r1
    a36c:	e770      	b.n	a250 <__udivdi3+0x11c>
    a36e:	40b0      	lsls	r0, r6
    a370:	4290      	cmp	r0, r2
    a372:	d2b6      	bcs.n	a2e2 <__udivdi3+0x1ae>
    a374:	1e60      	subs	r0, r4, #1
    a376:	2600      	movs	r6, #0
    a378:	e722      	b.n	a1c0 <__udivdi3+0x8c>
    a37a:	4630      	mov	r0, r6
    a37c:	e720      	b.n	a1c0 <__udivdi3+0x8c>
    a37e:	42bc      	cmp	r4, r7
    a380:	d994      	bls.n	a2ac <__udivdi3+0x178>
    a382:	f1ac 0c02 	sub.w	ip, ip, #2
    a386:	441f      	add	r7, r3
    a388:	e791      	b.n	a2ae <__udivdi3+0x17a>
    a38a:	4589      	cmp	r9, r1
    a38c:	d99f      	bls.n	a2ce <__udivdi3+0x19a>
    a38e:	3c02      	subs	r4, #2
    a390:	4419      	add	r1, r3
    a392:	e79d      	b.n	a2d0 <__udivdi3+0x19c>
    a394:	4638      	mov	r0, r7
    a396:	e7df      	b.n	a358 <__udivdi3+0x224>
    a398:	460e      	mov	r6, r1
    a39a:	e7c8      	b.n	a32e <__udivdi3+0x1fa>
    a39c:	3802      	subs	r0, #2
    a39e:	4429      	add	r1, r5
    a3a0:	e741      	b.n	a226 <__udivdi3+0xf2>
    a3a2:	bf00      	nop

0000a3a4 <memcmp>:
    a3a4:	2a03      	cmp	r2, #3
    a3a6:	b470      	push	{r4, r5, r6}
    a3a8:	d926      	bls.n	a3f8 <memcmp+0x54>
    a3aa:	ea40 0301 	orr.w	r3, r0, r1
    a3ae:	079b      	lsls	r3, r3, #30
    a3b0:	d011      	beq.n	a3d6 <memcmp+0x32>
    a3b2:	7804      	ldrb	r4, [r0, #0]
    a3b4:	780d      	ldrb	r5, [r1, #0]
    a3b6:	42ac      	cmp	r4, r5
    a3b8:	d122      	bne.n	a400 <memcmp+0x5c>
    a3ba:	4402      	add	r2, r0
    a3bc:	1c43      	adds	r3, r0, #1
    a3be:	e005      	b.n	a3cc <memcmp+0x28>
    a3c0:	f813 4b01 	ldrb.w	r4, [r3], #1
    a3c4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    a3c8:	42ac      	cmp	r4, r5
    a3ca:	d119      	bne.n	a400 <memcmp+0x5c>
    a3cc:	4293      	cmp	r3, r2
    a3ce:	d1f7      	bne.n	a3c0 <memcmp+0x1c>
    a3d0:	2000      	movs	r0, #0
    a3d2:	bc70      	pop	{r4, r5, r6}
    a3d4:	4770      	bx	lr
    a3d6:	460c      	mov	r4, r1
    a3d8:	4603      	mov	r3, r0
    a3da:	681e      	ldr	r6, [r3, #0]
    a3dc:	6825      	ldr	r5, [r4, #0]
    a3de:	4618      	mov	r0, r3
    a3e0:	42ae      	cmp	r6, r5
    a3e2:	4621      	mov	r1, r4
    a3e4:	f103 0304 	add.w	r3, r3, #4
    a3e8:	f104 0404 	add.w	r4, r4, #4
    a3ec:	d104      	bne.n	a3f8 <memcmp+0x54>
    a3ee:	3a04      	subs	r2, #4
    a3f0:	2a03      	cmp	r2, #3
    a3f2:	4618      	mov	r0, r3
    a3f4:	4621      	mov	r1, r4
    a3f6:	d8f0      	bhi.n	a3da <memcmp+0x36>
    a3f8:	2a00      	cmp	r2, #0
    a3fa:	d1da      	bne.n	a3b2 <memcmp+0xe>
    a3fc:	4610      	mov	r0, r2
    a3fe:	e7e8      	b.n	a3d2 <memcmp+0x2e>
    a400:	1b60      	subs	r0, r4, r5
    a402:	bc70      	pop	{r4, r5, r6}
    a404:	4770      	bx	lr
    a406:	bf00      	nop

0000a408 <memcpy>:
    a408:	4684      	mov	ip, r0
    a40a:	ea41 0300 	orr.w	r3, r1, r0
    a40e:	f013 0303 	ands.w	r3, r3, #3
    a412:	d149      	bne.n	a4a8 <memcpy+0xa0>
    a414:	3a40      	subs	r2, #64	; 0x40
    a416:	d323      	bcc.n	a460 <memcpy+0x58>
    a418:	680b      	ldr	r3, [r1, #0]
    a41a:	6003      	str	r3, [r0, #0]
    a41c:	684b      	ldr	r3, [r1, #4]
    a41e:	6043      	str	r3, [r0, #4]
    a420:	688b      	ldr	r3, [r1, #8]
    a422:	6083      	str	r3, [r0, #8]
    a424:	68cb      	ldr	r3, [r1, #12]
    a426:	60c3      	str	r3, [r0, #12]
    a428:	690b      	ldr	r3, [r1, #16]
    a42a:	6103      	str	r3, [r0, #16]
    a42c:	694b      	ldr	r3, [r1, #20]
    a42e:	6143      	str	r3, [r0, #20]
    a430:	698b      	ldr	r3, [r1, #24]
    a432:	6183      	str	r3, [r0, #24]
    a434:	69cb      	ldr	r3, [r1, #28]
    a436:	61c3      	str	r3, [r0, #28]
    a438:	6a0b      	ldr	r3, [r1, #32]
    a43a:	6203      	str	r3, [r0, #32]
    a43c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    a43e:	6243      	str	r3, [r0, #36]	; 0x24
    a440:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a442:	6283      	str	r3, [r0, #40]	; 0x28
    a444:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    a446:	62c3      	str	r3, [r0, #44]	; 0x2c
    a448:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    a44a:	6303      	str	r3, [r0, #48]	; 0x30
    a44c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    a44e:	6343      	str	r3, [r0, #52]	; 0x34
    a450:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    a452:	6383      	str	r3, [r0, #56]	; 0x38
    a454:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    a456:	63c3      	str	r3, [r0, #60]	; 0x3c
    a458:	3040      	adds	r0, #64	; 0x40
    a45a:	3140      	adds	r1, #64	; 0x40
    a45c:	3a40      	subs	r2, #64	; 0x40
    a45e:	d2db      	bcs.n	a418 <memcpy+0x10>
    a460:	3230      	adds	r2, #48	; 0x30
    a462:	d30b      	bcc.n	a47c <memcpy+0x74>
    a464:	680b      	ldr	r3, [r1, #0]
    a466:	6003      	str	r3, [r0, #0]
    a468:	684b      	ldr	r3, [r1, #4]
    a46a:	6043      	str	r3, [r0, #4]
    a46c:	688b      	ldr	r3, [r1, #8]
    a46e:	6083      	str	r3, [r0, #8]
    a470:	68cb      	ldr	r3, [r1, #12]
    a472:	60c3      	str	r3, [r0, #12]
    a474:	3010      	adds	r0, #16
    a476:	3110      	adds	r1, #16
    a478:	3a10      	subs	r2, #16
    a47a:	d2f3      	bcs.n	a464 <memcpy+0x5c>
    a47c:	320c      	adds	r2, #12
    a47e:	d305      	bcc.n	a48c <memcpy+0x84>
    a480:	f851 3b04 	ldr.w	r3, [r1], #4
    a484:	f840 3b04 	str.w	r3, [r0], #4
    a488:	3a04      	subs	r2, #4
    a48a:	d2f9      	bcs.n	a480 <memcpy+0x78>
    a48c:	3204      	adds	r2, #4
    a48e:	d008      	beq.n	a4a2 <memcpy+0x9a>
    a490:	07d2      	lsls	r2, r2, #31
    a492:	bf1c      	itt	ne
    a494:	f811 3b01 	ldrbne.w	r3, [r1], #1
    a498:	f800 3b01 	strbne.w	r3, [r0], #1
    a49c:	d301      	bcc.n	a4a2 <memcpy+0x9a>
    a49e:	880b      	ldrh	r3, [r1, #0]
    a4a0:	8003      	strh	r3, [r0, #0]
    a4a2:	4660      	mov	r0, ip
    a4a4:	4770      	bx	lr
    a4a6:	bf00      	nop
    a4a8:	2a08      	cmp	r2, #8
    a4aa:	d313      	bcc.n	a4d4 <memcpy+0xcc>
    a4ac:	078b      	lsls	r3, r1, #30
    a4ae:	d0b1      	beq.n	a414 <memcpy+0xc>
    a4b0:	f010 0303 	ands.w	r3, r0, #3
    a4b4:	d0ae      	beq.n	a414 <memcpy+0xc>
    a4b6:	f1c3 0304 	rsb	r3, r3, #4
    a4ba:	1ad2      	subs	r2, r2, r3
    a4bc:	07db      	lsls	r3, r3, #31
    a4be:	bf1c      	itt	ne
    a4c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    a4c4:	f800 3b01 	strbne.w	r3, [r0], #1
    a4c8:	d3a4      	bcc.n	a414 <memcpy+0xc>
    a4ca:	f831 3b02 	ldrh.w	r3, [r1], #2
    a4ce:	f820 3b02 	strh.w	r3, [r0], #2
    a4d2:	e79f      	b.n	a414 <memcpy+0xc>
    a4d4:	3a04      	subs	r2, #4
    a4d6:	d3d9      	bcc.n	a48c <memcpy+0x84>
    a4d8:	3a01      	subs	r2, #1
    a4da:	f811 3b01 	ldrb.w	r3, [r1], #1
    a4de:	f800 3b01 	strb.w	r3, [r0], #1
    a4e2:	d2f9      	bcs.n	a4d8 <memcpy+0xd0>
    a4e4:	780b      	ldrb	r3, [r1, #0]
    a4e6:	7003      	strb	r3, [r0, #0]
    a4e8:	784b      	ldrb	r3, [r1, #1]
    a4ea:	7043      	strb	r3, [r0, #1]
    a4ec:	788b      	ldrb	r3, [r1, #2]
    a4ee:	7083      	strb	r3, [r0, #2]
    a4f0:	4660      	mov	r0, ip
    a4f2:	4770      	bx	lr

0000a4f4 <strlen>:
    a4f4:	f020 0103 	bic.w	r1, r0, #3
    a4f8:	f010 0003 	ands.w	r0, r0, #3
    a4fc:	f1c0 0000 	rsb	r0, r0, #0
    a500:	f851 3b04 	ldr.w	r3, [r1], #4
    a504:	f100 0c04 	add.w	ip, r0, #4
    a508:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    a50c:	f06f 0200 	mvn.w	r2, #0
    a510:	bf1c      	itt	ne
    a512:	fa22 f20c 	lsrne.w	r2, r2, ip
    a516:	4313      	orrne	r3, r2
    a518:	f04f 0c01 	mov.w	ip, #1
    a51c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    a520:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    a524:	eba3 020c 	sub.w	r2, r3, ip
    a528:	ea22 0203 	bic.w	r2, r2, r3
    a52c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    a530:	bf04      	itt	eq
    a532:	f851 3b04 	ldreq.w	r3, [r1], #4
    a536:	3004      	addeq	r0, #4
    a538:	d0f4      	beq.n	a524 <strlen+0x30>
    a53a:	f1c2 0100 	rsb	r1, r2, #0
    a53e:	ea02 0201 	and.w	r2, r2, r1
    a542:	fab2 f282 	clz	r2, r2
    a546:	f1c2 021f 	rsb	r2, r2, #31
    a54a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    a54e:	4770      	bx	lr
    a550:	00000043 	.word	0x00000043

0000a554 <_global_impure_ptr>:
    a554:	10000020                                 ...

0000a558 <whitening_index>:
    a558:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    a568:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    a578:	5a541b28 662f703f                       (.TZ?p/f

0000a580 <whitening>:
    a580:	01010101 01000100 00000100 00010000     ................
    a590:	01000101 00010101 01010100 00010000     ................
    a5a0:	01010001 01010000 00000000 00010100     ................
    a5b0:	01000101 01010100 00000100 00010100     ................
    a5c0:	00000100 00000100 00000000 01000001     ................
    a5d0:	01010000 00000100 01010101 01010100     ................
    a5e0:	00000000 01010101 00010101 01010000     ................
    a5f0:	01010001 01000000 00000100 75010001              ...............

0000a5ff <compile_info>:
    a5ff:	72656275 746f6f74 30322068 302d3831     ubertooth 2018-0
    a60f:	31522d38 696e2820 6e406f6b 2d6f6b69     8-R1 (niko@niko-
    a61f:	30353558 2029424c 32206f44 4f202e35     X550LB) Do 25. O
    a62f:	3120746b 33343a35 2038343a 54534543     kt 15:43:48 CEST
    a63f:	31303220 00000038 bcb24000                        2018....

0000a648 <whitening_word>:
    a648:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    a658:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    a668:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    a678:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    a688:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    a698:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    a6a8:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    a6b8:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    a6c8:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    a6d8:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    a6e8:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    a6f8:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    a708:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    a718:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    a728:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    a738:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    a748:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    a758:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    a768:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    a778:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    a788:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    a798:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    a7a8:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    a7b8:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    a7c8:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    a7d8:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    a7e8:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    a7f8:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    a808:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    a818:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    a828:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    a838:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    a848:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    a858:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    a868:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    a878:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    a888:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    a898:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    a8a8:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    a8b8:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    a8c8:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    a8d8:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    a8e8:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    a8f8:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    a908:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    a918:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    a928:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    a938:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    a948:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    a958:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    a968:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    a978:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    a988:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    a998:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    a9a8:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    a9b8:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    a9c8:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    a9d8:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    a9e8:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    a9f8:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    aa08:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    aa18:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    aa28:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    aa38:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    aa48:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    aa58:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    aa68:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    aa78:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    aa88:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    aa98:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    aaa8:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    aab8:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    aac8:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    aad8:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    aae8:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    aaf8:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    ab08:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    ab18:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    ab28:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    ab38:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    ab48:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    ab58:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    ab68:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    ab78:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    ab88:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    ab98:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    aba8:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    abb8:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    abc8:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    abd8:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    abe8:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    abf8:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    ac08:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    ac18:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    ac28:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    ac38:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    ac48:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    ac58:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    ac68:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    ac78:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    ac88:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    ac98:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    aca8:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    acb8:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    acc8:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    acd8:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    ace8:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    acf8:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    ad08:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    ad18:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    ad28:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    ad38:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    ad48:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    ad58:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    ad68:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    ad78:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    ad88:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    ad98:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    ada8:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    adb8:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000adc8 <hop_interval_lut>:
    adc8:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    add8:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    ade8:	120c0916 00000024 00000001 00000001     ....$...........
    adf8:	00000001 00000001 ffff0900 ffffffff     ................
    ae08:	ff050102 096cffff 099e0985 38313032     ......l.....2018
    ae18:	2d38302d 0a003152 2a2a2a0a 4542552a     -08-R1...****UBE
    ae28:	4f4f5452 42204854 2a544f4f 0a2a2a2a     RTOOTH BOOT****.
    ae38:	000a7325                                %s..

0000ae3c <index1.3929>:
    ae3c:	03010200 03000100 01020001 03010100              ..............

0000ae4a <index2.3930>:
    ae4a:	04020301 04020304 03040304 3e460203              ..............

0000ae58 <whitening_index>:
    ae58:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    ae68:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    ae78:	5a541b28 662f703f                       (.TZ?p/f

0000ae80 <whitening>:
    ae80:	01010101 01000100 00000100 00010000     ................
    ae90:	01000101 00010101 01010100 00010000     ................
    aea0:	01010001 01010000 00000000 00010100     ................
    aeb0:	01000101 01010100 00000100 00010100     ................
    aec0:	00000100 00000100 00000000 01000001     ................
    aed0:	01010000 00000100 01010101 01010100     ................
    aee0:	00000000 01010101 00010101 01010000     ................
    aef0:	01010001 01000000 00000100 7b010001     ...............{
    af00:	34636138 38386137 3263632d 61342d36     8ac47a88-cc26-4a
    af10:	382d3961 2d623738 61633234 30666338     a9-887b-42ca8cf0
    af20:	33366137 3e46007d                                7a63}.

0000af26 <whitening_index>:
    af26:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    af36:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    af46:	5a541b28 662f703f                       (.TZ?p/f

0000af4e <whitening>:
    af4e:	01010101 01000100 00000100 00010000     ................
    af5e:	01000101 00010101 01010100 00010000     ................
    af6e:	01010001 01010000 00000000 00010100     ................
    af7e:	01000101 01010100 00000100 00010100     ................
    af8e:	00000100 00000100 00000000 01000001     ................
    af9e:	01010000 00000100 01010101 01010100     ................
    afae:	00000000 01010101 00010101 01010000     ................
    afbe:	01010001 01000000 00000100 00010001     ................
    afce:	09680000                                         ..

0000afd0 <channels>:
    afd0:	09720968 09a50977                       h.r.w...

0000afd8 <follow_handler.4020>:
    afd8:	0000853d 0000855d 00008865 000086b5     =...]...e.......
    afe8:	00008539 00008539 00008539              9...9...9...

0000aff4 <continuous_rx_handler.4021>:
    aff4:	00008555 0000855d 00008785 00008539     U...].......9...
    b004:	00008539 00008539                       9...9...

0000b00c <jam_handler.4022>:
    b00c:	0000853d 0000855d 00008801 00008701     =...]...........
    b01c:	00008611 00008721                       ....!...

0000b024 <iap_entry>:
    b024:	1fff1ff1                                ....

0000b028 <abExtendedOsFeatureDescriptor>:
    b028:	00000028 00040100 00000001 00000000     (...............
    b038:	49570100 4253554e 00000000 00000000     ..WINUSB........
    b048:	00000000 00000000                       ........

0000b050 <_init>:
    b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b052:	bf00      	nop
    b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b056:	bc08      	pop	{r3}
    b058:	469e      	mov	lr, r3
    b05a:	4770      	bx	lr

0000b05c <__init_array_start>:
    b05c:	00004339 	.word	0x00004339

0000b060 <__frame_dummy_init_array_entry>:
    b060:	00004139                                9A..

0000b064 <_fini>:
    b064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b066:	bf00      	nop
    b068:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b06a:	bc08      	pop	{r3}
    b06c:	469e      	mov	lr, r3
    b06e:	4770      	bx	lr

0000b070 <__fini_array_start>:
    b070:	00004111 	.word	0x00004111

0000b074 <__fini_array_end>:
    b074:	00000000 	.word	0x00000000
