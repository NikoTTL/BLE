ARM GAS  /tmp/ccbNS4P9.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"bluetooth_le.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.btle_channel_index,"ax",%progbits
  19              		.align	1
  20              		.global	btle_channel_index
  21              		.thumb
  22              		.thumb_func
  24              	btle_channel_index:
  25              	.LFB1:
  26              		.file 1 "bluetooth_le.c"
   1:bluetooth_le.c **** /*
   2:bluetooth_le.c ****  * Copyright 2012 Dominic Spill
   3:bluetooth_le.c ****  *
   4:bluetooth_le.c ****  * This file is part of Project Ubertooth.
   5:bluetooth_le.c ****  *
   6:bluetooth_le.c ****  * This program is free software; you can redistribute it and/or modify
   7:bluetooth_le.c ****  * it under the terms of the GNU General Public License as published by
   8:bluetooth_le.c ****  * the Free Software Foundation; either version 2, or (at your option)
   9:bluetooth_le.c ****  * any later version.
  10:bluetooth_le.c ****  *
  11:bluetooth_le.c ****  * This program is distributed in the hope that it will be useful,
  12:bluetooth_le.c ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:bluetooth_le.c ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:bluetooth_le.c ****  * GNU General Public License for more details.
  15:bluetooth_le.c ****  *
  16:bluetooth_le.c ****  * You should have received a copy of the GNU General Public License
  17:bluetooth_le.c ****  * along with this program; see the file COPYING.  If not, write to
  18:bluetooth_le.c ****  * the Free Software Foundation, Inc., 51 Franklin Street,
  19:bluetooth_le.c ****  * Boston, MA 02110-1301, USA.
  20:bluetooth_le.c ****  */
  21:bluetooth_le.c **** 
  22:bluetooth_le.c **** #include "bluetooth_le.h"
  23:bluetooth_le.c **** 
  24:bluetooth_le.c **** #include <string.h>
  25:bluetooth_le.c **** 
  26:bluetooth_le.c **** extern u8 le_channel_idx;
  27:bluetooth_le.c **** extern u8 le_hop_amount;
  28:bluetooth_le.c **** 
  29:bluetooth_le.c **** u16 btle_next_hop(le_state_t *le)
  30:bluetooth_le.c **** {
  31:bluetooth_le.c **** 	u16 phys = btle_channel_index_to_phys(le->channel_idx);
  32:bluetooth_le.c **** 	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
ARM GAS  /tmp/ccbNS4P9.s 			page 2


  33:bluetooth_le.c **** 	return phys;
  34:bluetooth_le.c **** }
  35:bluetooth_le.c **** 
  36:bluetooth_le.c **** // calculate channel index from physical channel
  37:bluetooth_le.c **** // channel is in range [2402, 2480]
  38:bluetooth_le.c **** uint8_t btle_channel_index(uint16_t channel) {
  27              		.loc 1 38 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
  39:bluetooth_le.c **** 	uint8_t idx;
  40:bluetooth_le.c **** 	channel = (channel - 2402) / 2;
  33              		.loc 1 40 0
  34 0000 0223     		movs	r3, #2
  35 0002 A0F66210 		subw	r0, r0, #2402
  36              	.LVL1:
  37 0006 90FBF3F0 		sdiv	r0, r0, r3
  38 000a 83B2     		uxth	r3, r0
  39              	.LVL2:
  41:bluetooth_le.c **** 	if (channel == 0)
  40              		.loc 1 41 0
  41 000c 53B1     		cbz	r3, .L4
  42:bluetooth_le.c **** 		idx = 37;
  43:bluetooth_le.c **** 	else if (channel < 12)
  42              		.loc 1 43 0
  43 000e 0B2B     		cmp	r3, #11
  44 0010 01D8     		bhi	.L3
  44:bluetooth_le.c **** 		idx = channel - 1;
  45              		.loc 1 44 0
  46 0012 0138     		subs	r0, r0, #1
  47 0014 04E0     		b	.L7
  48              	.L3:
  45:bluetooth_le.c **** 	else if (channel == 12)
  49              		.loc 1 45 0
  50 0016 0C2B     		cmp	r3, #12
  51 0018 06D0     		beq	.L5
  46:bluetooth_le.c **** 		idx = 38;
  47:bluetooth_le.c **** 	else if (channel < 39)
  52              		.loc 1 47 0
  53 001a 262B     		cmp	r3, #38
  54 001c 06D8     		bhi	.L6
  48:bluetooth_le.c **** 		idx = channel - 2;
  55              		.loc 1 48 0
  56 001e 0238     		subs	r0, r0, #2
  57              	.L7:
  58 0020 C0B2     		uxtb	r0, r0
  59              	.LVL3:
  60 0022 7047     		bx	lr
  61              	.LVL4:
  62              	.L4:
  42:bluetooth_le.c **** 	else if (channel < 12)
  63              		.loc 1 42 0
  64 0024 2520     		movs	r0, #37
  65 0026 7047     		bx	lr
  66              	.L5:
ARM GAS  /tmp/ccbNS4P9.s 			page 3


  46:bluetooth_le.c **** 		idx = 38;
  67              		.loc 1 46 0
  68 0028 2620     		movs	r0, #38
  69 002a 7047     		bx	lr
  70              	.L6:
  49:bluetooth_le.c **** 	else
  50:bluetooth_le.c **** 		idx = 39;
  71              		.loc 1 50 0
  72 002c 2720     		movs	r0, #39
  73              	.LVL5:
  51:bluetooth_le.c **** 	return idx;
  52:bluetooth_le.c **** }
  74              		.loc 1 52 0
  75 002e 7047     		bx	lr
  76              		.cfi_endproc
  77              	.LFE1:
  79              		.section	.text.btle_channel_index_to_phys,"ax",%progbits
  80              		.align	1
  81              		.global	btle_channel_index_to_phys
  82              		.thumb
  83              		.thumb_func
  85              	btle_channel_index_to_phys:
  86              	.LFB2:
  53:bluetooth_le.c **** 
  54:bluetooth_le.c **** u16 btle_channel_index_to_phys(u8 idx) {
  87              		.loc 1 54 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
  92              	.LVL6:
  55:bluetooth_le.c **** 	u16 phys;
  56:bluetooth_le.c **** 	if (idx < 11)
  93              		.loc 1 56 0
  94 0000 0A28     		cmp	r0, #10
  95 0002 03D8     		bhi	.L10
  57:bluetooth_le.c **** 		phys = 2404 + 2 * idx;
  96              		.loc 1 57 0
  97 0004 4000     		lsls	r0, r0, #1
  98              	.LVL7:
  99 0006 00F66410 		addw	r0, r0, #2404
 100              	.LVL8:
 101 000a 7047     		bx	lr
 102              	.LVL9:
 103              	.L10:
  58:bluetooth_le.c **** 	else if (idx < 37)
 104              		.loc 1 58 0
 105 000c 2428     		cmp	r0, #36
 106 000e 03D8     		bhi	.L12
  59:bluetooth_le.c **** 		phys = 2428 + 2 * (idx - 11);
 107              		.loc 1 59 0
 108 0010 4000     		lsls	r0, r0, #1
 109              	.LVL10:
 110 0012 00F66610 		addw	r0, r0, #2406
 111              	.LVL11:
 112 0016 7047     		bx	lr
 113              	.LVL12:
ARM GAS  /tmp/ccbNS4P9.s 			page 4


 114              	.L12:
 115              	.LBB4:
 116              	.LBB5:
  60:bluetooth_le.c **** 	else if (idx == 37)
 117              		.loc 1 60 0
 118 0018 2528     		cmp	r0, #37
 119 001a 06D0     		beq	.L13
  61:bluetooth_le.c **** 		phys = 2402;
  62:bluetooth_le.c **** 	else if (idx == 38)
 120              		.loc 1 62 0
 121 001c 2628     		cmp	r0, #38
  63:bluetooth_le.c **** 		phys = 2426;
  64:bluetooth_le.c **** 	else
  65:bluetooth_le.c **** 		phys = 2480;
 122              		.loc 1 65 0
 123 001e 40F67A10 		movw	r0, #2426
 124              	.LVL13:
 125 0022 18BF     		it	ne
 126 0024 4FF41B60 		movne	r0, #2480
 127 0028 7047     		bx	lr
 128              	.LVL14:
 129              	.L13:
  61:bluetooth_le.c **** 		phys = 2402;
 130              		.loc 1 61 0
 131 002a 40F66210 		movw	r0, #2402
 132              	.LVL15:
 133              	.LBE5:
 134              	.LBE4:
  66:bluetooth_le.c **** 	return phys;
  67:bluetooth_le.c **** }
 135              		.loc 1 67 0
 136 002e 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE2:
 140              		.section	.text.btle_next_hop,"ax",%progbits
 141              		.align	1
 142              		.global	btle_next_hop
 143              		.thumb
 144              		.thumb_func
 146              	btle_next_hop:
 147              	.LFB0:
  30:bluetooth_le.c **** 	u16 phys = btle_channel_index_to_phys(le->channel_idx);
 148              		.loc 1 30 0
 149              		.cfi_startproc
 150              		@ args = 0, pretend = 0, frame = 0
 151              		@ frame_needed = 0, uses_anonymous_args = 0
 152              	.LVL16:
 153 0000 38B5     		push	{r3, r4, r5, lr}
 154              		.cfi_def_cfa_offset 16
 155              		.cfi_offset 3, -16
 156              		.cfi_offset 4, -12
 157              		.cfi_offset 5, -8
 158              		.cfi_offset 14, -4
  30:bluetooth_le.c **** 	u16 phys = btle_channel_index_to_phys(le->channel_idx);
 159              		.loc 1 30 0
 160 0002 0446     		mov	r4, r0
  31:bluetooth_le.c **** 	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
ARM GAS  /tmp/ccbNS4P9.s 			page 5


 161              		.loc 1 31 0
 162 0004 457D     		ldrb	r5, [r0, #21]	@ zero_extendqisi2
 163 0006 2846     		mov	r0, r5
 164              	.LVL17:
 165 0008 FFF7FEFF 		bl	btle_channel_index_to_phys
 166              	.LVL18:
  32:bluetooth_le.c **** 	return phys;
 167              		.loc 1 32 0
 168 000c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
 169 000e 2521     		movs	r1, #37
 170 0010 2B44     		add	r3, r3, r5
 171 0012 93FBF1F2 		sdiv	r2, r3, r1
 172 0016 01FB1233 		mls	r3, r1, r2, r3
 173 001a 6375     		strb	r3, [r4, #21]
  34:bluetooth_le.c **** 
 174              		.loc 1 34 0
 175 001c 38BD     		pop	{r3, r4, r5, pc}
 176              		.cfi_endproc
 177              	.LFE0:
 179              		.section	.text.btle_calc_crc,"ax",%progbits
 180              		.align	1
 181              		.global	btle_calc_crc
 182              		.thumb
 183              		.thumb_func
 185              	btle_calc_crc:
 186              	.LFB3:
  68:bluetooth_le.c **** 
  69:bluetooth_le.c **** // calculate CRC
  70:bluetooth_le.c **** //	note 1: crc_init's bits should be in reverse order
  71:bluetooth_le.c **** //	note 2: output bytes are in reverse order compared to wire
  72:bluetooth_le.c **** //
  73:bluetooth_le.c **** //		example output:
  74:bluetooth_le.c **** //			0x6ff46e
  75:bluetooth_le.c **** //
  76:bluetooth_le.c **** //		bytes in packet will be:
  77:bluetooth_le.c **** //		  { 0x6e, 0xf4, 0x6f }
  78:bluetooth_le.c **** //
  79:bluetooth_le.c **** u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
 187              		.loc 1 79 0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              	.LVL19:
 192 0000 70B5     		push	{r4, r5, r6, lr}
 193              		.cfi_def_cfa_offset 16
 194              		.cfi_offset 4, -16
 195              		.cfi_offset 5, -12
 196              		.cfi_offset 6, -8
 197              		.cfi_offset 14, -4
  80:bluetooth_le.c **** 	u32 state = crc_init & 0xffffff;
  81:bluetooth_le.c **** 	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
  82:bluetooth_le.c **** 	int i, j;
  83:bluetooth_le.c **** 
  84:bluetooth_le.c **** 	for (i = 0; i < len; ++i) {
 198              		.loc 1 84 0
 199 0002 0B46     		mov	r3, r1
  80:bluetooth_le.c **** 	u32 state = crc_init & 0xffffff;
ARM GAS  /tmp/ccbNS4P9.s 			page 6


 200              		.loc 1 80 0
 201 0004 20F07F40 		bic	r0, r0, #-16777216
 202              	.LVL20:
 203              	.L17:
 204 0008 5C1A     		subs	r4, r3, r1
 205              		.loc 1 84 0 discriminator 1
 206 000a 9442     		cmp	r4, r2
 207 000c 14DA     		bge	.L25
 208              	.LBB6:
  85:bluetooth_le.c **** 		u8 cur = data[i];
 209              		.loc 1 85 0
 210 000e 13F8015B 		ldrb	r5, [r3], #1	@ zero_extendqisi2
 211              	.LVL21:
 212 0012 0824     		movs	r4, #8
 213              	.LVL22:
 214              	.L19:
 215              	.LBB7:
  86:bluetooth_le.c **** 		for (j = 0; j < 8; ++j) {
  87:bluetooth_le.c **** 			int next_bit = (state ^ cur) & 1;
 216              		.loc 1 87 0
 217 0014 85EA0006 		eor	r6, r5, r0
  88:bluetooth_le.c **** 			cur >>= 1;
  89:bluetooth_le.c **** 			state >>= 1;
  90:bluetooth_le.c **** 			if (next_bit) {
 218              		.loc 1 90 0
 219 0018 16F0010F 		tst	r6, #1
 220 001c 4FEA5000 		lsr	r0, r0, #1
 221              	.LVL23:
  91:bluetooth_le.c **** 				state |= 1 << 23;
 222              		.loc 1 91 0
 223 0020 1EBF     		ittt	ne
 224 0022 40F40000 		orrne	r0, r0, #8388608
 225              	.LVL24:
  92:bluetooth_le.c **** 				state ^= lfsr_mask;
 226              		.loc 1 92 0
 227 0026 80F4B400 		eorne	r0, r0, #5898240
 228              	.LVL25:
 229 002a 80F4C040 		eorne	r0, r0, #24576
 230              	.LVL26:
 231              	.LBE7:
  86:bluetooth_le.c **** 			int next_bit = (state ^ cur) & 1;
 232              		.loc 1 86 0
 233 002e 013C     		subs	r4, r4, #1
 234              	.LVL27:
 235              	.LBB8:
  90:bluetooth_le.c **** 				state |= 1 << 23;
 236              		.loc 1 90 0
 237 0030 4FEA5505 		lsr	r5, r5, #1
 238              	.LVL28:
 239              	.LBE8:
  86:bluetooth_le.c **** 			int next_bit = (state ^ cur) & 1;
 240              		.loc 1 86 0
 241 0034 EED1     		bne	.L19
 242 0036 E7E7     		b	.L17
 243              	.LVL29:
 244              	.L25:
 245              	.LBE6:
ARM GAS  /tmp/ccbNS4P9.s 			page 7


  93:bluetooth_le.c **** 			}
  94:bluetooth_le.c **** 		}
  95:bluetooth_le.c **** 	}
  96:bluetooth_le.c **** 
  97:bluetooth_le.c **** 	return state;
  98:bluetooth_le.c **** }
 246              		.loc 1 98 0
 247 0038 70BD     		pop	{r4, r5, r6, pc}
 248              		.cfi_endproc
 249              	.LFE3:
 251              		.section	.text.btle_reverse_crc,"ax",%progbits
 252              		.align	1
 253              		.global	btle_reverse_crc
 254              		.thumb
 255              		.thumb_func
 257              	btle_reverse_crc:
 258              	.LFB4:
  99:bluetooth_le.c **** 
 100:bluetooth_le.c **** // runs the CRC in reverse to generate a CRCInit
 101:bluetooth_le.c **** //
 102:bluetooth_le.c **** //	crc should be big endian
 103:bluetooth_le.c **** //	the return will be big endian
 104:bluetooth_le.c **** //
 105:bluetooth_le.c **** u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
 259              		.loc 1 105 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              	.LVL30:
 264 0000 70B5     		push	{r4, r5, r6, lr}
 265              		.cfi_def_cfa_offset 16
 266              		.cfi_offset 4, -16
 267              		.cfi_offset 5, -12
 268              		.cfi_offset 6, -8
 269              		.cfi_offset 14, -4
 270              	.LVL31:
 271              	.L37:
 106:bluetooth_le.c **** 	u32 state = crc;
 107:bluetooth_le.c **** 	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
 108:bluetooth_le.c **** 	u32 ret;
 109:bluetooth_le.c **** 	int i, j;
 110:bluetooth_le.c **** 
 111:bluetooth_le.c **** 	for (i = len - 1; i >= 0; --i) {
 272              		.loc 1 111 0 discriminator 2
 273 0002 013A     		subs	r2, r2, #1
 274              	.LVL32:
 275 0004 002A     		cmp	r2, #0
 276 0006 14DB     		blt	.L38
 277              	.LBB9:
 112:bluetooth_le.c **** 		u8 cur = data[i];
 278              		.loc 1 112 0
 279 0008 8E5C     		ldrb	r6, [r1, r2]	@ zero_extendqisi2
 280              	.LVL33:
 281 000a 0724     		movs	r4, #7
 282              	.LVL34:
 283              	.L29:
 284              	.LBB10:
ARM GAS  /tmp/ccbNS4P9.s 			page 8


 113:bluetooth_le.c **** 		for (j = 0; j < 8; ++j) {
 114:bluetooth_le.c **** 			int top_bit = state >> 23;
 285              		.loc 1 114 0
 286 000c C50D     		lsrs	r5, r0, #23
 287              	.LVL35:
 115:bluetooth_le.c **** 			state = (state << 1) & 0xffffff;
 288              		.loc 1 115 0
 289 000e 4000     		lsls	r0, r0, #1
 290              	.LVL36:
 291 0010 20F07F43 		bic	r3, r0, #-16777216
 292              	.LVL37:
 116:bluetooth_le.c **** 			state |= top_bit ^ ((cur >> (7 - j)) & 1);
 293              		.loc 1 116 0
 294 0014 46FA04F0 		asr	r0, r6, r4
 295 0018 00F00100 		and	r0, r0, #1
 296 001c 6840     		eors	r0, r0, r5
 297 001e 1843     		orrs	r0, r0, r3
 298              	.LVL38:
 117:bluetooth_le.c **** 			if (top_bit)
 299              		.loc 1 117 0
 300 0020 1DB1     		cbz	r5, .L28
 118:bluetooth_le.c **** 				state ^= lfsr_mask;
 301              		.loc 1 118 0
 302 0022 80F43400 		eor	r0, r0, #11796480
 303              	.LVL39:
 304 0026 80F44040 		eor	r0, r0, #49152
 305              	.LVL40:
 306              	.L28:
 307              	.LBE10:
 113:bluetooth_le.c **** 			int top_bit = state >> 23;
 308              		.loc 1 113 0 discriminator 2
 309 002a 14F1FF34 		adds	r4, r4, #-1
 310              	.LVL41:
 311 002e EDD2     		bcs	.L29
 312 0030 E7E7     		b	.L37
 313              	.LVL42:
 314              	.L38:
 315              	.LBE9:
 111:bluetooth_le.c **** 		u8 cur = data[i];
 316              		.loc 1 111 0
 317 0032 0023     		movs	r3, #0
 318 0034 1946     		mov	r1, r3
 319              	.LVL43:
 320              	.L31:
 119:bluetooth_le.c **** 		}
 120:bluetooth_le.c **** 	}
 121:bluetooth_le.c **** 
 122:bluetooth_le.c **** 	ret = 0;
 123:bluetooth_le.c **** 	for (i = 0; i < 24; ++i)
 124:bluetooth_le.c **** 		ret |= ((state >> i) & 1) << (23 - i);
 321              		.loc 1 124 0 discriminator 3
 322 0036 20FA03F2 		lsr	r2, r0, r3
 323 003a C3F11704 		rsb	r4, r3, #23
 324 003e 02F00102 		and	r2, r2, #1
 123:bluetooth_le.c **** 		ret |= ((state >> i) & 1) << (23 - i);
 325              		.loc 1 123 0 discriminator 3
 326 0042 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccbNS4P9.s 			page 9


 327              	.LVL44:
 328              		.loc 1 124 0 discriminator 3
 329 0044 A240     		lsls	r2, r2, r4
 123:bluetooth_le.c **** 		ret |= ((state >> i) & 1) << (23 - i);
 330              		.loc 1 123 0 discriminator 3
 331 0046 182B     		cmp	r3, #24
 332              		.loc 1 124 0 discriminator 3
 333 0048 41EA0201 		orr	r1, r1, r2
 334              	.LVL45:
 123:bluetooth_le.c **** 		ret |= ((state >> i) & 1) << (23 - i);
 335              		.loc 1 123 0 discriminator 3
 336 004c F3D1     		bne	.L31
 125:bluetooth_le.c **** 
 126:bluetooth_le.c **** 	return ret;
 127:bluetooth_le.c **** }
 337              		.loc 1 127 0
 338 004e 0846     		mov	r0, r1
 339              	.LVL46:
 340 0050 70BD     		pop	{r4, r5, r6, pc}
 341              		.cfi_endproc
 342              	.LFE4:
 344              		.section	.text.btle_crcgen_lut,"ax",%progbits
 345              		.align	1
 346              		.global	btle_crcgen_lut
 347              		.thumb
 348              		.thumb_func
 350              	btle_crcgen_lut:
 351              	.LFB5:
 128:bluetooth_le.c **** 
 129:bluetooth_le.c **** u32 btle_crc_lut[256] = {
 130:bluetooth_le.c **** 	0x000000, 0x01b4c0, 0x036980, 0x02dd40, 0x06d300, 0x0767c0, 0x05ba80, 0x040e40,
 131:bluetooth_le.c **** 	0x0da600, 0x0c12c0, 0x0ecf80, 0x0f7b40, 0x0b7500, 0x0ac1c0, 0x081c80, 0x09a840,
 132:bluetooth_le.c **** 	0x1b4c00, 0x1af8c0, 0x182580, 0x199140, 0x1d9f00, 0x1c2bc0, 0x1ef680, 0x1f4240,
 133:bluetooth_le.c **** 	0x16ea00, 0x175ec0, 0x158380, 0x143740, 0x103900, 0x118dc0, 0x135080, 0x12e440,
 134:bluetooth_le.c **** 	0x369800, 0x372cc0, 0x35f180, 0x344540, 0x304b00, 0x31ffc0, 0x332280, 0x329640,
 135:bluetooth_le.c **** 	0x3b3e00, 0x3a8ac0, 0x385780, 0x39e340, 0x3ded00, 0x3c59c0, 0x3e8480, 0x3f3040,
 136:bluetooth_le.c **** 	0x2dd400, 0x2c60c0, 0x2ebd80, 0x2f0940, 0x2b0700, 0x2ab3c0, 0x286e80, 0x29da40,
 137:bluetooth_le.c **** 	0x207200, 0x21c6c0, 0x231b80, 0x22af40, 0x26a100, 0x2715c0, 0x25c880, 0x247c40,
 138:bluetooth_le.c **** 	0x6d3000, 0x6c84c0, 0x6e5980, 0x6fed40, 0x6be300, 0x6a57c0, 0x688a80, 0x693e40,
 139:bluetooth_le.c **** 	0x609600, 0x6122c0, 0x63ff80, 0x624b40, 0x664500, 0x67f1c0, 0x652c80, 0x649840,
 140:bluetooth_le.c **** 	0x767c00, 0x77c8c0, 0x751580, 0x74a140, 0x70af00, 0x711bc0, 0x73c680, 0x727240,
 141:bluetooth_le.c **** 	0x7bda00, 0x7a6ec0, 0x78b380, 0x790740, 0x7d0900, 0x7cbdc0, 0x7e6080, 0x7fd440,
 142:bluetooth_le.c **** 	0x5ba800, 0x5a1cc0, 0x58c180, 0x597540, 0x5d7b00, 0x5ccfc0, 0x5e1280, 0x5fa640,
 143:bluetooth_le.c **** 	0x560e00, 0x57bac0, 0x556780, 0x54d340, 0x50dd00, 0x5169c0, 0x53b480, 0x520040,
 144:bluetooth_le.c **** 	0x40e400, 0x4150c0, 0x438d80, 0x423940, 0x463700, 0x4783c0, 0x455e80, 0x44ea40,
 145:bluetooth_le.c **** 	0x4d4200, 0x4cf6c0, 0x4e2b80, 0x4f9f40, 0x4b9100, 0x4a25c0, 0x48f880, 0x494c40,
 146:bluetooth_le.c **** 	0xda6000, 0xdbd4c0, 0xd90980, 0xd8bd40, 0xdcb300, 0xdd07c0, 0xdfda80, 0xde6e40,
 147:bluetooth_le.c **** 	0xd7c600, 0xd672c0, 0xd4af80, 0xd51b40, 0xd11500, 0xd0a1c0, 0xd27c80, 0xd3c840,
 148:bluetooth_le.c **** 	0xc12c00, 0xc098c0, 0xc24580, 0xc3f140, 0xc7ff00, 0xc64bc0, 0xc49680, 0xc52240,
 149:bluetooth_le.c **** 	0xcc8a00, 0xcd3ec0, 0xcfe380, 0xce5740, 0xca5900, 0xcbedc0, 0xc93080, 0xc88440,
 150:bluetooth_le.c **** 	0xecf800, 0xed4cc0, 0xef9180, 0xee2540, 0xea2b00, 0xeb9fc0, 0xe94280, 0xe8f640,
 151:bluetooth_le.c **** 	0xe15e00, 0xe0eac0, 0xe23780, 0xe38340, 0xe78d00, 0xe639c0, 0xe4e480, 0xe55040,
 152:bluetooth_le.c **** 	0xf7b400, 0xf600c0, 0xf4dd80, 0xf56940, 0xf16700, 0xf0d3c0, 0xf20e80, 0xf3ba40,
 153:bluetooth_le.c **** 	0xfa1200, 0xfba6c0, 0xf97b80, 0xf8cf40, 0xfcc100, 0xfd75c0, 0xffa880, 0xfe1c40,
 154:bluetooth_le.c **** 	0xb75000, 0xb6e4c0, 0xb43980, 0xb58d40, 0xb18300, 0xb037c0, 0xb2ea80, 0xb35e40,
 155:bluetooth_le.c **** 	0xbaf600, 0xbb42c0, 0xb99f80, 0xb82b40, 0xbc2500, 0xbd91c0, 0xbf4c80, 0xbef840,
 156:bluetooth_le.c **** 	0xac1c00, 0xada8c0, 0xaf7580, 0xaec140, 0xaacf00, 0xab7bc0, 0xa9a680, 0xa81240,
ARM GAS  /tmp/ccbNS4P9.s 			page 10


 157:bluetooth_le.c **** 	0xa1ba00, 0xa00ec0, 0xa2d380, 0xa36740, 0xa76900, 0xa6ddc0, 0xa40080, 0xa5b440,
 158:bluetooth_le.c **** 	0x81c800, 0x807cc0, 0x82a180, 0x831540, 0x871b00, 0x86afc0, 0x847280, 0x85c640,
 159:bluetooth_le.c **** 	0x8c6e00, 0x8ddac0, 0x8f0780, 0x8eb340, 0x8abd00, 0x8b09c0, 0x89d480, 0x886040,
 160:bluetooth_le.c **** 	0x9a8400, 0x9b30c0, 0x99ed80, 0x985940, 0x9c5700, 0x9de3c0, 0x9f3e80, 0x9e8a40,
 161:bluetooth_le.c **** 	0x972200, 0x9696c0, 0x944b80, 0x95ff40, 0x91f100, 0x9045c0, 0x929880, 0x932c40
 162:bluetooth_le.c **** };
 163:bluetooth_le.c **** 
 164:bluetooth_le.c **** /*
 165:bluetooth_le.c ****  * Calculate a BTLE CRC one byte at a time. Thanks to Dominic Spill and
 166:bluetooth_le.c ****  * Michael Ossmann for writing and optimizing this.
 167:bluetooth_le.c ****  *
 168:bluetooth_le.c ****  * Arguments: CRCInit, pointer to start of packet, length of packet in
 169:bluetooth_le.c ****  * bytes
 170:bluetooth_le.c ****  * */
 171:bluetooth_le.c **** u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
 352              		.loc 1 171 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356              	.LVL47:
 357 0000 30B5     		push	{r4, r5, lr}
 358              		.cfi_def_cfa_offset 12
 359              		.cfi_offset 4, -12
 360              		.cfi_offset 5, -8
 361              		.cfi_offset 14, -4
 172:bluetooth_le.c **** 	u32 state;
 173:bluetooth_le.c **** 	int i;
 174:bluetooth_le.c **** 	u8 key;
 175:bluetooth_le.c **** 
 176:bluetooth_le.c **** 	state = crc_init & 0xffffff;
 177:bluetooth_le.c **** 	for (i = 0; i < len; ++i) {
 362              		.loc 1 177 0
 363 0002 0C46     		mov	r4, r1
 176:bluetooth_le.c **** 	for (i = 0; i < len; ++i) {
 364              		.loc 1 176 0
 365 0004 20F07F40 		bic	r0, r0, #-16777216
 366              	.LVL48:
 367              	.L40:
 368 0008 631A     		subs	r3, r4, r1
 369              		.loc 1 177 0 discriminator 1
 370 000a 9342     		cmp	r3, r2
 371 000c 09DA     		bge	.L42
 178:bluetooth_le.c **** 		key = data[i] ^ (state & 0xff);
 372              		.loc 1 178 0 discriminator 3
 373 000e 14F8013B 		ldrb	r3, [r4], #1	@ zero_extendqisi2
 374              	.LVL49:
 179:bluetooth_le.c **** 		state = (state >> 8) ^ btle_crc_lut[key];
 375              		.loc 1 179 0 discriminator 3
 376 0012 044D     		ldr	r5, .L43
 178:bluetooth_le.c **** 		key = data[i] ^ (state & 0xff);
 377              		.loc 1 178 0 discriminator 3
 378 0014 4340     		eors	r3, r3, r0
 379              	.LVL50:
 380              		.loc 1 179 0 discriminator 3
 381 0016 DBB2     		uxtb	r3, r3
 382 0018 55F82330 		ldr	r3, [r5, r3, lsl #2]
 383 001c 83EA1020 		eor	r0, r3, r0, lsr #8
ARM GAS  /tmp/ccbNS4P9.s 			page 11


 384              	.LVL51:
 385 0020 F2E7     		b	.L40
 386              	.L42:
 180:bluetooth_le.c **** 	}
 181:bluetooth_le.c **** 	return state;
 182:bluetooth_le.c **** }
 387              		.loc 1 182 0
 388 0022 30BD     		pop	{r4, r5, pc}
 389              	.LVL52:
 390              	.L44:
 391              		.align	2
 392              	.L43:
 393 0024 00000000 		.word	.LANCHOR0
 394              		.cfi_endproc
 395              	.LFE5:
 397              		.section	.text.le_dewhiten,"ax",%progbits
 398              		.align	1
 399              		.global	le_dewhiten
 400              		.thumb
 401              		.thumb_func
 403              	le_dewhiten:
 404              	.LFB6:
 183:bluetooth_le.c **** 
 184:bluetooth_le.c **** /*
 185:bluetooth_le.c ****  * Dewhiten and reverse the bit order of a buffer in place.
 186:bluetooth_le.c ****  * Channel is a physical channel in the range [2402, 2480]
 187:bluetooth_le.c ****  * TODO convert this to use whitening word
 188:bluetooth_le.c ****  */
 189:bluetooth_le.c **** void le_dewhiten(uint8_t *data, unsigned size, unsigned channel) {
 405              		.loc 1 189 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              	.LVL53:
 410 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 411              		.cfi_def_cfa_offset 24
 412              		.cfi_offset 3, -24
 413              		.cfi_offset 4, -20
 414              		.cfi_offset 5, -16
 415              		.cfi_offset 6, -12
 416              		.cfi_offset 7, -8
 417              		.cfi_offset 14, -4
 418              		.loc 1 189 0
 419 0002 0646     		mov	r6, r0
 190:bluetooth_le.c **** 	unsigned i, j, bit;
 191:bluetooth_le.c **** 	unsigned idx = whitening_index[btle_channel_index(channel)];
 420              		.loc 1 191 0
 421 0004 90B2     		uxth	r0, r2
 422              	.LVL54:
 189:bluetooth_le.c **** 	unsigned i, j, bit;
 423              		.loc 1 189 0
 424 0006 0C46     		mov	r4, r1
 425              		.loc 1 191 0
 426 0008 FFF7FEFF 		bl	btle_channel_index
 427              	.LVL55:
 428 000c 144B     		ldr	r3, .L50
 429 000e 3119     		adds	r1, r6, r4
ARM GAS  /tmp/ccbNS4P9.s 			page 12


 430 0010 1D5C     		ldrb	r5, [r3, r0]	@ zero_extendqisi2
 431              	.LVL56:
 432 0012 9E46     		mov	lr, r3
 433 0014 3046     		mov	r0, r6
 434              	.LVL57:
 435              	.L46:
 192:bluetooth_le.c **** 
 193:bluetooth_le.c **** 	for (i = 0; i < size; ++i) {
 436              		.loc 1 193 0 discriminator 1
 437 0016 8842     		cmp	r0, r1
 438 0018 20D0     		beq	.L45
 439              	.LBB11:
 194:bluetooth_le.c **** 		uint8_t out = 0;
 195:bluetooth_le.c **** 		for (j = 0; j < 8; ++j) {
 196:bluetooth_le.c **** 			bit = (data[i] >> (7-j)) & 1;
 440              		.loc 1 196 0
 441 001a 0027     		movs	r7, #0
 442 001c 3E46     		mov	r6, r7
 443 001e 90F800C0 		ldrb	ip, [r0]	@ zero_extendqisi2
 444              	.L47:
 445              	.LVL58:
 197:bluetooth_le.c **** 			bit ^= whitening[idx];
 446              		.loc 1 197 0 discriminator 3
 447 0022 0EEB0502 		add	r2, lr, r5
 448 0026 92F82840 		ldrb	r4, [r2, #40]	@ zero_extendqisi2
 198:bluetooth_le.c **** 			idx = (idx + 1) % sizeof(whitening);
 449              		.loc 1 198 0 discriminator 3
 450 002a 0135     		adds	r5, r5, #1
 451              	.LVL59:
 452 002c 7F22     		movs	r2, #127
 453 002e B5FBF2F2 		udiv	r2, r5, r2
 454 0032 C6F10703 		rsb	r3, r6, #7
 196:bluetooth_le.c **** 			bit ^= whitening[idx];
 455              		.loc 1 196 0 discriminator 3
 456 0036 4CFA03F3 		asr	r3, ip, r3
 457 003a 03F00103 		and	r3, r3, #1
 458              	.LVL60:
 197:bluetooth_le.c **** 			bit ^= whitening[idx];
 459              		.loc 1 197 0 discriminator 3
 460 003e 6340     		eors	r3, r3, r4
 461              	.LVL61:
 462              		.loc 1 198 0 discriminator 3
 463 0040 C2EBC212 		rsb	r2, r2, r2, lsl #7
 464 0044 AD1A     		subs	r5, r5, r2
 465              	.LVL62:
 199:bluetooth_le.c **** 			out |= bit << j;
 466              		.loc 1 199 0 discriminator 3
 467 0046 03FA06F2 		lsl	r2, r3, r6
 195:bluetooth_le.c **** 			bit = (data[i] >> (7-j)) & 1;
 468              		.loc 1 195 0 discriminator 3
 469 004a 0136     		adds	r6, r6, #1
 470              	.LVL63:
 471              		.loc 1 199 0 discriminator 3
 472 004c 47EA0203 		orr	r3, r7, r2
 473              	.LVL64:
 195:bluetooth_le.c **** 			bit = (data[i] >> (7-j)) & 1;
 474              		.loc 1 195 0 discriminator 3
ARM GAS  /tmp/ccbNS4P9.s 			page 13


 475 0050 082E     		cmp	r6, #8
 476              		.loc 1 199 0 discriminator 3
 477 0052 DFB2     		uxtb	r7, r3
 478              	.LVL65:
 195:bluetooth_le.c **** 			bit = (data[i] >> (7-j)) & 1;
 479              		.loc 1 195 0 discriminator 3
 480 0054 E5D1     		bne	.L47
 200:bluetooth_le.c **** 		}
 201:bluetooth_le.c **** 		data[i] = out;
 481              		.loc 1 201 0 discriminator 2
 482 0056 00F8017B 		strb	r7, [r0], #1
 483              	.LVL66:
 484 005a DCE7     		b	.L46
 485              	.LVL67:
 486              	.L45:
 487 005c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 488              	.LVL68:
 489              	.L51:
 490 005e 00BF     		.align	2
 491              	.L50:
 492 0060 00000000 		.word	.LANCHOR1
 493              	.LBE11:
 494              		.cfi_endproc
 495              	.LFE6:
 497              		.section	.text.le_parse_channel_map,"ax",%progbits
 498              		.align	1
 499              		.global	le_parse_channel_map
 500              		.thumb
 501              		.thumb_func
 503              	le_parse_channel_map:
 504              	.LFB7:
 202:bluetooth_le.c **** 	}
 203:bluetooth_le.c **** }
 204:bluetooth_le.c **** 
 205:bluetooth_le.c **** /*
 206:bluetooth_le.c ****  * Parse a channel map and populate the le_channel_remapping_t struct.
 207:bluetooth_le.c ****  */
 208:bluetooth_le.c **** void le_parse_channel_map(uint8_t *channel_map, le_channel_remapping_t *remapping) {
 505              		.loc 1 208 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509              	.LVL69:
 510 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 511              		.cfi_def_cfa_offset 24
 512              		.cfi_offset 3, -24
 513              		.cfi_offset 4, -20
 514              		.cfi_offset 5, -16
 515              		.cfi_offset 6, -12
 516              		.cfi_offset 7, -8
 517              		.cfi_offset 14, -4
 518              	.LVL70:
 519              		.loc 1 208 0
 520 0002 0546     		mov	r5, r0
 521 0004 0C46     		mov	r4, r1
 209:bluetooth_le.c **** 	unsigned i, j, byte;
 210:bluetooth_le.c **** 	unsigned idx = 0;
ARM GAS  /tmp/ccbNS4P9.s 			page 14


 211:bluetooth_le.c **** 
 212:bluetooth_le.c **** 	memset(remapping, 0, sizeof(*remapping));
 522              		.loc 1 212 0
 523 0006 0846     		mov	r0, r1
 524              	.LVL71:
 525 0008 C022     		movs	r2, #192
 526 000a 0021     		movs	r1, #0
 527              	.LVL72:
 528 000c FFF7FEFF 		bl	memset
 529              	.LVL73:
 530 0010 681E     		subs	r0, r5, #1
 210:bluetooth_le.c **** 
 531              		.loc 1 210 0
 532 0012 0023     		movs	r3, #0
 533 0014 0435     		adds	r5, r5, #4
 534              	.LVL74:
 535              	.L57:
 213:bluetooth_le.c **** 
 214:bluetooth_le.c **** 	for (i = 0; i < 5; ++i) {
 215:bluetooth_le.c **** 		byte = channel_map[i];
 536              		.loc 1 215 0
 537 0016 10F8012F 		ldrb	r2, [r0, #1]!	@ zero_extendqisi2
 538              	.LVL75:
 539 001a 03F10806 		add	r6, r3, #8
 540              	.LVL76:
 541              	.L56:
 216:bluetooth_le.c **** 		for (j = 0; j < 8; ++j) {
 217:bluetooth_le.c **** 			if (byte & 1) {
 542              		.loc 1 217 0
 543 001e 12F00101 		ands	r1, r2, #1
 218:bluetooth_le.c **** 				remapping->channel_in_use[idx] = 1;
 544              		.loc 1 218 0
 545 0022 1DBF     		ittte	ne
 546 0024 0121     		movne	r1, #1
 547 0026 44F82310 		strne	r1, [r4, r3, lsl #2]
 219:bluetooth_le.c **** 				remapping->remapping_index[remapping->total_channels] = idx;
 548              		.loc 1 219 0
 549 002a D4F8BC10 		ldrne	r1, [r4, #188]
 220:bluetooth_le.c **** 				++remapping->total_channels;
 221:bluetooth_le.c **** 			} else {
 222:bluetooth_le.c **** 				remapping->channel_in_use[idx] = 0;
 550              		.loc 1 222 0
 551 002e 44F82310 		streq	r1, [r4, r3, lsl #2]
 219:bluetooth_le.c **** 				remapping->remapping_index[remapping->total_channels] = idx;
 552              		.loc 1 219 0
 553 0032 1EBF     		ittt	ne
 554 0034 6718     		addne	r7, r4, r1
 555 0036 87F89430 		strbne	r3, [r7, #148]
 220:bluetooth_le.c **** 				++remapping->total_channels;
 556              		.loc 1 220 0
 557 003a 0131     		addne	r1, r1, #1
 223:bluetooth_le.c **** 			}
 224:bluetooth_le.c **** 
 225:bluetooth_le.c **** 			byte >>= 1;
 226:bluetooth_le.c **** 
 227:bluetooth_le.c **** 			++idx;
 558              		.loc 1 227 0
ARM GAS  /tmp/ccbNS4P9.s 			page 15


 559 003c 03F10103 		add	r3, r3, #1
 560              	.LVL77:
 220:bluetooth_le.c **** 				++remapping->total_channels;
 561              		.loc 1 220 0
 562 0040 18BF     		it	ne
 563 0042 C4F8BC10 		strne	r1, [r4, #188]
 228:bluetooth_le.c **** 			if (idx == 37)
 564              		.loc 1 228 0
 565 0046 252B     		cmp	r3, #37
 225:bluetooth_le.c **** 
 566              		.loc 1 225 0
 567 0048 4FEA5202 		lsr	r2, r2, #1
 568              	.LVL78:
 569              		.loc 1 228 0
 570 004c 02D0     		beq	.L58
 216:bluetooth_le.c **** 			if (byte & 1) {
 571              		.loc 1 216 0 discriminator 2
 572 004e B342     		cmp	r3, r6
 573 0050 E5D1     		bne	.L56
 574 0052 00E0     		b	.L55
 575              	.L58:
 576 0054 1E46     		mov	r6, r3
 577              	.LVL79:
 578              	.L55:
 214:bluetooth_le.c **** 		byte = channel_map[i];
 579              		.loc 1 214 0 discriminator 2
 580 0056 A842     		cmp	r0, r5
 581 0058 01D0     		beq	.L61
 582 005a 3346     		mov	r3, r6
 583 005c DBE7     		b	.L57
 584              	.L61:
 229:bluetooth_le.c **** 				break;
 230:bluetooth_le.c **** 		}
 231:bluetooth_le.c **** 	}
 232:bluetooth_le.c **** }
 585              		.loc 1 232 0
 586 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 587              		.cfi_endproc
 588              	.LFE7:
 590              		.section	.text.le_map_channel,"ax",%progbits
 591              		.align	1
 592              		.global	le_map_channel
 593              		.thumb
 594              		.thumb_func
 596              	le_map_channel:
 597              	.LFB8:
 233:bluetooth_le.c **** 
 234:bluetooth_le.c **** /*
 235:bluetooth_le.c ****  * Map a channel index to a used index given a remapping struct.
 236:bluetooth_le.c ****  */
 237:bluetooth_le.c **** uint8_t le_map_channel(uint8_t channel_idx, le_channel_remapping_t *remapping) {
 598              		.loc 1 237 0
 599              		.cfi_startproc
 600              		@ args = 0, pretend = 0, frame = 0
 601              		@ frame_needed = 0, uses_anonymous_args = 0
 602              		@ link register save eliminated.
 603              	.LVL80:
ARM GAS  /tmp/ccbNS4P9.s 			page 16


 238:bluetooth_le.c **** 	if (remapping->channel_in_use[channel_idx])
 604              		.loc 1 238 0
 605 0000 51F82030 		ldr	r3, [r1, r0, lsl #2]
 606 0004 43B9     		cbnz	r3, .L63
 239:bluetooth_le.c **** 		return channel_idx;
 240:bluetooth_le.c **** 	else
 241:bluetooth_le.c **** 		return remapping->remapping_index[channel_idx % remapping->total_channels];
 607              		.loc 1 241 0
 608 0006 D1F8BC20 		ldr	r2, [r1, #188]
 609 000a B0FBF2F3 		udiv	r3, r0, r2
 610 000e 02FB1300 		mls	r0, r2, r3, r0
 611              	.LVL81:
 612 0012 0144     		add	r1, r1, r0
 613              	.LVL82:
 614 0014 91F89400 		ldrb	r0, [r1, #148]	@ zero_extendqisi2
 615              	.L63:
 242:bluetooth_le.c **** }
 616              		.loc 1 242 0
 617 0018 7047     		bx	lr
 618              		.cfi_endproc
 619              	.LFE8:
 621              		.global	btle_crc_lut
 622              		.section	.rodata
 623              		.set	.LANCHOR1,. + 0
 626              	whitening_index:
 627 0000 46       		.byte	70
 628 0001 3E       		.byte	62
 629 0002 78       		.byte	120
 630 0003 6F       		.byte	111
 631 0004 4D       		.byte	77
 632 0005 2E       		.byte	46
 633 0006 0F       		.byte	15
 634 0007 65       		.byte	101
 635 0008 42       		.byte	66
 636 0009 27       		.byte	39
 637 000a 1F       		.byte	31
 638 000b 1A       		.byte	26
 639 000c 50       		.byte	80
 640 000d 53       		.byte	83
 641 000e 7D       		.byte	125
 642 000f 59       		.byte	89
 643 0010 0A       		.byte	10
 644 0011 23       		.byte	35
 645 0012 08       		.byte	8
 646 0013 36       		.byte	54
 647 0014 7A       		.byte	122
 648 0015 11       		.byte	17
 649 0016 21       		.byte	33
 650 0017 00       		.byte	0
 651 0018 3A       		.byte	58
 652 0019 73       		.byte	115
 653 001a 06       		.byte	6
 654 001b 5E       		.byte	94
 655 001c 56       		.byte	86
 656 001d 31       		.byte	49
 657 001e 34       		.byte	52
 658 001f 14       		.byte	20
ARM GAS  /tmp/ccbNS4P9.s 			page 17


 659 0020 28       		.byte	40
 660 0021 1B       		.byte	27
 661 0022 54       		.byte	84
 662 0023 5A       		.byte	90
 663 0024 3F       		.byte	63
 664 0025 70       		.byte	112
 665 0026 2F       		.byte	47
 666 0027 66       		.byte	102
 669              	whitening:
 670 0028 01       		.byte	1
 671 0029 01       		.byte	1
 672 002a 01       		.byte	1
 673 002b 01       		.byte	1
 674 002c 00       		.byte	0
 675 002d 01       		.byte	1
 676 002e 00       		.byte	0
 677 002f 01       		.byte	1
 678 0030 00       		.byte	0
 679 0031 01       		.byte	1
 680 0032 00       		.byte	0
 681 0033 00       		.byte	0
 682 0034 00       		.byte	0
 683 0035 00       		.byte	0
 684 0036 01       		.byte	1
 685 0037 00       		.byte	0
 686 0038 01       		.byte	1
 687 0039 01       		.byte	1
 688 003a 00       		.byte	0
 689 003b 01       		.byte	1
 690 003c 01       		.byte	1
 691 003d 01       		.byte	1
 692 003e 01       		.byte	1
 693 003f 00       		.byte	0
 694 0040 00       		.byte	0
 695 0041 01       		.byte	1
 696 0042 01       		.byte	1
 697 0043 01       		.byte	1
 698 0044 00       		.byte	0
 699 0045 00       		.byte	0
 700 0046 01       		.byte	1
 701 0047 00       		.byte	0
 702 0048 01       		.byte	1
 703 0049 00       		.byte	0
 704 004a 01       		.byte	1
 705 004b 01       		.byte	1
 706 004c 00       		.byte	0
 707 004d 00       		.byte	0
 708 004e 01       		.byte	1
 709 004f 01       		.byte	1
 710 0050 00       		.byte	0
 711 0051 00       		.byte	0
 712 0052 00       		.byte	0
 713 0053 00       		.byte	0
 714 0054 00       		.byte	0
 715 0055 01       		.byte	1
 716 0056 01       		.byte	1
 717 0057 00       		.byte	0
ARM GAS  /tmp/ccbNS4P9.s 			page 18


 718 0058 01       		.byte	1
 719 0059 01       		.byte	1
 720 005a 00       		.byte	0
 721 005b 01       		.byte	1
 722 005c 00       		.byte	0
 723 005d 01       		.byte	1
 724 005e 01       		.byte	1
 725 005f 01       		.byte	1
 726 0060 00       		.byte	0
 727 0061 01       		.byte	1
 728 0062 00       		.byte	0
 729 0063 00       		.byte	0
 730 0064 00       		.byte	0
 731 0065 01       		.byte	1
 732 0066 01       		.byte	1
 733 0067 00       		.byte	0
 734 0068 00       		.byte	0
 735 0069 01       		.byte	1
 736 006a 00       		.byte	0
 737 006b 00       		.byte	0
 738 006c 00       		.byte	0
 739 006d 01       		.byte	1
 740 006e 00       		.byte	0
 741 006f 00       		.byte	0
 742 0070 00       		.byte	0
 743 0071 00       		.byte	0
 744 0072 00       		.byte	0
 745 0073 00       		.byte	0
 746 0074 01       		.byte	1
 747 0075 00       		.byte	0
 748 0076 00       		.byte	0
 749 0077 01       		.byte	1
 750 0078 00       		.byte	0
 751 0079 00       		.byte	0
 752 007a 01       		.byte	1
 753 007b 01       		.byte	1
 754 007c 00       		.byte	0
 755 007d 01       		.byte	1
 756 007e 00       		.byte	0
 757 007f 00       		.byte	0
 758 0080 01       		.byte	1
 759 0081 01       		.byte	1
 760 0082 01       		.byte	1
 761 0083 01       		.byte	1
 762 0084 00       		.byte	0
 763 0085 01       		.byte	1
 764 0086 01       		.byte	1
 765 0087 01       		.byte	1
 766 0088 00       		.byte	0
 767 0089 00       		.byte	0
 768 008a 00       		.byte	0
 769 008b 00       		.byte	0
 770 008c 01       		.byte	1
 771 008d 01       		.byte	1
 772 008e 01       		.byte	1
 773 008f 01       		.byte	1
 774 0090 01       		.byte	1
ARM GAS  /tmp/ccbNS4P9.s 			page 19


 775 0091 01       		.byte	1
 776 0092 01       		.byte	1
 777 0093 00       		.byte	0
 778 0094 00       		.byte	0
 779 0095 00       		.byte	0
 780 0096 01       		.byte	1
 781 0097 01       		.byte	1
 782 0098 01       		.byte	1
 783 0099 00       		.byte	0
 784 009a 01       		.byte	1
 785 009b 01       		.byte	1
 786 009c 00       		.byte	0
 787 009d 00       		.byte	0
 788 009e 00       		.byte	0
 789 009f 01       		.byte	1
 790 00a0 00       		.byte	0
 791 00a1 01       		.byte	1
 792 00a2 00       		.byte	0
 793 00a3 00       		.byte	0
 794 00a4 01       		.byte	1
 795 00a5 00       		.byte	0
 796 00a6 01       		.byte	1
 797              		.data
 798              		.align	2
 799              		.set	.LANCHOR0,. + 0
 802              	btle_crc_lut:
 803 0000 00000000 		.word	0
 804 0004 C0B40100 		.word	111808
 805 0008 80690300 		.word	223616
 806 000c 40DD0200 		.word	187712
 807 0010 00D30600 		.word	447232
 808 0014 C0670700 		.word	485312
 809 0018 80BA0500 		.word	375424
 810 001c 400E0400 		.word	265792
 811 0020 00A60D00 		.word	894464
 812 0024 C0120C00 		.word	791232
 813 0028 80CF0E00 		.word	970624
 814 002c 407B0F00 		.word	1014592
 815 0030 00750B00 		.word	750848
 816 0034 C0C10A00 		.word	704960
 817 0038 801C0800 		.word	531584
 818 003c 40A80900 		.word	632896
 819 0040 004C1B00 		.word	1788928
 820 0044 C0F81A00 		.word	1767616
 821 0048 80251800 		.word	1582464
 822 004c 40911900 		.word	1675584
 823 0050 009F1D00 		.word	1941248
 824 0054 C02B1C00 		.word	1846208
 825 0058 80F61E00 		.word	2029184
 826 005c 40421F00 		.word	2048576
 827 0060 00EA1600 		.word	1501696
 828 0064 C05E1700 		.word	1531584
 829 0068 80831500 		.word	1409920
 830 006c 40371400 		.word	1324864
 831 0070 00391000 		.word	1063168
 832 0074 C08D1100 		.word	1150400
 833 0078 80501300 		.word	1265792
ARM GAS  /tmp/ccbNS4P9.s 			page 20


 834 007c 40E41200 		.word	1238080
 835 0080 00983600 		.word	3577856
 836 0084 C02C3700 		.word	3615936
 837 0088 80F13500 		.word	3535232
 838 008c 40453400 		.word	3425600
 839 0090 004B3000 		.word	3164928
 840 0094 C0FF3100 		.word	3276736
 841 0098 80223300 		.word	3351168
 842 009c 40963200 		.word	3315264
 843 00a0 003E3B00 		.word	3882496
 844 00a4 C08A3A00 		.word	3836608
 845 00a8 80573800 		.word	3692416
 846 00ac 40E33900 		.word	3793728
 847 00b0 00ED3D00 		.word	4058368
 848 00b4 C0593C00 		.word	3955136
 849 00b8 80843E00 		.word	4097152
 850 00bc 40303F00 		.word	4141120
 851 00c0 00D42D00 		.word	3003392
 852 00c4 C0602C00 		.word	2908352
 853 00c8 80BD2E00 		.word	3063168
 854 00cc 40092F00 		.word	3082560
 855 00d0 00072B00 		.word	2819840
 856 00d4 C0B32A00 		.word	2798528
 857 00d8 806E2800 		.word	2649728
 858 00dc 40DA2900 		.word	2742848
 859 00e0 00722000 		.word	2126336
 860 00e4 C0C62100 		.word	2213568
 861 00e8 801B2300 		.word	2300800
 862 00ec 40AF2200 		.word	2273088
 863 00f0 00A12600 		.word	2531584
 864 00f4 C0152700 		.word	2561472
 865 00f8 80C82500 		.word	2476160
 866 00fc 407C2400 		.word	2391104
 867 0100 00306D00 		.word	7155712
 868 0104 C0846C00 		.word	7111872
 869 0108 80596E00 		.word	7231872
 870 010c 40ED6F00 		.word	7335232
 871 0110 00E36B00 		.word	7070464
 872 0114 C0576A00 		.word	6969280
 873 0118 808A6800 		.word	6851200
 874 011c 403E6900 		.word	6897216
 875 0120 00966000 		.word	6329856
 876 0124 C0226100 		.word	6365888
 877 0128 80FF6300 		.word	6553472
 878 012c 404B6200 		.word	6441792
 879 0130 00456600 		.word	6702336
 880 0134 C0F16700 		.word	6812096
 881 0138 802C6500 		.word	6630528
 882 013c 40986400 		.word	6592576
 883 0140 007C7600 		.word	7764992
 884 0144 C0C87700 		.word	7850176
 885 0148 80157500 		.word	7673216
 886 014c 40A17400 		.word	7643456
 887 0150 00AF7000 		.word	7384832
 888 0154 C01B7100 		.word	7412672
 889 0158 80C67300 		.word	7587456
 890 015c 40727200 		.word	7500352
ARM GAS  /tmp/ccbNS4P9.s 			page 21


 891 0160 00DA7B00 		.word	8116736
 892 0164 C06E7A00 		.word	8023744
 893 0168 80B37800 		.word	7910272
 894 016c 40077900 		.word	7931712
 895 0170 00097D00 		.word	8194304
 896 0174 C0BD7C00 		.word	8175040
 897 0178 80607E00 		.word	8282240
 898 017c 40D47F00 		.word	8377408
 899 0180 00A85B00 		.word	6006784
 900 0184 C01C5A00 		.word	5905600
 901 0188 80C15800 		.word	5816704
 902 018c 40755900 		.word	5862720
 903 0190 007B5D00 		.word	6126336
 904 0194 C0CF5C00 		.word	6082496
 905 0198 80125E00 		.word	6165120
 906 019c 40A65F00 		.word	6268480
 907 01a0 000E5600 		.word	5639680
 908 01a4 C0BA5700 		.word	5749440
 909 01a8 80675500 		.word	5597056
 910 01ac 40D35400 		.word	5559104
 911 01b0 00DD5000 		.word	5299456
 912 01b4 C0695100 		.word	5335488
 913 01b8 80B45300 		.word	5485696
 914 01bc 40005200 		.word	5374016
 915 01c0 00E44000 		.word	4252672
 916 01c4 C0504100 		.word	4280512
 917 01c8 808D4300 		.word	4427136
 918 01cc 40394200 		.word	4340032
 919 01d0 00374600 		.word	4601600
 920 01d4 C0834700 		.word	4686784
 921 01d8 805E4500 		.word	4546176
 922 01dc 40EA4400 		.word	4516416
 923 01e0 00424D00 		.word	5063168
 924 01e4 C0F64C00 		.word	5043904
 925 01e8 802B4E00 		.word	5122944
 926 01ec 409F4F00 		.word	5218112
 927 01f0 00914B00 		.word	4952320
 928 01f4 C0254A00 		.word	4859328
 929 01f8 80F84800 		.word	4782208
 930 01fc 404C4900 		.word	4803648
 931 0200 0060DA00 		.word	14311424
 932 0204 C0D4DB00 		.word	14406848
 933 0208 8009D900 		.word	14223744
 934 020c 40BDD800 		.word	14204224
 935 0210 00B3DC00 		.word	14463744
 936 0214 C007DD00 		.word	14485440
 937 0218 80DADF00 		.word	14670464
 938 021c 406EDE00 		.word	14577216
 939 0220 00C6D700 		.word	14140928
 940 0224 C072D600 		.word	14054080
 941 0228 80AFD400 		.word	13938560
 942 022c 401BD500 		.word	13966144
 943 0230 0015D100 		.word	13702400
 944 0234 C0A1D000 		.word	13672896
 945 0238 807CD200 		.word	13794432
 946 023c 40C8D300 		.word	13879360
 947 0240 002CC100 		.word	12659712
ARM GAS  /tmp/ccbNS4P9.s 			page 22


 948 0244 C098C000 		.word	12622016
 949 0248 8045C200 		.word	12731776
 950 024c 40F1C300 		.word	12841280
 951 0250 00FFC700 		.word	13106944
 952 0254 C04BC600 		.word	12995520
 953 0258 8096C400 		.word	12883584
 954 025c 4022C500 		.word	12919360
 955 0260 008ACC00 		.word	13404672
 956 0264 C03ECD00 		.word	13450944
 957 0268 80E3CF00 		.word	13624192
 958 026c 4057CE00 		.word	13522752
 959 0270 0059CA00 		.word	13261056
 960 0274 C0EDCB00 		.word	13364672
 961 0278 8030C900 		.word	13185152
 962 027c 4084C800 		.word	13141056
 963 0280 00F8EC00 		.word	15529984
 964 0284 C04CED00 		.word	15551680
 965 0288 8091EF00 		.word	15700352
 966 028c 4025EE00 		.word	15607104
 967 0290 002BEA00 		.word	15346432
 968 0294 C09FEB00 		.word	15441856
 969 0298 8042E900 		.word	15286912
 970 029c 40F6E800 		.word	15267392
 971 02a0 005EE100 		.word	14769664
 972 02a4 C0EAE000 		.word	14740160
 973 02a8 8037E200 		.word	14825344
 974 02ac 4083E300 		.word	14910272
 975 02b0 008DE700 		.word	15174912
 976 02b4 C039E600 		.word	15088064
 977 02b8 80E4E400 		.word	15000704
 978 02bc 4050E500 		.word	15028288
 979 02c0 00B4F700 		.word	16233472
 980 02c4 C000F600 		.word	16122048
 981 02c8 80DDF400 		.word	16047488
 982 02cc 4069F500 		.word	16083264
 983 02d0 0067F100 		.word	15820544
 984 02d4 C0D3F000 		.word	15782848
 985 02d8 800EF200 		.word	15863424
 986 02dc 40BAF300 		.word	15972928
 987 02e0 0012FA00 		.word	16388608
 988 02e4 C0A6FB00 		.word	16492224
 989 02e8 807BF900 		.word	16350080
 990 02ec 40CFF800 		.word	16305984
 991 02f0 00C1FC00 		.word	16564480
 992 02f4 C075FD00 		.word	16610752
 993 02f8 80A8FF00 		.word	16754816
 994 02fc 401CFE00 		.word	16653376
 995 0300 0050B700 		.word	12013568
 996 0304 C0E4B600 		.word	11986112
 997 0308 8039B400 		.word	11811200
 998 030c 408DB500 		.word	11898176
 999 0310 0083B100 		.word	11633408
 1000 0314 C037B000 		.word	11548608
 1001 0318 80EAB200 		.word	11725440
 1002 031c 405EB300 		.word	11755072
 1003 0320 00F6BA00 		.word	12252672
 1004 0324 C042BB00 		.word	12272320
ARM GAS  /tmp/ccbNS4P9.s 			page 23


 1005 0328 809FB900 		.word	12164992
 1006 032c 402BB800 		.word	12069696
 1007 0330 0025BC00 		.word	12330240
 1008 0334 C091BD00 		.word	12423616
 1009 0338 804CBF00 		.word	12536960
 1010 033c 40F8BE00 		.word	12515392
 1011 0340 001CAC00 		.word	11279360
 1012 0344 C0A8AD00 		.word	11380928
 1013 0348 8075AF00 		.word	11498880
 1014 034c 40C1AE00 		.word	11452736
 1015 0350 00CFAA00 		.word	11194112
 1016 0354 C07BAB00 		.word	11238336
 1017 0358 80A6A900 		.word	11118208
 1018 035c 4012A800 		.word	11014720
 1019 0360 00BAA100 		.word	10598912
 1020 0364 C00EA000 		.word	10489536
 1021 0368 80D3A200 		.word	10670976
 1022 036c 4067A300 		.word	10708800
 1023 0370 0069A700 		.word	10971392
 1024 0374 C0DDA600 		.word	10935744
 1025 0378 8000A400 		.word	10748032
 1026 037c 40B4A500 		.word	10859584
 1027 0380 00C88100 		.word	8505344
 1028 0384 C07C8000 		.word	8420544
 1029 0388 80A18200 		.word	8561024
 1030 038c 40158300 		.word	8590656
 1031 0390 001B8700 		.word	8854272
 1032 0394 C0AF8600 		.word	8826816
 1033 0398 80728400 		.word	8680064
 1034 039c 40C68500 		.word	8767040
 1035 03a0 006E8C00 		.word	9203200
 1036 03a4 C0DA8D00 		.word	9296576
 1037 03a8 80078F00 		.word	9373568
 1038 03ac 40B38E00 		.word	9352000
 1039 03b0 00BD8A00 		.word	9092352
 1040 03b4 C0098B00 		.word	9112000
 1041 03b8 80D48900 		.word	9032832
 1042 03bc 40608800 		.word	8937536
 1043 03c0 00849A00 		.word	10126336
 1044 03c4 C0309B00 		.word	10170560
 1045 03c8 80ED9900 		.word	10087808
 1046 03cc 40599800 		.word	9984320
 1047 03d0 00579C00 		.word	10245888
 1048 03d4 C0E39D00 		.word	10347456
 1049 03d8 803E9F00 		.word	10436224
 1050 03dc 408A9E00 		.word	10390080
 1051 03e0 00229700 		.word	9904640
 1052 03e4 C0969600 		.word	9868992
 1053 03e8 804B9400 		.word	9718656
 1054 03ec 40FF9500 		.word	9830208
 1055 03f0 00F19100 		.word	9564416
 1056 03f4 C0459000 		.word	9455040
 1057 03f8 80989200 		.word	9607296
 1058 03fc 402C9300 		.word	9645120
 1059              		.text
 1060              	.Letext0:
 1061              		.file 2 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stdint-gcc.h"
ARM GAS  /tmp/ccbNS4P9.s 			page 24


 1062              		.file 3 "bluetooth_le.h"
 1063              		.file 4 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 1064              		.file 5 "/usr/include/newlib/string.h"
ARM GAS  /tmp/ccbNS4P9.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bluetooth_le.c
     /tmp/ccbNS4P9.s:19     .text.btle_channel_index:0000000000000000 $t
     /tmp/ccbNS4P9.s:24     .text.btle_channel_index:0000000000000000 btle_channel_index
     /tmp/ccbNS4P9.s:80     .text.btle_channel_index_to_phys:0000000000000000 $t
     /tmp/ccbNS4P9.s:85     .text.btle_channel_index_to_phys:0000000000000000 btle_channel_index_to_phys
     /tmp/ccbNS4P9.s:141    .text.btle_next_hop:0000000000000000 $t
     /tmp/ccbNS4P9.s:146    .text.btle_next_hop:0000000000000000 btle_next_hop
     /tmp/ccbNS4P9.s:180    .text.btle_calc_crc:0000000000000000 $t
     /tmp/ccbNS4P9.s:185    .text.btle_calc_crc:0000000000000000 btle_calc_crc
     /tmp/ccbNS4P9.s:252    .text.btle_reverse_crc:0000000000000000 $t
     /tmp/ccbNS4P9.s:257    .text.btle_reverse_crc:0000000000000000 btle_reverse_crc
     /tmp/ccbNS4P9.s:345    .text.btle_crcgen_lut:0000000000000000 $t
     /tmp/ccbNS4P9.s:350    .text.btle_crcgen_lut:0000000000000000 btle_crcgen_lut
     /tmp/ccbNS4P9.s:393    .text.btle_crcgen_lut:0000000000000024 $d
     /tmp/ccbNS4P9.s:398    .text.le_dewhiten:0000000000000000 $t
     /tmp/ccbNS4P9.s:403    .text.le_dewhiten:0000000000000000 le_dewhiten
     /tmp/ccbNS4P9.s:492    .text.le_dewhiten:0000000000000060 $d
     /tmp/ccbNS4P9.s:498    .text.le_parse_channel_map:0000000000000000 $t
     /tmp/ccbNS4P9.s:503    .text.le_parse_channel_map:0000000000000000 le_parse_channel_map
     /tmp/ccbNS4P9.s:591    .text.le_map_channel:0000000000000000 $t
     /tmp/ccbNS4P9.s:596    .text.le_map_channel:0000000000000000 le_map_channel
     /tmp/ccbNS4P9.s:802    .data:0000000000000000 btle_crc_lut
     /tmp/ccbNS4P9.s:626    .rodata:0000000000000000 whitening_index
     /tmp/ccbNS4P9.s:669    .rodata:0000000000000028 whitening
     /tmp/ccbNS4P9.s:798    .data:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memset
